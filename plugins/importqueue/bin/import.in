#!/usr/bin/php
<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * import -- import incident reports into the AIRT Queue Manager.
 * 
 * $Id$
 */

// Pick up standard AIRT config and required library (which pulls in the
// other required libraries).
require_once '@AIRTPATH@/airt.cfg';
require_once LIBDIR.'/importqueue/importqueue.plib';

// Set up all default command line options.
// Options are either Boolean (--option) or scalar (--option=value).
$OPTIONS = array();
$OPTIONS['--filter']  = 'none';
$OPTIONS['--help']    = false;
$OPTIONS['--noqueue'] = false;
$OPTIONS['--verbose'] = false;

$FILENAME = '';

// Run over command line arguments. All arguments not starting with -- are
// assumed to be file parameters, but only one file can be read at a time
// for return code reasons.
array_shift($argv);               // get rid of argument 0, the command itself.
foreach ($argv as $param) {
   if (substr($param,0,2)=='--') {
      // Option parameter.
      @list($option,$value) = split('=',$param);
      if (isset($OPTIONS[$option])) {
         // Known option, get new value of the correct type.
         if (is_bool($OPTIONS[$option])) {
            $OPTIONS[$option] = true;
         } else {
            $OPTIONS[$option] = $value;
         }
      } else {
         // Unknown option, quit.
         fwrite(STDERR, t('ERROR: Unknown option "%s".',
                          array('%s'=>$option)).
                        "\n");
         exit(1);
      }
   } else {
      // File parameter.
      if ($FILENAME!='') {
         // Cannot process more than one file, quit.
         fwrite(STDERR, t('ERROR: More than one file name given.')."\n");
         exit(1);
      }
      $FILENAME = $param;
   }
}// foreach parameter

// Retrieve all filters installed in LIBDIR. We need this list for --help,
// so we build it even when no actual filtering might take place.
$FILTERS = array();
$libdir = opendir(LIBDIR.'/importqueue');
while ($file = readdir($libdir)) {
   $filter_name = basename($file,'.plib');
   if (substr($filter_name,0,7)=='filter_') {
      // Found a filter library file, source it. Failures to read it or parse
      // it are not handled gracefully, but cause a proper abort with a
      // meaningful message.
      require_once LIBDIR.'/importqueue/'.$filter_name.'.plib';
      // Proper function installed?
      if (function_exists($filter_name)) {
         // OK, register the filter.
         $FILTERS[] = substr($filter_name,7);
      } else {
         // Bad filter, complain and quit.
         fwrite(STDERR, t('ERROR: Bad filter definition file "%s".',
                          array('%s'=>$filter_name)).
                        "\n");
         exit(1);
      }
   }
}// for each file name
closedir($libdir);

// Check whether the requested filter function exists at all.
$filter_function = 'filter_'.$OPTIONS['--filter'];
if (!function_exists($filter_function)) {
   // Bad filter selection, complain and quit.
   fwrite(STDERR, t('ERROR: No filter "%s" present.',
                    array('%s'=>$OPTIONS['--filter'])).
                    "\n");
   exit(1);
}

// Help requested?
if ($OPTIONS['--help']) {
   printUsage();
   exit(0);
}

// If no file name given, process from stdin, otherwise open the file.
if ($FILENAME=='') {
   $in = STDIN;
   if ($OPTIONS['--verbose']) {
      echo t('Reading from standard input...')."\n";
   }
} else {
   $in = fopen($FILENAME,'r');
   if ($OPTIONS['--verbose']) {
      echo t('Reading from file "%s"...',
             array('%s'=>$FILENAME))."\n";
   }
}

// Pull the file into main memory.
$input = '';
while ($line = fgets($in)) {
   $input .= $line;
}
fclose($in);
if ($OPTIONS['--verbose']) {
   echo t('Read %d bytes.',
          array('%d'=>strlen($input)))."\n";
}


// Send the file through the filter.
$output = '';
if ($OPTIONS['--verbose']) {
   echo t('Filtering through "%s"...',
          array('%s'=>$OPTIONS['--filter']))."\n";
}
$filter_function($input,$output,$OPTIONS['--verbose']);

// Present the filtered XML to the importer.
if ($OPTIONS['--verbose']) {
   echo t('Importing...')."\n";
}
import($output,$OPTIONS['--verbose']);

// Successful completion.
if ($OPTIONS['--verbose']) {
   echo t('Done.')."\n";
}
return 0;

?>
