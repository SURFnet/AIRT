<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * importqueue.plib -- main library for the import queue ("import" command).
 * 
 * $Id$
 */

// Pull in the standard AIRT library.
require_once LIBDIR.'/airt.plib';


/* Produce info on stdout (when user asked for --help). */
function printUsage() {
   global $FILTERS;

   echo t('Incidence import program, part of the AIRT suite.')."\n";
   echo t('Copyright (C) 2005   Tilburg University, The Netherlands.')."\n";
   echo t(
'Usage: import [--filter=<filter>] [--help] [--noqueue] [--verbose] [filename]'
     )."\n";
   echo t(
     'The program reads the import data from stdin if no filename is given.'
     )."\n";
   
   // Enumerate all registered filters.
   if (count($FILTERS)>0) {
      echo t('Available filters:');
      foreach ($FILTERS as $filter) {
         echo ' '.$filter;
      }
      echo "\n";
   }

}// printUsage


/* Actual import function, which presents the standardised XML to the AIRT
 * core.
 * $input      = Standard XML string to import.
 * $error      = String variable to write possible error msg to (pass by ref.).
 * $verbosity  = TRUE when verbose output is requested on stdout.
 * Returns 0 on success, 1 on failure ($error contains error message).
 */
function import($input,&$error,$verbosity=FALSE) {
   global $OPTIONS;

   // Everything except the presentation of the incident to the AIRT core
   // database should have been done by now. The rest is optional.
   if ($OPTIONS['--noqueue']) {
      // Just kidding.
      if ($OPTIONS['--verbose']) {
         echo t('Not actually queueing the incident.')."\n";
      }
      return 0;
   }

   // Collect all <queuedata> chunks. They represent the individual incidents
   // that we are going to queue. Then for each found <queuedata> chunk,
   // retrieve the associated <incident> chunk. With the four data elements
   // from the <queuedata> chunk plus the <incident> chunk, call the
   // queueInsertItem() function.

   # make sure we do have have namespaces. Somehow DOM XML chokes on that
   $xml=preg_replace('/airt:/','',$input);
   $dom = domxml_open_mem($xml);
   if ($dom == false) {
      $error = 'Unable to parse xml';
      return 1;
   }

   $root = $dom->document_element();
   $importqueue = $root->get_elements_by_tagname('queuedata');
   if (sizeof($importqueue) == 0) {
      $error = 'No importqueue element in XML';
      return 1;
   }

   foreach ($importqueue as $element) {
      if (!$element->has_attribute('ref')) {
         $error = 'Missing ref attribute in XML';
         return 1;
      }
      $ref = $element->get_attribute('ref');
      # FIXME remove the # from the ref ID
      $ref = preg_replace('/^#/', '', $ref);

      $status = $sender = $summary = $type = '';
      $e = $element->get_elements_by_tagname('status');
      if (sizeof($e) > 0) {
         $status = $e[0]->get_content();
      }
      $e = $element->get_elements_by_tagname('sender');
      if (sizeof($e) > 0) {
         $sender = $e[0]->get_content();
      }
      $e = $element->get_elements_by_tagname('type');
      if (sizeof($e) > 0) {
         $type = $e[0]->get_content();
      }
      $e = $element->get_elements_by_tagname('summary');
      if (sizeof($e) > 0) {
         $summary = $e[0]->get_content();
      }

      # fetch appropriate incident
      $xpath = $dom->xpath_new_context();
      $objs = $xpath->xpath_eval_expression("//incident[@id='$ref']");
      $incident = $objs->nodeset[0];

      # create new XML doc of it (can this be done better?)
      $content_xml = domxml_new_doc('1.0');
      $content_xml->add_root('airt');
      $content_root = $content_xml->document_element();
      $content_root->replace_node($incident);
      $content = $content_xml->dump_mem();

      # insert
      queueInsertItem($status, $sender, $type, $summary, $content, $error);
   } // foreach

   return 0;
}// import


# TODO: replace this function by "queueItemSetAccepted()" and
# queueItemSetRejected().
/* Update item in queue.
 * $id  = queue item identifier
 * $field = field to update
 * $value = new value of field
 * Returns 0 on success, 1 on failure. Error will contain an error msg
 */
function updateQueueItem($id, $field, $value, &$error) {
   $error = '';
   if (!is_numeric($id)) {
      $error = 'Invalid parameter \"id\"';
      return 1;
   }
   $query = q('update import_queue set %field = \'%value\' where id=\'%id\'', 
      array('%id'=>$id,
      '%field' => db_escape_string($field),
      '%value' => db_escape_string($value)
   ));
   $res = db_query($query);
   if ($res == false) {
      $error = 'Unable to query database in importqueue.plib:'.__LINE__;
      return 1;
   }

   return 0;
}

# TODO: consider renaming to queueGetItems().
/* retrieve open elements from database.
 *
 * Parameters
 * $elements will contain an associative array of the open queue elements, 
 *           keyed by id.
 * $error will contain an error message, if any
 *
 * Returns 0 on success, 1 on failure
 */
function getQueueOverview(&$elements, &$error) {
   $error = '';
   $res = db_query(q('SELECT id, created, status, sender, type, summary 
      FROM import_queue
      WHERE status = \'open\'
      ORDER BY created DESC'));
   if ($res == false) {
      $error = 'Unable to query database in importqueue.plib:'.__LINE__;
      return 1;
   }
   $elements = array();
   while ($row = db_fetch_next($res)) {
      $elements[$row['id']] = $row;
   }
   return 0;
}

# TODO: consider renaming to queueFormatItems().
/* show a formatted overview of the incident queue 
 * Returns 0 on success, 1 on failure
 */
function formatQueueOverview() {
   $error = '';
   $elements = array();
   if (getQueueOverview($elements, $error)) {
      return;
   }
   $count = 0;
   $out = "<table cellpadding=\"4\" class=\"queue\">\n";
   $out .= "<tr><th>Sender</th><th>Type</th><th>Created</th><th>Details</th><th>Decision</th></tr>\n";
   foreach ($elements as $id=>$element) {
      $out .= t("<tr bgcolor=\"%color\">\n", array('%color'=>($count++ % 2 == 0) ? '#DDDDDD' : '#FFFFFF'));
      $out .= t("  <td>%sender</td>\n", array('%sender'=>$element['sender']));
      $out .= t("  <td>%type</td>\n", array('%type'=>$element['type']));
      $out .= t("  <td>%created</td>\n", array('%created'=>$element['created']));
      $out .= "  <td><a href=\"\">details</a></td>\n";
      $out .= "  <td><select name=\"decision[$element[id]]\">\n";
      $out .= choice('Leave unchanged', 'leave', 'leave');
      $out .= choice('Accept', 'accept', 'leave');
      $out .= choice('Reject', 'reject', 'leave');
      $out .= "  </select>\n";
      $out .= "</td>\n";
      $out .= "</tr>\n";
   }
   $out .= "</table>\n";
   return $out;
}

/* import queue element into AIRT
 * Parameters
 *   $id - queue element to import
 *   $error - Error message (if any)
 * Returns
 *   0 on success, 1 on failure
 */
function queueToAIRT($id, &$error) {
   if ($id == '') {
      $error = 'Missing parameter id';
      return 1;
   }
   $error = 'queueToAIRT function not yet implemented.';
   return 1;
}


/* Add a new element to the queue. This function both inserts into the
 * database and writes to the file system.
 * Parameters:
 *   status  = new queue item status, typically 'open'.
 *   sender  = string with queue item sender.
 *   type    = string with queue item type.
 *   summary = string with queue item summary.
 *   content = formatted string with XML item content.
 *   error   = variable to write the error string to, if any.
 * All parameters are passed on to the database without any change except
 * for trimming leading and trailing white space. Empty strings (after
 * trimming white space) are not allowed.
 * Returns:
 *   The queue ID of the newly added item, or FALSE in case of failure.
 *   If FALSE, the error parameter will contain an error message.
 */
function queueInsertItem($status,$sender,$type,$summary,$content,&$error) {
   // Superficial sanity check of the parameters.
   $status  = trim(db_escape_string($status));
   $sender  = trim(db_escape_string($sender));
   $type    = trim(db_escape_string($type));
   $summary = trim(db_escape_string($summary));
   $content = trim($content);
   if ($status=='' || $sender=='' || $type=='' || $summary=='' ||
       $content=='') {
      $error = 'Empty parameter';
      return FALSE;
   }

   // Fetch a fresh queue item ID from the database.
   $q = "select nextval('importqueue_sequence') as id";
   $res = db_query($q);
   if (!$res) {
      $error = 'Cannot get next queue item ID';
      return FALSE;
   }
   $row = db_fetch_next($res);
   $newID = sprintf('%08d',$row['id']);

   // Write the XML file to the file system.
   $fileName = STATEDIR."/importqueue/$newID.xml";
   $xmlFile = @fopen($fileName,'w');
   if (!$xmlFile) {
      $error = "Could not open $fileName for writing";
      return FALSE;
   }
   if (!@fwrite($xmlFile,$content)) {
      $error = 'Could not write to $fileName';
      @fclose($xmlFile);
      return FALSE;
   }
   @fclose($xmlFile);

   // Insert the record. Strings have already been escaped.
   $q = "INSERT INTO import_queue
           (id,created,status,sender,type,summary)
         VALUES
           ($newID,CURRENT_TIMESTAMP,'$status','$sender','$type','$summary')";
   if (!db_query($q)) {
      // Oops! Remove the XML file from the file system.
      @unlink($fileName);
      $error = 'Could not insert new queue item';
      return FALSE;
   }

   return $newID;
}// queueInsertItem


/* Retrieve an element from the queue. This function both queries the
 * database and reads the file system. The element is not touched, to remove
 * it from the queue it needs to be queueRemove()d.
 * Parameters:
 *   id    = The queue item ID to be retrieved.
 *   error = variable to write the error string to, if any.
 * Returns:
 *   An array with all fields of the queue item, indexed 'status', 'sender',
 *   'type', 'summary', and 'content'. In case of retrieval failure, FALSE.
 */
function queuePeekItem($id,&$error) {
   $error = 'Not yet implemented';
   return FALSE;
}// queuePeekItem


/* Remove an element from the queue. This function both deleted from the
 * database and deletes from the file system.
 * Parameters:
 *   id    = The queue item ID to be removed.
 *   error = variable to write the error string to, if any.
 * Returns:
 *   0 in case of successful removal, 1 in case of a problem.
 */
function queueRemoveItem($id,&$error) {
   $error = 'Not yet implemented';
   return 1;
}// queueRemoveItem


?>
