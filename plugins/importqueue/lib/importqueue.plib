<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * importqueue.plib -- main library for the import queue ("import" command).
 * 
 * $Id$
 */

// Pull in the standard AIRT library.
require_once LIBDIR.'/airt.plib';


/* Produce info on stdout (when user asked for --help). */
function printUsage() {
   global $FILTERS;

   echo t('Incidence import program, part of the AIRT suite.')."\n";
   echo t('Copyright (C) 2005   Tilburg University, The Netherlands.')."\n";
   echo t(
'Usage: import [--filter <filter>] [--help] [--noqueue] [--verbose] [filename]'
     )."\n";
   echo t(
     'The program reads the import data from stdin if no filename is given.'
     )."\n";
   
   // Enumerate all registered filters.
   if (count($FILTERS)>0) {
      echo t('Available filters:');
      foreach ($FILTERS as $filter) {
         echo ' '.$filter;
      }
      echo "\n";
   }

}// printUsage


/* Actual import function, which presents the standardised XML to the AIRT
 * core.
 * $input      = Standard XML string to import.
 * $error      = String variable to write possible error msg to (pass by ref.).
 * $verbosity  = TRUE when verbose output is requested on stdout.
 * Returns 0 on success, 1 on failure ($error contains error message).
 */
function import($input,&$error,$verbosity=FALSE) {
   global $OPTIONS;

   ##### TODO: some XML sanity checking needs to be performed here. #######
   # At least the standard queue data items should be extracted, as the AIRT
   # import routine likely will want this meta-data presented separately
   # from the incident. Discussion must take place to determine the exact
   # boundary between the plugin and the AIRT core.
   fwrite(STDOUT,$input);

   // Everything except the presentation of the incident to the AIRT core
   // database should have been done by now. The rest is optional.
   if ($OPTIONS['--noqueue']) {
      // Just kidding.
      if ($OPTIONS['--verbose']) {
         echo t('Not actually queueing the incident.')."\n";
      }
      return 0;
   }

   ##### TODO: call AIRT import functions here. ###########################
   # We need the AIRT import API defined before this code can be written.
   # Refer to the discussion mentioned above. System boundaries must be
   # drafted first.

   $error = t('AIRT import API not yet implemented.');
   return 1;
}// import

/* Update item in queue.
 * $id  = queue item identifier
 * $field = field to update
 * $value = new value of field
 * Returns 0 on success, 1 on failure. Error will contain an error msg
 */
function updateQueueItem($id, $field, $value, &$error) {
   $error = '';
   if (!is_numeric($id)) {
      $error = 'Invalid parameter \"id\"';
      return 1;
   }
   $query = q('update import_queue set %field = \'%value\' where id=\'%id\'', 
      array('%id'=>$id,
      '%field' => db_escape_string($field),
      '%value' => db_escape_string($value)
   ));
   $res = db_query($query);
   if ($res == false) {
      $error = 'Unable to query database in importqueue.plib:'.__LINE__;
      return 1;
   }

   return 0;
}

/* retrieve open elements from database.
 *
 * Parameters
 * $elements will contain an associative array of the open queue elements, 
 *           keyed by id.
 * $error will contain an error message, if any
 *
 * Returns 0 on success, 1 on failure
 */
function getQueueOverview(&$elements, &$error) {
   $error = '';
   $res = db_query(q('SELECT id, created, status, sender, type, summary 
      FROM import_queue
      WHERE status = \'open\'
      ORDER BY created DESC'));
   if ($res == false) {
      $error = 'Unable to query database in importqueue.plib:'.__LINE__;
      return 1;
   }
   $elements = array();
   while ($row = db_fetch_next($res)) {
      $elements[$row['id']] = $row;
   }
   return 0;
}

/* show a formatted overview of the incident queue 
 * Returns 0 on success, 1 on failure
 */
function formatQueueOverview() {
   $error = '';
   $elements = array();
   if (getQueueOverview($elements, $error)) {
      return;
   }
   $count = 0;
   $out = "<table cellpadding=\"4\" class=\"queue\">\n";
   $out .= "<tr><th>Sender</th><th>Type</th><th>Created</th><th>Details</th><th>Decision</th></tr>\n";
   foreach ($elements as $id=>$element) {
      $out .= t("<tr bgcolor=\"%color\">\n", array('%color'=>($count++ % 2 == 0) ? '#DDDDDD' : '#FFFFFF'));
      $out .= t("  <td>%sender</td>\n", array('%sender'=>$element['sender']));
      $out .= t("  <td>%type</td>\n", array('%type'=>$element['type']));
      $out .= t("  <td>%created</td>\n", array('%created'=>$element['created']));
      $out .= "  <td><a href=\"\">details</a></td>\n";
      $out .= "  <td><select name=\"decision[$element[id]]\">\n";
      $out .= choice('Leave unchanged', 'leave', 'leave');
      $out .= choice('Accept', 'accept', 'leave');
      $out .= choice('Reject', 'reject', 'leave');
      $out .= "  </select>\n";
      $out .= "</td>\n";
      $out .= "</tr>\n";
   }
   $out .= "</table>\n";
   return $out;
}

/* import queue element into AIRT
 * Paramters
 *   $id - queue element to import
 *   $error - Error message (if any)
 * Returns
 *   0 on success, 1 on failure
 */
function queueToAIRT($id, &$error) {
   if ($id == '') {
      $error = 'Missing parameter id';
      return 1;
   }
   $error = 'queueToAIRT function not yet implemented.';
   return 1;
}
?>
