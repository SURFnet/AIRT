<?php
// vim:syn=php tabstop=3 shiftwidth=3

/* Import queue filter function for reports in IODEF format
 * Parameters:
 * 	input		= XML IODEF document complient with `draf-ietf-inch-iodef-08.txt`
 * 	output		= The string variable to write the XML output to
 * 	verbosity	= Optionally, boolean; TRUE = verbose output to STDOUT.
 * Returns:
 * 
 */

function filter_iodef_getVersion() {
	$rev = explode(' ','$Rev$');
	return $rev[1];
}

function filter_iodef($input, &$output, $verbosity=TRUE) {
	// strip <?xml 
   $input = preg_replace('/io:/','', $input);
   $doc = new DOMDocument();
   $doc->loadXML($input);
	$xpath = new DOMXPath($doc);
   $xpath->registerNamespace('io', 
		'urn:ietf:params:xml:ns:iodef-1.0');
	$xpath->registerNamespace('ds',
		'http://www.w3.org/2000/09/xmldsig#');
	$xpath->registerNamespace('xsi',
		'http://www.w3.org/2001/XMLSchema-instance');
	$incidents = $xpath->evaluate('/IODEF-Document/Incident');
	$output = "<airt:airt>\n";
   for ($i=0; $i < $incidents->length; $i++) {
		$type = $incidents->item($i)->getAttribute('purpose');
		$srcip=$dstip='';
		
		$res = $xpath->evaluate("IncidentID", $incidents->item($i));
		$id = preg_replace('/^#/', '', trim($res->item(0)->firstChild->wholeText));

		$res = $xpath->evaluate("ReportTime", $incidents->item($i));
		$time = trim($res->item(0)->firstChild->wholeText);
	
		// IODEF does not have a real method of suggesting an incident type
		// The closest element that I could find is Method/Reference
		$refs = $xpath->evaluate("EventData/Method/Reference/ReferenceName", $incidents->item($i));
		$type='unspecified';
      for ($j=0; $j < $refs->length; $j++) {
			if ($type=='unspecified') {
			   $type = $refs->item($j)->firstChild->wholeText;
		   }
		} // referencename (j)
		
		$contacts = $xpath->evaluate("Contact", $incidents->item($i));
		$contactname = 'unspecified';
		$logging = '';
      for ($j=0; $j < $contacts->length; $j++) {
			$role = $contacts->item($j)->getAttribute('role');
			if ($role=='') {
			   $role = 'unknown';
			}

			$res = $xpath->evaluate("ContactName", $contacts->item($j));
			if ($res->length > 0) {
				$name = trim($res->item(0)->firstChild->wholeText);

				//merge contact names
				if ($contactname == 'unspecified') {
					$contactname = $name;
				} else {
					$contactname .= ", ".$name;
				}
			}
				
			$res = $xpath->evaluate("Email", $contacts->item($j));
			if ($res->length > 0) {
				$email = trim($res->item(0)->firstChild->wholeText);

				//add e-mail address
				if ($email) $contactname .= "(".$email.")";
			}
		} // contacts (j)
		
		$eventdata = $xpath->evaluate("EventData", $incidents->item($i));
      for ($j=0; $j < $eventdata->length; $j++) {
			$flows = $xpath->evaluate("Flow", $eventdata->item($j));
         for ($k=0; $k < $flows->length; $k++) {
				$systems = $xpath->evaluate("System", $flows->item($k));
				$nsystems = count($systems);
				
				//create arrays to fill
				$arr_category = array();
				$arr_nodename = array();
				$arr_nodeaddress  = array();
				$arr_nodeport = array();
				$l = 0;
            for ($m=0; $m < $systems->length; $m++) {
					$systemcategory = $nodename = $nodeaddress = $nodeport = null;

					$systemcategory = $systems->item($m)->getAttribute('category');

					$nodenames = $xpath->evaluate("Node/NodeName", $systems->item($m));
               for ($n=0; $n < $nodenames->length; $n++) {
						$nodename = trim($nodenames->item($n)->firstChild->textContent);
					}
					$nodeaddresses = $xpath->evaluate("Node/Address", $systems->item($m));
               for ($n=0; $n < $nodeaddresses->length; $n++) {
						$addresscategory = $nodeaddresses->item($n)->getAttribute('category');
						$nodeaddress = trim($nodeaddresses->item($n)->firstChild->textContent);
					}

					$services = $xpath->evaluate("Service", $systems->item($m));
               for ($n=0; $n < $services->length; $n++) {
						$ip_version = $services->item($n)->getAttribute('ip_version');
						$ip_protocol = $services->item($n)->getAttribute('ip_protocol');
						
						$ports = $xpath->evaluate("Port", $services->item($n));
                  for ($o=0; $o < $services->length; $o++) {
							$nodeport = trim($ports->item($o)->firstChild->textContent);
						}
					} // services (n)

					//fill the arrays
					$arr_category[$l] = $systemcategory;
					$arr_nodename[$l] = $nodename;
					$arr_nodeaddress[$l] = $nodeaddress;
					$arr_nodeport[$l] = $nodeport;

					//set source and destination ip for summary
					if ($systemcategory == "source") {
						$srcip = $nodeaddress;
					} elseif ($systemcategory == "target") {
						$dstip = $nodeaddress;
					}

					$l++;
				} // systems (m)
				$nsystems = $l;
			} // flow (k)

			/* Logging is currently extracted from Record/RecordData */
			$recorddata = $xpath->evaluate("Record/RecordData", $eventdata->item($j));
         for ($k=0; $k < $recorddata->length; $k++) {
				$recorditems = $xpath->evaluate("RecordItem", $recorddata->item($k));
            for ($l=0; $l < $recorditems->length; $l++) {
					$logging .= trim($recorditems->item($l)->firstChild->textContent);
				}
			} // recorddata (k)
		} // eventdata (j)

		$output .= "<airt:queuedata filter=\"filter_iodef\" version=\"".
		   filter_iodef_getVersion()."\" ref=\"#$id\">\n";
		$output .= "   <airt:status>open</airt:status>\n";
		$output .= "   <airt:sender>$contactname</airt:sender>\n";
		$output .= "   <airt:type>$type</airt:type>\n";
		$output .= "   <airt:summary>$contactname type: $type role: $role, attack dst: $dstip src: $srcip</airt:summary>\n";
		$output .= "</airt:queuedata>\n";
		$output .= "<airt:incident id=\"$id\">\n";
		$output .= "  <airt:ticketInformation>\n";
		$output .= "    <airt:prefix>$contactname</airt:prefix>\n";
		$output .= "  </airt:ticketInformation>\n";
		for ($j = 0; $j < $nsystems; $j++) {
			$output .= "  <airt:technicalInformation>\n";
			$output .= "    <airt:addressrole>$arr_category[$j]</airt:addressrole>\n";
			if ($arr_nodeaddress[$j]) {
				$output .= "    <airt:ip>$arr_nodeaddress[$j]</airt:ip>\n";
			}
			if ($arr_nodeport[$j]) {
				$output .= "    <airt:port>$arr_nodeport[$j]</airt:port>\n";
			}
			if ($arr_nodename[$j]) {
				$output .= "    <airt:hostname>$arr_nodename[$j]</airt:hostname>\n";
			}

			//only print incident information in in first record
			if ($j == 0) {
				$output .= "    <airt:incident_time>$time</airt:incident_time>\n";
				$output .= "    <airt:logging>$logging</airt:logging>\n";
			}
			$output .= "  </airt:technicalInformation>\n";
		}
		$output .= "</airt:incident>\n";
	} // incidents (i)
	$output .= "</airt:airt>";
	v_print($output,$verbosity);
}
?>
