<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

function filter_acns_getVersion() {
	return '1565';
}

function parse_semi_iso8601($date) {
    if (preg_match('/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]+):([0-9]+):([0-9.]+)/', $date, $match) == 1) {
	    $year = $match[1];
		 $month = $match[2];
		 $day = $match[3];
		 $hour = $match[4];
		 $minute = $match[5];
		 $second = $match[6];

		 $ts = gmmktime($hour, $minute, $second, $month, $day, $year);
		 return $ts;
	 }
}

/* Template filter function, does not do much but conforms to all standards.
 * Great to copy and create your own, functional function.
 *
 * $input     = A string to process.
 * $output    = String variable to write the result to (pass by reference).
 * $verbosity = TRUE when verbose output is requested on stdout.
 * Returns:
 * 0 when successful.
 * 1 when not successful ($output contains readable error message).
 */
function filter_acns($input, &$output, $verbosity=FALSE) {
  $x = preg_match('/(<Infringement .*<\/Infringement>)/', $input, $match);
  if (!$x) {
	  $output=_('Unable to find <Infringement> element.');
     return 1;
  }

  // Strip any namespace qualifiers, PHP DOM seems to be picky
  $match[1]=preg_replace('/<Infringement .*>/','<Infringement>',$match[1]); 

  $dom = new DOMDocument();
  if ($dom->loadXML($match[1]) === false) {
     $output=_('Unable to parse input data (invalid XML).');
	  return 1;
  }
  $xpath = new DOMXPath($dom);

  // fetch meta data
  $nodeid = $type= $sender= '';
  $xp = $xpath->evaluate('/Infringement/Case/ID');
  if ($xp->length > 0) {
     $nodeid = $xp->item(0)->textContent;
  } 
  $xp = $xpath->evaluate('/Infringement/Source/Type');
  if ($xp->length > 0) {
     $type = $xp->item(0)->textContent;
  }
  $xp = $xpath->evaluate('/Infringement/Complainant/Email');
  if ($xp->length > 0) {
     $sender = $xp->item(0)->textContent;
  }

  $compl_ent = $compl_contact = $compl_address = $compl_phone = '';
  $xp = $xpath->evaluate('/Infringement/Complainant/Entity');
  if ($xp->length > 0) {
     $compl_ent = $xp->item(0)->textContent;
  }
  $xp = $xpath->evaluate('/Infringement/Complainant/Contact');
  if ($xp->length > 0) {
     $compl_contact = $xp->item(0)->textContent;
  }
  $xp = $xpath->evaluate('/Infringement/Complainant/Address');
  if ($xp->length > 0) {
     $compl_address = $xp->item(0)->textContent;
  }
  $xp = $xpath->evaluate('/Infringement/Complainant/Phone');
  if ($xp->length > 0) {
     $compl_phone = $xp->item(0)->textContent;
  }

  // fetch source
  $srcip = $srcname = $datetime = '';
  $xp = $xpath->evaluate('/Infringement/Source/IP_Address', $dom);
  if ($xp->length > 0) {
     $srcip = $xp->item(0)->textContent;
  }  
  $xp = $xpath->evaluate('/Infringement/Source/DNS_Name', $dom);
  if ($xp->length > 0) {
     $srcname = $xp->item(0)->textContent;
  }
  $xp = $xpath->evaluate('/Infringement/Source/TimeStamp', $dom);
  if ($xp->length > 0) {
		$dt = $xp->item(0)->textContent;
      $datetime = parse_semi_iso8601($dt);
  }

  $summary = 'Notice ID: '.$nodeid.LF;
  $summary .= 'Recent Infringement Timestamp:'.Date('r', $datetime).LF;
  $summary .= 'Infringing IP Address:'.$srcip.LF;
  $summary .= 'Infringing DNS Name:'.$srcname.LF;
  $summary .= 'Protocol:'.$type.LF.LF;

  $summary .= 'Complainant Entity:'.$compl_ent.LF;
  $summary .= 'Complainant Contact:'.$compl_contact.LF;
  $summary .= 'Complainant Address:'.$compl_address.LF;
  $summary .= 'Complainant Phone:'.$compl_phone.LF;
  $summary .= 'Complainant Email:'.$sender.LF.LF;

  // fetch items
  $items = array();
  $xp = $xpath->evaluate('/Infringement/Content/Item', $dom);
  if ($xp->length > 0) {
     for ($i=0; $i<$xp->length; $i++) {
		  $xpt = $xpath->evaluate('Title', $xp->item($i));
         if ($xpt->length > 0) {
			  $summary .= 'Infringed Work:'.$xpt->item(0)->textContent.LF;
		  }
		  $xpt = $xpath->evaluate('FileName', $xp->item($i));
		  if ($xpt->length > 0) {
			  $summary .= 'Infringing FileName:'.$xpt->item($i)->textContent.LF;
		  }
		  $xpt = $xpath->evaluate('FileSize', $xp->item($i));
		  if ($xpt->length > 0) {
			  $summary .= 'Infringing FileSize:'.$xpt->item(0)->textContent.LF;
		  }
		  $xpt = $xpath->evaluate('URL', $xpt->item($i));
		  if ($xpt->length > 0) {
			  $summary .= 'Infringing URL:'.$xpt->item($i)->textContent.LF;
		  }
	  }
  }

  $out = new DOMDocument();
  $airt = $out->appendChild($out->createElement('airt'));
  $outqdata = $airt->appendChild($out->createElement('queuedata'));
  $outqdata->setAttribute('ref','#1');
  $outqdata->setAttribute('filter', 'filter_acns');
  $outqdata->setAttribute('version', filter_acns_getVersion());

  $outstatus = $outqdata->appendChild($out->createElement('status', 'open'));
  $outsender = $outqdata->appendChild($out->createElement('sender', $sender));
  $outtype = $outqdata->appendChild($out->createElement('type',
     'Copyright Infringement Notice'));

  $outsummary = $outqdata->appendChild($out->createElement('summary',
     'Copyright notice '.$srcip));

  $outincident = $airt->appendChild($out->createElement('incident'));
  $outincident->setAttribute('id', '1');

  $outticket  = $outincident->appendChild($out->createElement('ticketInformation'));
  $prefix     = $outticket->appendChild($out->createElement('prefix', $sender));
  $outtech    = $outincident->appendChild($out->createElement('technicalInformation'));
  $outip      = $outtech->appendChild($out->createElement('ip', $srcip));
  $outtime    = $outtech->appendChild($out->createElement('incident_time', $dt));
  $outlogging = $outtech->appendChild($out->createElement('logging', $summary));

  $output = $out->saveXML();
  if ($verbosity === true) {
     print $output;
  }
  return;
}
