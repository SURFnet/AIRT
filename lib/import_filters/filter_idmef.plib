<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2006   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * filter_surfnet.plib -- filter function for surfnet reports
 * 
 * $Id$
 */

function filter_idmef_getVersion() {
	$rev = explode(' ','$Rev$');
	return $rev[1];
}

function v_print($msg, $verbosity) {
   if ($verbosity) print $msg;
}

/* Import queue filter function for Honeyd reports.
 * Parameters:
 *    input     = The SURFnet report email, headers and everything.
 *    output    = The string variable to write the XML output to.
 *    verbosity = Optionally, boolean; TRUE = verbose output to STDOUT.
 * Returns:
 *    0 on success (can not yet fail).
 *
 * This filter will accept honeyd logging which meets the following criteria:
 * - host name must occur at least $CUTOFF (default:five) times as a source
 * - reverse DNS of IP must return a host name
 * - domain must be on accept list
 *
 */
function filter_idmef($input, &$output, $verbosity=FALSE) {
   // strip <?xml 
   $doc = new DOMDocument();
   $xpath = new DOMXpath($doc);
   $xpath->registerNamespace('idmef', 'http://iana.org/idmef');
   $alerts = $xpath->evaluate('/idmef:IDMEF-Message/idmef:Alert');

   /* note: this is stupidified IDMEF; max 1 source and max 1 
    * target per alert 
    */
   $output = "<airt:airt>\n";
   for ($i=0; $i < $alerts->length; $i++) {
      $id = $alerts->item($i)->getAttribute('messageid');
      $time_l = $alerts->item($i)->getElementsByTagname('CreateTime');
      $time = $time_l->item(0)->textContent;

      $res = $xpath->evaluate("idmef:Source/idmef:Node/idmef:Address",
         $alerts->item($i));
      $srcip = trim($res->item(0)->textContent);

      $res = $xpath->evaluate("idmef:Target/idmef:Node/idmef:Address",
         $alerts->item($i));
      $dstip = trim($res->item(0)->textContent);

      $res = $xpath->evaluate("idmef:Source/idmef:Service/idmef:port",
         $alerts->item($i));
      $srcport = trim($res->item(0)->textContent);

      $res = $xpath->evaluate("idmef:Target/idmef:Service/idmef:port",
         $alerts->item($i));
      $dstport = trim($res->item(0)->textContent);

      $res = $xpath->xpath_eval("idmef:AdditionalData[@meaning=\"attack-type\"]/idmef:string", 
         $alerts->item($i));
      $type = trim($res->item(0)->textContent);

      $logging = new DOMDocument();
      $logging->importNode($alerts->item($i), true);
      $logging = $logging->saveXML();
      $logging = preg_replace('/<\?xml.*\?>/', '', $logging);

      $output .= "<airt:queuedata ref=\"#$id\" filter=\"filter_idmef\"".
		   " version=\"".filter_idmef_getVersion()."\">\n";
      $output .= "   <airt:status>open</airt:status>\n";
      $output .= "   <airt:sender>SURFnet-IDS</airt:sender>\n";
      $output .= "   <airt:type>$type</airt:type>\n";
      $output .= "   <airt:summary>SURFnet-IDS $type attack, target $dstip</airt:summary>\n";
      $output .= "</airt:queuedata>\n";
      $output .= "<airt:incident id=\"$id\">\n";
      $output .= "  <airt:ticketInformation>\n";
      $output .= "    <airt:prefix>SURFnet-IDS</airt:prefix>\n";
      $output .= "  </airt:ticketInformation>\n";
      $output .= "  <airt:technicalInformation>\n";
      $output .= "    <airt:ip>$srcip</airt:ip>\n";
      $output .= "    <airt:port>$srcport</airt:port>\n";
      $output .= "    <airt:incident_time>$time</airt:incident_time>\n";
      $output .= "    <airt:logging>$logging</airt:logging>\n";
      $output .= "  </airt:technicalInformation>\n";
      $output .= "</airt:incident>\n";
   }
   $output .= "</airt:airt>";
   v_print($output,$verbosity);

}
?>
