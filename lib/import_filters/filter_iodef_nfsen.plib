<?php
// vim:syn=php tabstop=3 shiftwidth=3

/* Import queue filter function for reports in IODEF format
 * Parameters:
 * 	input		= XML IODEF document complient with `draf-ietf-inch-iodef-08.txt`
 * 	output		= The string variable to write the XML output to
 * 	verbosity	= Optionally, boolean; TRUE = verbose output to STDOUT.
 * Returns:
 * 
 */

function filter_iodef_nfsen_getVersion() {
	$rev = explode(' ','$Rev$');
	return $rev[1];
}

function filter_iodef_nfsen($input, &$output, $verbosity=TRUE) {
	// make sure we only have the XML

   if (preg_match('@(<io:IODEF-Document.*/io:IODEF-Document>)@ms',
	   $input, $matches) == 0) {
		return;
	} else {
		$input = $matches[1];
	}
	
   $input = preg_replace('/io:/','', $input);

	$doc = domxml_open_mem($input);
	$xpath = $doc->xpath_new_context();
   xpath_register_ns($xpath, 'io', 
		'urn:ietf:params:xml:ns:iodef-1.0');
	xpath_register_ns($xpath, 'ds',
		'http://www.w3.org/2000/09/xmldsig#');
	xpath_register_ns($xpath, 'xsi',
		'http://www.w3.org/2001/XMLSchema-instance');
	$incidents = $xpath->xpath_eval('/IODEF-Document/Incident');
	$output = "<airt:airt>\n";
	foreach ($incidents->nodeset as $incidentnode) {
		$type = $incidentnode->get_attribute('purpose');
		$srcip=$dstip='';
		
		$res = $xpath->xpath_eval("IncidentID", $incidentnode);
		$resnodes = $res->nodeset;
		$id = trim($resnodes[0]->get_content());

		$res = $xpath->xpath_eval("ReportTime", $incidentnode);
		$resnodes = $res->nodeset;
		$time = trim($resnodes[0]->get_content());
		
		$res = $xpath->xpath_eval("StartTime", $incidentnode);
		$resnodes = $res->nodeset;
		$start_time = trim($resnodes[0]->get_content());
		
		$res = $xpath->xpath_eval("EndTime", $incidentnode);
		$resnodes = $res->nodeset;
		$end_time = trim($resnodes[0]->get_content());
	
		// IODEF does not have a real method of suggesting an incident type
		// The closest element that I could find is Method/Reference
		$refs = $xpath->xpath_eval("EventData/Method/Reference/ReferenceName", $incidentnode);
		$type='unspecified';
		foreach ($refs->nodeset as $refnode) {
			if ($type=='unspecified') {
			   $type = $refnode->get_content();
		   }
		}
		
		$contacts = $xpath->xpath_eval("Contact", $incidentnode);
		$contactname = 'unspecified';
		$logging = '';
		foreach ($contacts->nodeset as $contactnode) {
			$role = $contactnode->get_attribute('role');
			if ($role=='') {
			   $role = 'unknown';
			}

			$res = $xpath->xpath_eval("ContactName", $contactnode);
			$resnodes = $res->nodeset;
			if (sizeof($resnodes) > 0) {
				$name = trim($resnodes[0]->get_content());

				//merge contact names
				if ($contactname == 'unspecified') {
					$contactname = $name;
				} else {
					$contactname .= ", ".$name;
				}
			}
				
			$res = $xpath->xpath_eval("Email", $contactnode);
			$resnodes = $res->nodeset;
			if (sizeof($resnodes) > 0) {
				$email = trim($resnodes[0]->get_content());

				//add e-mail address
				if ($email) $contactname .= "(".$email.")";
			}
		}
		
		$eventdata = $xpath->xpath_eval("EventData", $incidentnode);
		foreach ($eventdata->nodeset as $eventdatanode) {
			$flows = $xpath->xpath_eval("Flow", $eventdatanode);
			foreach ($flows->nodeset as $flownode) {
				$systems = $xpath->xpath_eval("System", $flownode);
				$nsystems = count($systems);
				
				//create arrays to fill
				$arr_category = array();
				$arr_nodename = array();
				$arr_nodeaddress  = array();
				$arr_nodeport = array();
				$i = 0;
				foreach ($systems->nodeset as $systemnode) {
					$systemcategory = $nodename = $nodeaddress = $nodeport = null;

					$systemcategory = $systemnode->get_attribute('category');

					$nodenames = $xpath->xpath_eval("Node/NodeName", $systemnode);
					foreach ($nodenames->nodeset as $nodenamesnode) {
						$nodename = trim($nodenamesnode->get_content());
					}
					$nodeaddresses = $xpath->xpath_eval("Node/Address", $systemnode);
					foreach ($nodeaddresses->nodeset as $nodeaddressnode) {
						$addresscategory = $nodeaddressnode->get_attribute('category');
						$nodeaddress = trim($nodeaddressnode->get_content());
					}
					$counters = $xpath->xpath_eval('Node/Counter', $systemnode);
					if ($counters != null) {
						foreach ($counters->nodeset as $counternode) {
							$counter_type=$counternode->get_attribute('type');
							$counter_data=$counternode->get_content();
						}
					}

					$services = $xpath->xpath_eval("Service", $systemnode);
					foreach ($services->nodeset as $servicenode) {
						$ip_version = $servicenode->get_attribute('ip_version');
						$ip_protocol = $servicenode->get_attribute('ip_protocol');
						
						$ports = $xpath->xpath_eval("Port", $servicenode);
						foreach ($ports->nodeset as $portnode) {
							$nodeport = trim($portnode->get_content());
						}
					}

					//fill the arrays
					$arr_category[$i] = $systemcategory;
					$arr_nodename[$i] = $nodename;
					$arr_nodeaddress[$i] = $nodeaddress;
					$arr_nodeport[$i] = $nodeport;

					//set source and destination ip for summary
					if ($systemcategory == "source") {
						$srcip = $nodeaddress;
					} elseif ($systemcategory == "target") {
						$dstip = $nodeaddress;
						$dstport = $nodeport;
					}

					$i++;
				}
				$nsystems = $i;
			}

			/* Logging is currently extracted from Record/RecordData */
			$recorddata = $xpath->xpath_eval("Record/RecordData", $eventdatanode);
			foreach ($recorddata->nodeset as $recorddatanode) {
				$recorditems = $xpath->xpath_eval("RecordItem", $recorddatanode);
				foreach ($recorditems->nodeset as $recorditemnode) {
					$logging = trim($recorditemnode->get_content());
				}
			}

			// assemble our own logging if not explicitly provided.
			if ($logging=='') {
			   $logging =  sprintf("Source (ip)        : %s\n", $srcip);
				$logging .= sprintf("Target (ip:port)   : %s:%s\n", 
					$dstip, $dstport);
				$logging .= sprintf("Packet (type:count): %s:%s\n", 
					$counter_type, $counter_data);
				$logging .= sprintf("Start time         : %s\n",
					$start_time);
				$logging .= sprintf("End time           : %s\n",
				   $end_time);
			}
		}

		$output .= "<airt:queuedata version=\"".
		   filter_iodef_nfsen_getVersion().
			"\" filter=\"filter_iodef_nfsen\" ref=\"#$id\">\n";
		$output .= "   <airt:status>open</airt:status>\n";
		$output .= "   <airt:sender>$contactname</airt:sender>\n";
		$output .= "   <airt:type>$type</airt:type>\n";
		$output .= "   <airt:summary>$contactname type: $type role: $role, attack dst: $dstip src: $srcip</airt:summary>\n";
		$output .= "</airt:queuedata>\n";
		$output .= "<airt:incident id=\"$id\">\n";
		$output .= "  <airt:ticketInformation>\n";
		$output .= "    <airt:prefix>$contactname</airt:prefix>\n";
		$output .= "  </airt:ticketInformation>\n";
		for ($i = 0; $i < $nsystems; $i++) {
		   if ($arr_category[$i] == 'source') {
				$output .= "  <airt:technicalInformation>\n";
				$output .= "    <airt:addressrole>$arr_category[$i]</airt:addressrole>\n";
				if ($arr_nodeaddress[$i]) {
					$output .= "    <airt:ip>$arr_nodeaddress[$i]</airt:ip>\n";
				}
				if ($arr_nodeport[$i]) {
					$output .= "    <airt:port>$arr_nodeport[$i]</airt:port>\n";
				}
				if ($arr_nodename[$i]) {
					$output .= "    <airt:hostname>$arr_nodename[$i]</airt:hostname>\n";
				}

				//only print incident information in in first record
				if ($i == 0) {
					$output .= "    <airt:incident_time>$time</airt:incident_time>\n";
					$output .= "    <airt:logging>$logging</airt:logging>\n";
				}
				$output .= "  </airt:technicalInformation>\n";
			}
		}
		$output .= "</airt:incident>\n";
	}
	$output .= "</airt:airt>";
	v_print($output,$verbosity);
}
?>
