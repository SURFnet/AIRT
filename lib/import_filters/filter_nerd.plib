<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

function filter_nerd_getVersion() {
	return '1213';
}

/* Template filter function, does not do much but conforms to all standards.
 * Great to copy and create your own, functional function.
 *
 * $input     = A string to process.
 * $output    = String variable to write the result to (pass by reference).
 * $verbosity = TRUE when verbose output is requested on stdout.
 * Returns:
 * 0 when successful.
 * 1 when not successful ($output contains readable error message).
 */
function filter_nerd($input, &$output, $verbosity=FALSE) {
  $match=array();
  $sender='unknown';
  if (preg_match('/^From: (.*)$/m', $input, $match) == 1) {
     $sender = $match[1];
  }

  $match=array();
  $x = preg_match_all('/^START ([0-9]+) \| ([0-9.]+) \| ([0-9.]+) \| ([0-9]+) \| ([A-Za-z]+) \| ([0-9.]+) \| ([0-9.]+) \| ([0-9: -]+) \| ([0-9: -]+)$/m', $input, $match, PREG_SET_ORDER);
  if (!$x) {
	  $output=_('Unable to find NERD data.');
     return 1;
  }

  $out = new DOMDocument();
  $airt = $out->appendChild($out->createElement('airt'));
  $count = 1;
  $output='';
  foreach ($match as $m) {
	  $outqdata = $out->createElement('queuedata');
	  $outqdata->setAttribute('filter', 'filter_nerd');
	  $outqdata->setAttribute('version', filter_nerd_getVersion());
	  $outqdata->setAttribute('ref','#'.$count);
	  $airt->appendChild($outqdata);

	  $outqdata->appendChild($out->createElement('status', 'open'));
     $outqdata->appendChild($out->createElement('sender', $sender));
     $outqdata->appendChild($out->createElement('type', 'ddos'));
     $outqdata->appendChild($out->createElement('summary', 'DDoS - NERD '.$m[2]));

     $outincident = $out->createElement('incident');
     $outincident->setAttribute('id', $count++);
     $airt->appendChild($outincident);

     $outticket = $out->createElement('ticketInformation');
     $outtech = $out->createElement('technicalInformation');
     $outincident->appendChild($outticket);
     $outincident->appendChild($outtech);

     $outticket->appendChild($out->createElement('prefix', 'NERD'));
     $outtech->appendChild($out->createElement('ip', $m[2]));
     $outtech->appendChild($out->createElement('incident_time', $m[8]));
     $outtech->appendChild($out->createElement('logging', $m[0]));
  }
     $output .= $out->saveXML();
  if ($verbosity === true) {
     print $output;
  }
  return;
}

?>
