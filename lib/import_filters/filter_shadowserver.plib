<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * ShadowServer import filter
 * by JP Velders & Xander Jansen / SURFcert
 * $Id: filter_shadowserver.plib,v 1.33 2011/06/12 13:54:30 root Exp root $

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

require_once 'Mail/mimeDecode.php';
// require_once 'PHP/Compat.php';

// PHP_Compat::loadFunction('file_put_contents');
// PHP_Compat::loadFunction('sys_get_temp_dir');
// PHP_Compat::loadFunction('str_getcsv');

// Read in the configuration file (contains ASNs, unwanted types etc...
// In case the shadowserver filter configuration isn't in order, there is no
// reasons to continue. End the attempt to load the filter with a loud
// bang.
if (!defined('ETCDIR') || !file_exists(ETCDIR.'/shadowserver.cfg')) {
   print("The shadowserver filter needs a configuration file. ".ETCDIR."/shadowserver.cfg not found.\n");
   exit;
}

require_once ETCDIR.'/shadowserver.cfg';

function filter_shadowserver_getVersion() {
        $rev = explode(' ','$Rev$');
        return $rev[1];
}
function checkAllowedASN($asn) {
        // list of "own" ASNs defined in the configuration file
        // If not defined then all ASNs are allowed
        global $SHADOW_ALLOWED_ASN ;
        
        if (isset($SHADOW_ALLOWED_ASN)) {
            if (!in_array($asn,$SHADOW_ALLOWED_ASN)) {
                return FALSE ;
            } 
        }
        return TRUE ;
}

function skipUnwantedReportType($type) {
        // If not defined then all report types are allowed
        global $SHADOW_UNWANTED_TYPE ;

        if (isset($SHADOW_UNWANTED_TYPE)) {
            if (in_array($type,$SHADOW_UNWANTED_TYPE)) {
                return TRUE ;
            } 
        }
        return FALSE ;
}

function skipUnwantedSubType($subtype) {
        // If not defined then all subtype are allowed
        global $SHADOW_UNWANTED_SUBTYPE ;

        if (isset($SHADOW_UNWANTED_SUBTYPE)) {
            if (in_array($subtype,$SHADOW_UNWANTED_SUBTYPE)) {
                return TRUE ;
            } 
        }
        return FALSE ;
}

if ( !function_exists('sys_get_temp_dir')) {
        function sys_get_temp_dir() {
                if ($temp=getenv('TMP')) { return $temp; }
                if ($temp=getenv('TEMP')) { return $temp; }
                if ($temp=getenv('TMPDIR')) { return $temp; }
                $temp=tempnam(__FILE__,'');
                if (file_exists($temp)) {
                        unlink($temp);
                        return dirname($temp);
                }
                return null;
        }
}

if ( !function_exists('str_getcsv')) {
        function str_getcsv($string, $separator=",")
        {
                $elements = explode($separator, $string);
                for ($i = 0; $i < count($elements); $i++) {
                        $nquotes = substr_count($elements[$i], '"');
                        if ($nquotes %2 == 1) {
                                for ($j = $i+1; $j < count($elements); $j++) {
                                        if (substr_count($elements[$j], '"') %2 == 1) { // Look for an odd-number of quotes
                                                // Put the quoted string's pieces back together again
                                                array_splice($elements, $i, $j-$i+1, implode($separator, array_slice($elements, $i, $j-$i+1)));
                                                break;
                                        }
                                }
                        }
                        if ($nquotes > 0) {
                                // Remove first and last quotes, then merge pairs of quotes
                                $qstr =& $elements[$i];
                                $qstr = substr_replace($qstr, '', strpos($qstr, '"'), 1);
                                $qstr = substr_replace($qstr, '', strrpos($qstr, '"'), 1);
                                $qstr = str_replace('""', '"', $qstr);
                        }
                }
                return $elements;
        }
}


/* function to format the reports into importqueue readable data
 * pre: $incidents is an array containing incidents.
 *   Each incident is expected to be an array containing the following keys
 *   ['type']        type of incident report
 *   ['logging']  the full log line
 *   ['details']['ip']       ip address of the offender (if any)
 *   ['details']['asn']          autonomous system of IP addresses
 *   ['details']['host']       hostname of the offender (if any)
 *   ['details']['timestamp']     date and time (if available) of the incident
 *   ['details']['type']  a subtype, extracted from meta (if any)
 * $output will contain an XML string of the format
 *   <?xml version="1.0"?>
 *   <airt>
 *      <queuedata filter="" version="" ref="#0">
 *         <status>open</status>
 *         <sender>ShadoServer</sender>
 *         <type>Shadowserver: ...</type>
 *         <summary>Shadowserver: ...</summary>
 *      </queuedata>
 *      <incident id="0">
 *         <technicalInformation>
 *            <ip>...</ip>
 *            <hostname>...</hostname>
 *            <time_dns_resolving>...</time_dns_resolving>
 *            <logging>...</logging>
 *            <incident_time>...</incident_time>
 *         </technicalInformation>
 *      </incident>
 *      <queuedata filter="" version="" ref="#1">
 *         ....
 *      </queuedata>
 *      ....
 *   </airt>
 */
function filter_shadowout($incidents, &$output, $verbosity=false) {
   global $SHADOW_ASN_KEY, $SHADOW_IP_KEY, $SHADOW_SUBTYPE_KEY, $SHADOW_USE_SUBTYPE ;

   $doc = new DOMDocument();
   $airt = $doc->appendChild($doc->createElement('airt'));

   $id = 0;
   $incident_ip_count = array() ;

   foreach ($incidents as $incident) {

      // Skip unwanted reports
      if (skipUnwantedReportType($incident['type'])) {
          if ($verbosity) {
              print "Shadowserver: not importing unwanted report type ".$incident['type']."\n";
          }
          continue;
      }

      // What key is used for timestamp?
      $timestampkey='timestamp';

      // What key is used for AS number?
      if (isset($SHADOW_ASN_KEY[$incident['type']])) {
         $asnkey=$SHADOW_ASN_KEY[$incident['type']];
      } else {
         $asnkey=$SHADOW_ASN_KEY['*'];
      }
      // Set key containing IP-address
      if (isset($SHADOW_IP_KEY[$incident['type']])) {
         $ipkey=$SHADOW_IP_KEY[$incident['type']];
      } else {
         $ipkey=$SHADOW_IP_KEY['*'];
      }
      // Set key containing subtype
      if (isset($SHADOW_SUBTYPE_KEY[$incident['type']])) {
         $subtypekey=$SHADOW_SUBTYPE_KEY[$incident['type']];
      } else {
         $subtypekey=$SHADOW_SUBTYPE_KEY['*'];
      }

      // Only process incidents from allowed ASNs (important for C&C reports)
      if (!checkAllowedASN($incident['details'][$asnkey])) {
          if ($verbosity) {
              print "Shadowserver: not importing incident in foreign ASN ".$incident['details'][$asnkey]."\n";
          }
          continue;
      }

      // Skip unwanted infections
      if (skipUnwantedSubType($incident['details'][$subtypekey]) ) {
          if ($verbosity) {
              print "Shadowserver: not importing unwanted subtype ".$incident['details'][$subtypekey]."\n";
          }
          continue;
      }

      // Only import the first SHADOW_INCIDENT_LIMIT incidents per ip.
      $incident_ip_count[$incident['details'][$ipkey]]++;
      if ($incident_ip_count[$incident['details'][$ipkey]] == SHADOW_INCIDENT_LIMIT+1) {
          $incident['type'] .= ":limit-exceeeded";
          $incident['logging'] = "...Suppressing reports exceeding the limit of ".SHADOW_INCIDENT_LIMIT." reports per IP address...";
      }
      else if ($incident_ip_count[$incident['details'][$ipkey]] > SHADOW_INCIDENT_LIMIT+1) {
          if ($verbosity) {
              print "Shadowserver: maximum number of incidents for ".$incident['details'][$ipkey]." exceeded.\n";
          }
          continue;
      }

      $queuedata_el = $airt->appendChild($doc->createElement('queuedata'));
      $queuedata_el->setAttribute('filter', 'filter_shadowserver');
      $version = filter_shadowserver_getVersion().':'.$incident['type'];
      $shadowtype = 'Shadow: '.$incident['type'];

      if ($SHADOW_USE_SUBTYPE) {
          if (!empty($incident['details'][$subtypekey])) {
              $version .= ':'.$incident['details'][$subtypekey];
              $shadowtype .= ':'.$incident['details'][$subtypekey];
          }
      }
      $queuedata_el->setAttribute('version', $version);

      $queuedata_el->setAttribute('ref', "#$id");
      $queuedata_el->appendChild($doc->createElement('status',
         'open'));
      $queuedata_el->appendChild($doc->createElement('sender',
         'ShadowServer'));
      $queuedata_el->appendChild($doc->createElement('type',
         $shadowtype));
      $queuedata_el->appendChild($doc->createElement('summary',
         $shadowtype.' '.$incident['details'][$ipkey].' '.$incident['details'][$timestampkey]));

      $incident_el = $airt->appendChild($doc->createElement('incident'));
      $incident_el->setAttribute('id', $id);

      $techinfo_el = $incident_el->appendChild(
         $doc->createElement('technicalInformation'));
      if (!empty($incident['details'][$ipkey])) {
         $techinfo_el->appendChild($doc->createElement('ip',
            $incident['details'][$ipkey]));
         $techinfo_el->appendChild($doc->createElement('hostname',
            gethostbyaddr($incident['details'][$ipkey])));
      } else {
         if (!empty($incident['details']['host'])) {
            $techinfo_el->appendChild($doc->createElement('hostname',
               $incident['details']['host']));
            $techinfo_el->appendChild($doc->createElement('ip',
               gethostbyname($incident['details']['host'])));
         }
      }
      $techinfo_el->appendChild($doc->createElement('time_dns_resolving',
         Date('Y-m-d H:i:s')));
      $techinfo_el->appendChild($doc->createElement('logging',
         htmlentities($incident['logging'])));
      $techinfo_el->appendChild($doc->createElement('incident_time',
         $incident['details'][$timestampkey]));

      $id++;
   } // foreach $incident

   $output = $doc->saveXML();
   if ($verbosity) {
      print "Shadowserver: incidents per ip summary\n";
      print_r($incident_ip_count);
   }
   return 0;
}

function filter_shadowserver($input, &$output, $verbosity=FALSE) {
        global $SHADOW_SUBJ_MATCH ;

        $message = new Mail_mimeDecode($input);
        $params['include_bodies'] = true;
        $params['decode_bodies'] = true;
        $params['decode_headers'] = true;
        $params['crlf'] = "\n";
        $decoded = $message->decode($params);

        // NB: due to line length, subject may be indented, so let's not match dates...
        if ($verbosity) {
                print "subject: " . $decoded->headers['subject'] . "\n";
        }
        if (preg_match('/^\[(?P<org>[^\]]+)\] Shadowserver '.$SHADOW_SUBJ_MATCH.' (?P<type>[^:]+) Report.*: +(?P<extra>.*)$/m', 
            $decoded->headers['subject'], $matches) == true) {
                if ($verbosity) {
                        print "Shadowserver: mail is a [" .  $matches['type'] . "] report for [" . $matches['org'] . "] dated [" .  $matches['extra'] . "]\n";
                }
        } else {
                if ($verbosity) {
                        print "Shadowserver: not a ShadowServer report mail according to subject\n";
                }
                exit;
        }

        // initialize stuff
        $incidents = array();


        foreach ($decoded->parts as $part) {
                if ($verbosity) {
                        print "part: [" . $part->ctype_primary . "]/[" .  $part->ctype_secondary . "]:[" . $part->disposition . "]\n";
                }
                if (isset($part->disposition) && strtolower($part->disposition) == 'attachment' && (
                                (strtolower($part->ctype_primary) == 'application' && strtolower($part->ctype_secondary) == 'octet-stream' )
                                ||
                                (strtolower($part->ctype_primary) == 'text' && strtolower($part->ctype_secondary) == 'plain' )
                        ) ) {

                        $contents = array();
                        $filename = $part->d_parameters['filename'];
                        if ($verbosity) {
                                print "Shadowserver: found [" .  $part->ctype_primary .  "]/[" . $part->ctype_secondary . "]:[" .  $part->disposition . "] [" . $filename . "] part\n";
                        }

                        // break down into "YYYY-MM-DD" "type" "organization" ".zip" as:
                        // ${day}-${type}-${org}.csv$?{zipext}
                        if ( preg_match('/^(?P<day>[0-9]{4}-[0-9]{2}-[0-9]{2})-(?P<type>[^-]+)-(?P<org>[^.]+)\.csv(?P<zipext>\.zip)?$/m', $filename, $matches) == true ) {
                                if ($verbosity) {
                                        print "Shadowserver: found a [" . $matches['type'] . "] report for [" . $matches['org'] . "] on [" .  $matches['day'] . "]\n";
                                }

                                if ($matches['zipext'] == ".zip") {
                                        if ($verbosity) {
                                                print "ShadowServer: found a supposedly ZIPped report\n";
                                        }

                                        $tmpdir = realpath(sys_get_temp_dir()) . "/";

                                        if ($verbosity) {
                                                print "sys_temp_dir: [" . $tmpdir . "]\n" ;
                                        }

                                        $zipfile = tempnam($tmpdir, 'shadowserver');

                                        if ($verbosity) {
                                                print "zipfile: [" .  $zipfile . "]\n" ;
                                        }

                                        file_put_contents($zipfile, $part->body);

                                        exec ("unzip -p " . $zipfile, $contents);

                                        unlink($zipfile);

                                } else {

                                        $contents = explode("\n", $part->body);
                                }

                                if ($verbosity) {
                                        print "content: [";
                                        if (is_array($contents)) {
                                                print_r($contents);
                                        } else {
                                                print $contents;
                                        }
                                        print "]\n" ;
                                }

                                if (empty($contents)) {
                                        if ($verbosity) {
                                                print "Shadowserver: no report content found !\n";
                                        }
                                        exit;
                                } else {
                                        // FIXUP NEW STYLE Drone type
                                        if (preg_match('/NEW STYLE/',$decoded->headers['subject'])) {
                                            $matches['type'] .= '-newstyle';
                                        }
                                        // END FIXUP NEW STYLE Drone type
                                        $header = $contents[0];
                                        $headers = str_getcsv($header);
                                        unset($contents[0]);

                                        foreach($contents as $line) {
                                                if (! empty($line) ) {
                                                        $array = str_getcsv($line);
                                                        $count=0;
                                                        foreach($array as $key => $value) {
                                                                // Check for multiple values in C&C reports
                                                                if (preg_match('/ \| /', $value) ) {
                                                                        if (preg_match('/(Region|State|AS Description)/', $headers[$key])) {
                                                                              $array[$headers[$key]] = explode(" | ", $value);
                                                                        } else {
                                                                              $array[$headers[$key]] = $value;
                                                                        }
                                                                } elseif (preg_match('/ /', $value) ) {
                                                                        // check whether we need to build an array...
                                                                        if (preg_match('/(IP|Country|Channel|Domain|ASN|AS Name)/', $headers[$key])) {
                                                                                $array[$headers[$key]] = explode(" ", $value);
                                                                        } else {
                                                                                $array[$headers[$key]] = $value;
                                                                        }
                                                                } else {
                                                                        $array[$headers[$key]] = $value;
                                                                }
                                                                $count=max($count,count($array[$headers[$key]]));
                                                                unset($array[$key]);
                                                        }
                                                        // Create one or more (for i.e. C&C reports) incidents
                                                        // While we're at it convert all keys to lower case for
                                                        // consistency later on.
                                                        for ($i = 0; $i < $count; $i++) {
                                                            $i_array=array();
                                                            foreach($array as $key => $value) {
                                                                if (is_array($value)) {
                                                                  $i_array[$key] = $value[$i] ;
                                                                } else {
                                                                  $i_array[$key] = $value ;
                                                                }
                                                            }
                                                            $incidents[] = array( 'details' => array_change_key_case($i_array, CASE_LOWER), 'logging' =>  $line, 'type' => $matches['type'], 'org' => $matches['org'], 'day' => $matches['day']);
                                                        }
                                                }
                                        }
                                }
                        } else {
                                if ($verbosity) {
                                        print "Shadowserver: did not find a report matching the expected naming convention ([" . $filename .  "])\n";
                                        exit;
                                }
                        }
                } else {
                        if ($verbosity) {
                                print "Shadowserver: did not find an attachment part ([" . $part->ctype_primary . "]/[" .  $part->ctype_secondary . "]:[" . $part->disposition . "])\n";
                        }
                }
        }

        foreach ($incidents as $key => $incident) {
                $detail_array_keys = array();

                if (isset($incident['details']['timestamp'])) {
                        $timestamp=$incident['details']['timestamp'];

                        if (($datetime = strtotime($timestamp)) == false) {
                                $datetime = _('Unable to parse timestamp');
                        } else {
                                $datetime = Date('Y-m-d\TH:i:s', $datetime);
                        }
                } else {
                        $timestamp=$incident['day'];

                        if (($datetime = strtotime($timestamp)) == false) {
                                $datetime = _('Unable to parse timestamp');
                        } else {
                                $datetime = Date('Y-m-d', $datetime);
                        }
                        $incidents[$key]['details']['timestamp'] = $timestamp ;
                }

                if ($verbosity) {
                        print "Shadowserver: parsing incident of type [" . $incident['type'] . "] for [" . $incident['org'] . "] on [" .  $timestamp . "]\n";
                        print_r($incident);
                }

        } // foreach ($incidents)

        if ($verbosity) print "Generating output...\n";
        filter_shadowout($incidents, $output, $verbosity);
        if ($verbosity) print "$output";
        return 0;
}
?>


