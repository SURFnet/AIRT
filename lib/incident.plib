<?php
/* vim: syntax=php
 * AIRT: Application for Incident Response Teams
 * Copyright (C) 2004	Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * incident.plib - Incident management application logic
 *
 * $Id$
 */
require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/search.plib';
require_once LIBDIR.'/constituency.plib';

/* return an associative array with incident states. The key of the array is
 * the incident state ID, the value is the state's label
 */
function getIncidentStates() {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT   id, label
         FROM     incident_states
         ORDER BY id")
    or die("Unable to connect to database.");

    $states=array();
    while ($row = db_fetch_next($res))
        $states[$row["id"]]=$row["label"];
    db_close($conn);
    return $states;
}

/* Return the current incident state ID system default. If there is no
 * explicit default set, return an empty string. */
function getIncidentStateDefault() {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        'SELECT   id
         FROM     incident_states
         WHERE    isdefault')
    or die('Unable to execute query.');

    if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
    } else {
      // Unsure.
      $default = '';
    }
    db_close($conn);
    return $default;
}

/* Return an HTML SELECT box containing valid choices for incident states */
function getIncidentStateSelection($name, $default='') {
   $output = sprintf("<select name=\"%s\">\n", htmlentities($name));
   $states = getIncidentStates();
   if ($default=='') {
      $default = getIncidentStateDefault();
   }
   foreach ($states as $i=>$l) {
      $output .= sprintf("<option value=\"%s\" %s>%s</option>\n", htmlentities($i), ($i == $default) ? "SELECTED" : "", htmlentities($l));
   }
   $output .= "</select>";
   return $output;
}

function getIncidentStatus() {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT   id, label
         FROM     incident_status
         ORDER BY id")
    or die("Unable to connect to database.");

    $status=array();
    while ($row = db_fetch_next($res))
        $status[$row["id"]]=$row["label"];
    db_close($conn);
    return $status;
}

/* Return the current incident status ID system default. If there is no
 * explicit default set, return an empty string. */
function getIncidentStatusDefault() {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        'SELECT   id
         FROM     incident_status
         WHERE    isdefault')
    or die('Unable to execute query.');

    if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
    } else {
      // Unsure.
      $default = '';
    }
    db_close($conn);
    return $default;
}

/* Return an HTML SELECT box containing valid choices for incident statuses */
function getIncidentStatusSelection($name, $default='') {
   $output = sprintf("<select name=\"%s\">\n", htmlentities($name));
   $states = getIncidentStatus();
   if ($default=='') {
      $default = getIncidentStatusDefault();
   }
   foreach ($states as $i=>$l) {
      $output .= sprintf("<option value=\"%s\" %s>%s</option>\n", htmlentities($i), ($i == $default) ? "SELECTED" : "", htmlentities($l));
   }
   $output .= "</select>";
   return $output;
}

function getIncidentTypes() {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT   id, label
         FROM     incident_types
         ORDER BY id")
    or die("Unable to connect to database.");

    $types=array();
    while ($row = db_fetch_next($res))
        $types[$row["id"]]=$row["label"];
    db_close($conn);
    return $types;
}

/* Return the current incident type ID system default. If there is no
 * explicit default set, return an empty string. */
function getIncidentTypeDefault() {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        'SELECT   id
         FROM     incident_types
         WHERE    isdefault')
    or die('Unable to execute query.');

    if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
    } else {
      // Unsure.
      $default = '';
    }
    db_close($conn);
    return $default;
}

/* Return an HTML SELECT box containing valid choices for incident types.
   When a default choice is not given (""), fetch system default.*/
function getIncidentTypeSelection($name, $default='') {
   $output = sprintf("<select name=\"%s\">\n", htmlentities($name));
   $states = getIncidentTypes();
   if ($default=='') {
      $default = getIncidentTypeDefault();
   }
   foreach ($states as $i=>$l) {
      $output .= sprintf("<option value=\"%s\" %s>%s</option>\n", htmlentities($i), ($i == $default) ? "SELECTED" : "", htmlentities($l));
   }
   $output .= "</select>";
   return $output;
}

function getOpenIncidents() {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT   i.id as incidentid,
                  extract(epoch from created), 
                  u1.lastname as creator_lastname,
                  u1.firstname as creator_firstname,
                  u1.email as creator_email,
                  u1.phone as creator_phone, 
                  extract(epoch from updated), 
                  u2.lastname as updatedby_lastname,
                  u2.firstname as updatedby_firstname,
                  u2.email as updatedby_email,
                  u2.phone as updatedby_phone,
                  s2.label as state,
                  s1.label as status, 
                  t.label as type,
                  a.ip as ip
         FROM     incidents i, incident_status s1, incident_states s2, 
                  incident_types t, users u1, users u2, incident_addresses a
         WHERE    i.status = s1.id
         AND      i.state = s2.id
         AND      i.type = t.id
         AND      i.creator = u1.id
         AND      i.updatedby = u2.id
         AND      i.id = a.incident
         AND      s1.label IN ('open', 'stalled')")
    or die("Unable to connect to database.");

    $incidents=array();
    while ($row = db_fetch_next($res))
        $incidents[$row["incidentid"]]=$row;
    db_close($conn);
    return $incidents;
}

function getIncident($id) {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

	// get basic info
    $res = db_query($conn,
        "SELECT   id as incidentid,
                  extract(epoch from created) as created, 
				  creator,
				  extract(epoch from updated) as updated,
				  updatedby,
				  state,
				  status,
				  type
		FROM incidents
		WHERE id=$id")
    or die("Unable to execute query 1.");

	if (db_num_rows($res) == 0) return false;

	$row = db_fetch_next($res);
	$data = $row;

	// get ip addresses
	pg_free_result($res);
	$res = db_query($conn,
		"SELECT  ip
		 FROM    incident_addresses
		 WHERE   incident = '$id'")
	or die("Unable to execute query 2.");

	$ips = array();
	while ($row = db_fetch_next($res))
		array_push($ips, $row["ip"]);
	$data["ips"] = $ips;

	// get users
	db_free_result($res);
	$res = db_query($conn,
		"SELECT  userid
		 FROM    incident_users
		 WHERE   incidentid = '$id'")
	or die("Unable to execute query 3.");

	$users = array();
	while ($row = db_fetch_next($res))
		array_push($users, $row["userid"]);
	$data["users"] = $users;

	db_close($conn);
	return $data;
}

function showOpenIncidentSelection($name) {
    $incidents = getOpenIncidents();
    $count = count($incidents);
    if ($count == 0) return 0;

    printf("<select name=\"%s\">\n",
        htmlentities($name));

    foreach ($incidents as $i=>$data)
    {
        printf("<option value=%s>%s: %s (%s)</option>\n",
            htmlentities($i),
            normalize_incidentid($i),
            $data["ip"],
            $data["type"]);
    }
    printf("</select>");
    return $count;
}

function addIPtoIncident($ip, $incident) {
	$networkid = categorize($ip);
	if (defined('CUSTOM_FUNCTIONS') && function_exists("custom_categorize"))
		$networkid = custom_categorize($ip, $networkid);
	$hostname = @gethostbyaddr($ip);

	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		INSERT INTO incident_addresses
		(id, incident, ip, hostname, constituency, added, addedby)
		VALUES
		(nextval('incident_addresses_sequence'), %s, %s, %s, %s,
		 CURRENT_TIMESTAMP, %s)",
			db_masq_null($incident),
			db_masq_null($ip),
			db_masq_null($hostname),
			$networkid,
			db_masq_null($_SESSION["userid"])
		))
	or die("Unable to execute query.");
	db_close($conn);

	generateEvent("incidentaddip", array(
		"incidentid" => $incident,
		"constituency" => $networkid,
		"hostname" => $hostname,
		"ip" => $ip
	));
}

function removeIPfromIncident($ip, $incident) {
	generateEvent("incidentdelip", array(
		"incidentid" => $incident,
		"ip" => $ip
	));

	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		DELETE FROM incident_addresses
		WHERE ip=%s
		AND   incident=%s",
			db_masq_null($ip),
			db_masq_null($incident)
		))
	or die("Unable to execute query.");
	db_close($conn);
}

/* Fetch the label of an incident state by ID */
function getIncidentStateLabelByID($id) {
	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		SELECT label
		FROM   incident_states
		WHERE  id='$id'", $id))
	or die("Unable to fetch state label");

	if (db_num_rows($res)) {
		$row = db_fetch_next($res);
		$out = $row["label"];
	} else $out = "unknown";

	db_close($conn);

	return $out;
}	

/* Fetch the label of an incident status by ID */
function getIncidentStatusLabelByID($id) {
	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		SELECT label
		FROM   incident_status
		WHERE  id='$id'", $id))
	or die("Unable to fetch status label");

	if (db_num_rows($res)) {
		$row = db_fetch_next($res);
		$out = $row["label"];
	} else $out = "unknown";

	db_close($conn);

	return $out;
}	

/* Fetch the label of an incident type by ID */
function getIncidentTypeLabelByID($id) {
	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		SELECT label
		FROM   incident_types
		WHERE  id='$id'", $id))
	or die("Unable to fetch status label");

	if (db_num_rows($res)) {
		$row = db_fetch_next($res);
		$out = $row["label"];
	} else $out = "unknown";

	db_close($conn);

	return $out;
}	

function addUsertoIncident($userid, $incident) {
	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		INSERT INTO incident_users
		(id, incidentid, userid, added, addedby)
		VALUES
		(nextval('incident_users_sequence'), %s, %s, CURRENT_TIMESTAMP, %s)",
			db_masq_null($incident),
			db_masq_null($userid),
			db_masq_null($_SESSION["userid"])
		))
	or die("Unable to execute query.");
	db_close($conn);

	generateEvent("incidentadduser", array(
		"incidentid" => $incident,
		"userid" => $userid
	));
}

/* Remove a user from an incdient id. Does not return any value */
function removeUserfromIncident($userid, $incident) {
	generateEvent("incidentdeluser", array(
		"incidentid" => $incident,
		"userid" => $userid
	));

	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		DELETE FROM incident_users
		WHERE userid=%s
		AND   incidentid=%s",
			db_masq_null($userid),
			db_masq_null($incident)
		))
	or die("Unable to execute query.");
	db_close($conn);
}

/* Return an HTML formatted string containing the basic incident data (type,
 * state and status. All input variables may be "", which leads to a system
 * default selection.
 */
function formatBasicIncidentData($type, $state, $status) {
	$output = "<table>\n";
	$output .= "  <tr>\n";
	$output .= "    <td>Incident type</td>\n";
	$output .= "    <td>".getIncidentTypeSelection("type", $type)."</td>\n";
	$output .= "    <td><a target=\"airthelp\" href=\"$_SERVER[PHP_SELF]?action=showtypes\">Help</a></td>\n";
	$output .= "  </tr>\n";
	$output .= "  <tr>\n";
	$output .= "    <td>Incident state</td>\n";
	$output .= "    <td>".getIncidentStateSelection("state", $state)."</td>\n";
	$output .= "    <td><a target=\"airthelp\" href=\"$_SERVER[PHP_SELF]?action=showstates\">Help</a></td>\n";
   $output .= "  </tr>\n";
	$output .= "  <tr>\n";
   $output .= "    <td>Incident status</td>\n";
	$output .= "    <td>".getIncidentStatusSelection("status", $status)."</td>\n";
	$output .= "    <td><a target=\"airthelp\" href=\"$_SERVER[PHP_SELF]?action=showstatus\">Help</a></td>\n";
	$output .= "  </tr>\n";
	$output .= "</table>\n";

	return $output;
}


/* Produces a simple HTML edit form to edit an IP address' data.
 * Will be expanded in the future.
 * Requires an incident ID and an IP address in dot notation (could
 * also have been a single incident_address ID, would be better).
 * Returns a HTML formatted string.
 */
function editIPform($incidentid,$ip) {

  // Retrieve the full address assignment data.
  $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die('Unable to connect to database.');
  $q = sprintf("SELECT incident_addresses.id as id,
                       ip,hostname,constituency,
                       to_char(added,'YYYY-MM-DD HH24:MI') as added,
                       u1.email as addedby,
                       to_char(updated,'YYYY-MM-DD HH24:MI') as updated,
                       u2.email as updatedby
                FROM incident_addresses, users as u1, users as u2
                WHERE incident=%d AND ip=%s
                  AND u1.id=addedby
                  AND u2.id=updatedby
               ",
         $incidentid,
         db_masq_null($ip)
       );
  $res = db_query($conn, $q)
    or die('Unable to execute query.');
  if (db_num_rows($res)>0) {
    $row = db_fetch_next($res);
    $id           = $row['id'];
    $ip           = $row['ip'];
    $hostname     = $row['hostname'];
    $constituency = $row['constituency'];
    $added        = $row['added'];
    $addedby      = $row['addedby'];
    $updated      = $row['updated'];
    $updatedby    = $row['updatedby'];
    db_close($conn);
  } else {
    db_close($conn);
    die('Could not find assigned IP address.');
  }

  $o .= sprintf("<form method=\"POST\" action=\"%s\">\n",
    $_SERVER['PHP_SELF']);
  $o .= sprintf("<input type=\"HIDDEN\" name=\"action\" value=\"updateip\">\n");
  $o .= sprintf("<input type=\"HIDDEN\" name=\"id\" value=\"%d\">\n",
    $id);
  $o .= sprintf("<input type=\"HIDDEN\" name=\"ip\" value=\"%s\">\n",
    $ip);
  $o .= sprintf("<input type=\"HIDDEN\" name=\"incidentid\" value=\"%d\">\n",
    $incidentid);
  $o .= "<table>\n";
  $o .= "  <tr>\n";
  $o .= "    <td>IP address</td>\n";
  $o .= sprintf("    <td>%s</td>\n",
    $ip);
  $o .= "  </tr>\n";
  $o .= "  <tr>\n";
  $o .= "    <td>Host name</td>\n";
  $o .= sprintf("    <td>%s</td>\n",
    $hostname);
  $o .= "  </tr>\n";
  $o .= "  <tr>\n";
  $o .= "    <td>Constituency</td>\n";
  $o .= sprintf("    <td>%s</td>\n",
    getConstituencySelection('constituency',$constituency));
  $o .= "  </tr>\n";
  $o .= "  <tr>\n";
  $o .= "    <td>Added</td>\n";
  $o .= sprintf("    <td>%s</td>\n",
    $added);
  $o .= "  </tr>\n";
  $o .= "  <tr>\n";
  $o .= "    <td>Added by</td>\n";
  $o .= sprintf("    <td>%s</td>\n",
    $addedby);
  $o .= "  </tr>\n";
  $o .= "  <tr>\n";
  $o .= "    <td>Updated</td>\n";
  $o .= sprintf("    <td>%s</td>\n",
    $updated);
  $o .= "  </tr>\n";
  $o .= "  <tr>\n";
  $o .= "    <td>Updated by</td>\n";
  $o .= sprintf("    <td>%s</td>\n",
    $updatedby);
  $o .= "  </tr>\n";
  $o .= "  <tr>\n";
  $o .= "    <td>&nbsp;</td>\n";
  $o .= "    <td><input type=\"submit\" value=\"Update\"></td>\n";
  $o .= "  </tr>\n";
  $o .= "</table>\n";
  $o .= "</form>\n";

  return $o;
}


/* Attempts to update the incident_addresses table with new data.
 * Works on a unique ID for the combination (incident,ipadress).
 * Returns void.
 */
function updateIPofIncident($id,$constituency) {
  $q = sprintf("UPDATE incident_addresses
                SET constituency=%d,
                updated=CURRENT_TIMESTAMP,
                updatedby=%d
                WHERE id=%d",
               $constituency,
               $_SESSION['userid'],
               $id);
  $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");
  $res = db_query($conn, $q)
    or die("Unable to execute query.");
  db_close($conn);
}

?>
