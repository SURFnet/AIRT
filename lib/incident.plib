<?php
/*
 * AIRT: Application for Incident Response Teams
 * Copyright (C) 2004	Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * incident.plib - Incident management application logic
 *
 * $Id$
 */
require_once '/etc/airt/airt.cfg';
require_once LIBDIR.'/database.plib';

function getIncidentStates()
{
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT   id, label
         FROM     incident_states
         ORDER BY id")
    or die("Unable to connect to database.");

    $states=array();
    while ($row = db_fetch_next($res))
        $states[$row["id"]]=$row["label"];
    db_close($conn);
    return $states;
}


function showIncidentStateSelection($name, $default="")
{
    printf("<select name=\"%s\">\n",
        htmlentities($name));
    $states = getIncidentStates();
    foreach ($states as $i=>$l)
    {
        printf("<option value='%s' %s>%s</option>\n",
            htmlentities($i),
			($i == $default) ? "SELECTED" : "",
            htmlentities($l));
    }
    printf("</select>");
}


function getIncidentStatus()
{
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT   id, label
         FROM     incident_status
         ORDER BY id")
    or die("Unable to connect to database.");

    $status=array();
    while ($row = db_fetch_next($res))
        $status[$row["id"]]=$row["label"];
    db_close($conn);
    return $status;
}


function showIncidentStatusSelection($name, $default="")
{
    printf("<select name=\"%s\">\n",
        htmlentities($name));
    $status = getIncidentStatus();
    foreach ($status as $i=>$l)
    {
        printf("<option value='%s' %s>%s</option>\n",
            htmlentities($i),
			($i == $default) ? "SELECTED" : "",
            htmlentities($l));
    }
    printf("</select>");
}


function getIncidentTypes()
{
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT   id, label
         FROM     incident_types
         ORDER BY id")
    or die("Unable to connect to database.");

    $types=array();
    while ($row = db_fetch_next($res))
        $types[$row["id"]]=$row["label"];
    db_close($conn);
    return $types;
}


function showIncidentTypeSelection($name, $default="")
{
    printf("<select name=\"%s\">\n",
        htmlentities($name));
    $states = getIncidentTypes();
    foreach ($states as $i=>$l)
    {
        printf("<option value='%s' %s>%s</option>\n",
            htmlentities($i),
			($i == $default) ? "SELECTED" : "",
            htmlentities($l));
    }
    printf("</select>");
}

function getOpenIncidents()
{
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT   i.id as incidentid,
                  extract(epoch from created), 
                  u1.lastname as creator_lastname,
                  u1.firstname as creator_firstname,
                  u1.email as creator_email,
                  u1.phone as creator_phone, 
                  extract(epoch from updated), 
                  u2.lastname as updatedby_lastname,
                  u2.firstname as updatedby_firstname,
                  u2.email as updatedby_email,
                  u2.phone as updatedby_phone,
                  s2.label as state,
                  s1.label as status, 
                  t.label as type,
                  a.ip as ip
         FROM     incidents i, incident_status s1, incident_states s2, 
                  incident_types t, users u1, users u2, incident_addresses a
         WHERE    i.status = s1.id
         AND      i.state = s2.id
         AND      i.type = t.id
         AND      i.creator = u1.id
         AND      i.updatedby = u2.id
         AND      i.id = a.incident
         AND      s2.label IN ('open', 'stalled')")
    or die("Unable to connect to database.");

    $incidents=array();
    while ($row = db_fetch_next($res))
        $incidents[$row["incidentid"]]=$row;
    db_close($conn);
    return $incidents;
}


function getIncident($id) {
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

	// get basic info
    $res = db_query($conn,
        "SELECT   id as incidentid,
                  extract(epoch from created) as created, 
				  creator,
				  extract(epoch from updated) as updated,
				  updatedby,
				  state,
				  status,
				  type
		FROM incidents
		WHERE id=$id")
    or die("Unable to execute query 1.");

	$row = db_fetch_next($res);
	$data = $row;

	// get ip addresses
	pg_free_result($res);
	$res = db_query($conn,
		"SELECT  ip
		 FROM    incident_addresses
		 WHERE   incident = '$id'")
	or die("Unable to execute query 2.");

	$ips = array();
	while ($row = db_fetch_next($res))
		array_push($ips, $row["ip"]);
	$data["ips"] = $ips;

	// get users
	db_free_result($res);
	$res = db_query($conn,
		"SELECT  userid
		 FROM    incident_users
		 WHERE   incidentid = '$id'")
	or die("Unable to execute query 3.");

	$users = array();
	while ($row = db_fetch_next($res))
		array_push($users, $row["userid"]);
	$data["users"] = $users;

	db_close($conn);
	return $data;
}

function showOpenIncidentSelection($name)
{
    $incidents = getOpenIncidents();
    $count = count($incidents);
    if ($count == 0) return 0;

    printf("<select name=\"%s\">\n",
        htmlentities($name));

    foreach ($incidents as $i=>$data)
    {
        printf("<option value=%s>%s: %s (%s)</option>\n",
            htmlentities($i),
            normalize_incidentid($i),
            $data["ip"],
            $data["type"]);
    }
    printf("</select>");
    return $count;
}

function addIPtoIncident($ip, $incident) {
	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		INSERT INTO incident_addresses
		(id, incident, ip, added, addedby)
		VALUES
		(nextval('incident_addresses_sequence'), %s, %s, CURRENT_TIMESTAMP, %s)",
			db_masq_null($incident),
			db_masq_null($ip),
			db_masq_null($_SESSION["userid"])
		))
	or die("Unable to execute query.");
	db_close($conn);
}


function removeIPfromIncident($ip, $incident) {
	$conn = db_connect(DBDB, DBUSER, DBPASSWD)
	or die("unable to connect to database.");

	$res = db_query($conn, sprintf("
		DELETE FROM incident_addresses
		WHERE ip=%s
		AND   incident=%s",
			db_masq_null($ip),
			db_masq_null($incident)
		))
	or die("Unable to execute query.");
	db_close($conn);
}


function addIncidentComment($comment, $incidentid="", $userid="", $conn="") {
	if ($incidentid=="") $incidentid=$_SESSION["incidentid"];
	if ($userid=="") $userid=$_SESSION["userid"];
	$c = false;

	if ($conn=="") {
		$conn = db_connect(DBDB, DBUSER, DBPASSWD)
		or die("unable to connect to database.");
		$c = true;
		if (DEBUG) printf("Creating new database connection.");
	} else {
		if (DEBUG) printf("Re-using database connection.");
	}

	$res = db_query($conn, sprintf("
		INSERT INTO incident_comments
		(id, incident, comment, added, addedby)
		VALUES
		(nextval('incident_comments_sequence'), %s, %s, CURRENT_TIMESTAMP, %s)",
			$incidentid,
			db_masq_null($comment),
			$userid
		))
	or die("Unable to execute query.");
	if ($c) {
		db_close($conn);
		if (DEBUG) printf("Closing database connection.");
	}
}

?>
