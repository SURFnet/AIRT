<?php
/* vim: syntax=php shiftwidth=3 tabstop=3
 * AIRT: Application for Incident Response Teams
 * Copyright (C) 2006 Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * incident.plib - Incident management application logic
 *
 * $Id$
 */

require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/search.plib';
require_once LIBDIR.'/constituency.plib';
require_once LIBDIR.'/history.plib';
require_once LIBDIR.'/airt.plib';
require_once LIBDIR.'/mailtemplates.plib';
require_once LIBDIR.'/profiler.plib';

/** Return an associative array with incident states.
 * @param $extras Optionally, an array with extra incident states that are
 * not from the database. Typically, "Please select a state"-like inert
 * selections.
 * Array format: array[extra_id]=extra_label. The extra states are prefixed
 * before the states from the database.
 * @return array[id]=label.
 */
function getIncidentStates($extras=array()) {
   $res = db_query('SELECT  id, label FROM incident_states ORDER BY id')
   or die(_('Unable to connect to database.'));

   $states=$extras;
   while ($row = db_fetch_next($res)) {
      $states[$row['id']]=$row['label'];
   }
   return $states;
}

/** Retrieve an incident state description by its identifier.
 * \param [in] $id Identifier of the incident state
 * \return An empty string on failure, or a string containing the description.
 */
function getIncidentStateDescr($id='') {
   if (!is_numeric($id)) {
      return '';
   }
   $states = getIncidentStates();
   if (array_key_exists($id, $states)) {
      return $states[$id];
   } else {
      return '';
   }
}

/* Return the current incident state ID system default. If there is no
 * explicit default set, return an empty string. */
function getIncidentStateDefault() {
   $res = db_query('SELECT id FROM incident_states WHERE isdefault')
   or die(_('Unable to execute query.'));

   if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
   } else {
      // Unsure.
      $default = '';
   }
   return $default;
}

function setIncidentStateDefault() {
   // set the lowest id to the default state
   // fetch the lowest result
   $res = db_query('UPDATE incident_states SET
      isdefault=true where id in (SELECT min(id) FROM
      incident_states)');
   db_free_result($res);
}

/* Return an HTML SELECT box containing valid choices for incident states.
 * Input: name = The HTML name of the selection box.
 *        default = Optionally, the ID of the default selection. If not
 *                  given, the database default state is used as selection
 *                  default.
 *        extras = Optionally, an array [id]=>label with extra states that
 *                 do not come from the database, and that are prefixed
 *                 before the database states (typically "Select State").
 * Output: HTML string with full <select> block.
 */
function getIncidentStateSelection($name, $default='', $extras=array()) {
   $output = sprintf('<select name="%s">'.LF, htmlentities($name));
   $states = getIncidentStates($extras);
   if ($default=='') {
      $default = getIncidentStateDefault();
   }
   foreach ($states as $i=>$l) {
      $output .= sprintf('<option value="%s" %s>%s</option>'.LF,
         htmlentities($i),
         ($i == $default) ? 'SELECTED' : '', htmlentities($l));
   }
   $output .= '</select>'.LF;
   return $output;
}

/* Return an associative array with incident statuses.
 * Input: optionally, an array with extra incident statuses that are not from
 * the database. Typically, "Please select a status"-like inert selections.
 * Array format: array[extra_id]=extra_label. The extra statuses are prefixed
 * before the statuses from the database.
 * Output: array[id]=label.
 */
function getIncidentStatus($extras=array()) {
   $res = db_query('SELECT id, label FROM incident_status ORDER BY id')
   or die(_('Unable to connect to database.'));

   $statuses=$extras;
   while ($row = db_fetch_next($res)) {
      $statuses[$row['id']]=$row['label'];
   }
   return $statuses;
}

/** Retrieve an incident status description by its identifier.
 * \param [in] $id Identifier of the incident status
 * \return An empty string on failure, or a string containing the description.
 */
function getIncidentStatusDescr($id='') {
   if (!is_numeric($id)) {
      return '';
   }
   $statuses = getIncidentStatus();
   if (array_key_exists($id, $statuses)) {
      return $statuses[$id];
   } else {
      return '';
   }
}

/* Return the current incident status ID system default. If there is no
 * explicit default set, return an empty string. */
function getIncidentStatusDefault() {
   $res = db_query('SELECT id FROM incident_status WHERE isdefault')
   or die(_('Unable to execute query.'));

   if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
    } else {
      // Unsure.
      $default = '';
    }
    return $default;
}

function setIncidentStatusDefault() {
   $res  = db_query('UPDATE incident_status SET
      isdefault=true where id in (SELECT min(id) FROM
      incident_status)');
   db_free_result($res);
}

/* Return an HTML SELECT box containing valid choices for incident statuses.
 * Input: name = The HTML name of the selection box.
 *        default = Optionally, the ID of the default selection. If not
 *                  given, the database default status is used as selection
 *                  default.
 *        extras = Optionally, an array [id]=>label with extra statuses that
 *                 do not come from the database, and that are prefixed
 *                 before the database statuses (typically "Select Status").
 * Output: HTML string with full <select> block.
 */
function getIncidentStatusSelection($name, $default='', $extras=array()) {
   $output = sprintf('<select name="%s">'.LF, htmlentities($name));
   $statuses = getIncidentStatus($extras);
   if ($default=='') {
      $default = getIncidentStatusDefault();
   }
   foreach ($statuses as $i=>$l) {
      $output .= sprintf('<option value="%s" %s>%s</option>'.LF,
         htmlentities($i),
         ($i == $default) ? 'SELECTED' : '', htmlentities($l));
   }
   $output .= '</select>'.LF;
   return $output;
}

/** Retrieve an incident type description by its identifier.
 * \param [in] $id Identifier of the incident type
 * \return An empty string on failure, or a string containing the description.
 */
function getIncidentTypeDescr($id='') {
   if (!is_numeric($id)) {
      return '';
   }
   $types = getIncidentTypes();
   if (array_key_exists($id, $types)) {
      return $types[$id];
   } else {
      return '';
   }
}

function getIncidentTypes($extras=array()) {
   $res = db_query('SELECT id, label FROM incident_types ORDER BY id')
   or die(_('Unable to connect to database.'));

   $types=$extras;
   while ($row = db_fetch_next($res)) {
      $types[$row['id']]=$row['label'];
   }
   return $types;
}

/* Return the current incident type ID system default. If there is no
 * explicit default set, return an empty string. */
function getIncidentTypeDefault() {
   $res = db_query('SELECT id FROM incident_types WHERE isdefault')
   or die(_('Unable to execute query.'));

   if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
   } else {
      // Unsure.
      $default = '';
   }
   return $default;
}

function setIncidentTypeDefault() {
   // set default type
   $res  = db_query('UPDATE incident_types SET
      isdefault=true where id in (SELECT min(id) FROM
      incident_types)');
   db_free_result($res);
}

/* Return an HTML SELECT box containing valid choices for incident types.
   When a default choice is not given (""), fetch system default.*/
function getIncidentTypeSelection($name, $default='',$extras=array()) {
   $output = sprintf('<select name="%s">'.LF,
      htmlentities($name));
   $states = getIncidentTypes($extras);
   if ($default=='') {
      $default = getIncidentTypeDefault();
   }
   foreach ($states as $i=>$l) {
      $output .= sprintf('<option value="%s" %s>%s</option>'.LF,
         htmlentities($i),
         ($i == $default) ? 'SELECTED' : '', htmlentities($l));
   }
   $output .= '</select>'.LF;
   return $output;
}

/* retrieve incidents with status open or stalled.  Returns an associative
 * array with the incident ID as key and an associative array with incident
 * data as value. The optional variable $sqlfilter can be used to influence
 * which incidents are returned. Without it, all open and stalled incidents
 * are retrieved.
 */
function getOpenIncidents($sqlfilter = "WHERE s1.label IN ('open','stalled')") {
   $res = db_query(
      'SELECT   i.id as incidentid,
                i.short_desc as desc,
                extract(epoch from created) as created,
                u1.lastname as creator_lastname,
                u1.firstname as creator_firstname,
                u1.email as creator_email,
                u1.phone as creator_phone,
                extract(epoch from i.updated) as updated,
                u2.lastname as updatedby_lastname,
                u2.firstname as updatedby_firstname,
                u2.email as updatedby_email,
                u2.phone as updatedby_phone,
                s2.label as state,
                s1.label as status,
                t.label as type,
                a.ip as ip,
                a.hostname as hostname,
                extract(epoch from i.incidentdate) as incidentdate
         FROM   incidents i
         LEFT JOIN incident_addresses a on i.id = a.incident
         LEFT JOIN incident_status s1 on s1.id = i.status
         LEFT JOIN incident_states s2 on s2.id = i.state
         LEFT JOIN incident_types t on t.id = i.type
         LEFT JOIN users u1 on u1.id = i.creator
         LEFT JOIN users u2 on u2.id = i.updatedby
         '.
         $sqlfilter);
   if (!$res) {
      airt_error('DB_QUERY', 'incident.plib:'.__LINE__);
      return array();
   }

   $incidents=array();
   while ($row = db_fetch_next($res)) {
      $incidents[$row['incidentid']]=$row;
   }
   return $incidents;
}

/* Return a list of IP address records that are associated with the given
 * incident id.
 */
function getAddressesForIncident($id) {
   $out = array();
   if (!is_numeric($id)) {
      return $out;
   }
   $id = decode_incidentid($id);
   $res = db_query(q('SELECT ip,hostname,constituency,addressrole FROM incident_addresses WHERE incident = %id', array('%id'=>$id)));
   if (!$res) {
      airt_error('DB_QUERY', 'incidnet.plib:'.__LINE__);
      return array();
   }
   while ($row = db_fetch_next($res)) {
       $out[] = $row;
   }
   return $out;
}


/** Retrieve an incident by detail.
 * @param $id numeric identifier of incident to retrieve.
 * @return false on failaire, or an associative array with the following fields:
 *    incidentid, created, creator, updated, updatedby, state, status, type,
 *    logging, incidentdate, ips, users.
 *    All dates are returned as Unix timestamps. Status, state and type are
 *    numeric identifiers. ids and users are arrays.
 */
function getIncident($id) {
   if (!is_numeric($id)) {
      return false;
   }
   // get basic info
   $q = q('SELECT id as incidentid,
        extract(epoch from created) as created,
        creator,
        extract(epoch from updated) as updated,
        updatedby,
        state,
        status,
        type,
	logging,
        extract(epoch from incidentdate) as incidentdate,
        pref_templ as template,
        short_desc as desc
      FROM incidents
      WHERE id=%id', array('%id'=>$id));
   $res = db_query($q);
   if ($res == false) {
      return false;
   }
   if (db_num_rows($res) == 0) {
      return false;
   }

   $row = db_fetch_next($res);
   $data = $row;

   $data['ips'] = getAddressesForIncident($id);

   // get users
   db_free_result($res);
   $res = db_query(q('SELECT userid FROM incident_users '.
      'WHERE incidentid = \'%id\'', array('%id'=>$id)));
   if ($res == false) {
      $errormsg = _('Unable to match users to incident.');
      return false;
   }
   $users = array();
   while ($row = db_fetch_next($res)) {
      array_push($users, $row['userid']);
   }
   $data['users'] = $users;

   return $data;
}


/** Add an additional IP address to an existing incident, optionally specifying
 * the role that the incident plays.
 * @param $ip IP address to be added
 * @param $incident Identifier of the incident to which $ip will be added
 * @param $role (optional) Identifier of the address role
 *
 * @return false of failure, true on success
 */
function addIPtoIncident($ip, $incident,$role=0) {
   if (!is_numeric($incident)) {
      airt_profile('addIPtoIncident: Incident ID is not numeric');
      return false;
   }

   if (!is_numeric($role)) {
      airt_profile('addIPtoIncident: Role is not numeric');
      return false;
   }

   $networkid = categorize($ip);
   if (defined('CUSTOM_FUNCTIONS') && function_exists("custom_categorize")) {
      $networkid = custom_categorize($ip, $networkid);
   }
   airt_profile('addIPtoIncident: networkid = '.$networkid);

   $constituencyID = getConstituencyIDbyNetworkID($networkid);
   airt_profile('addIPtoIncident: constituency = '.$constituencyID);

   $hostname = @gethostbyaddr($ip);
   $_SESSION['active_ip'] = $ip;

   $res = db_query(q('
      INSERT INTO incident_addresses
      (id, incident, ip, addressrole, hostname, constituency,
        added, addedby, updated, updatedby)
      VALUES
      (nextval(\'incident_addresses_sequence\'), %incidentid, %ip,
       %addressrole, %hostname, %constituency, CURRENT_TIMESTAMP, %userid, 
       CURRENT_TIMESTAMP, %userid)', array(
         '%incidentid'=>db_masq_null($incident),
         '%ip'=>db_masq_null($ip),
         '%hostname'=>db_masq_null($hostname),
         '%constituency'=>$constituencyID,
         '%addressrole'=>$role,
         '%userid'=>db_masq_null($_SESSION['userid']))
   ));
   if (!$res) {
      airt_error('DB_QUERY', 'incident.plib:'.__LINE__,
                 t(_('Could not add IP to incident')));
      Header("Location: $_SERVER[PHP_SELF]");
      return false;
   }
   return true;
}

/** Add a new incident to the database.
 * The incident will be assigned a new ID and the basic incident information
 * will be added to the database.
 *
 * \param[in] $state   The numerical ID of an incident state
 * \param[in] $status  The numerical ID of an incident status
 * \param[in] $type    The numerical ID of an incident type
 * \param[in] $logging An optional string containing the logging
 *
 * \return Returns a numerical incident ID on success, or false on failure
 */
function createIncident($params = array()) {
   if (!is_array($params)) {
      return false;
   }
   if (empty($params['state']) || !is_numeric($params['state'])) {
      return false;
   }
   if (empty($params['status']) || !is_numeric($params['status'])) {
      return false;
   }
   if (empty($params['type']) || !is_numeric($params['type'])) {
      return false;
   }
   if (empty($params['logging'])) {
      $params['logging'] = '';
   }
   if (empty($params['date'])) {
      $params['date'] = '';
   }
   if (empty($params['desc'])) {
      $params['desc'] = '';
   } else {
      // do not allow HTML or PHP tags in short description
      $params['desc'] = strip_tags($params['desc']);
   }
   if (empty($params['template'])) {
      $params['template'] = '';
   } else {
      // do not allow HTML or PHP tags in short description
      $params['template'] = strip_tags($params['template']);
   }

   $res = db_query('select nextval(\'incidents_sequence\') as incidentid');
   if ($res == false) {
      return false;
   }
   $row = db_fetch_next($res);
   $incidentid = $row['incidentid'];
   $_SESSION['incidentid'] = $incidentid;
   db_free_result($res);

   $res = db_query(sprintf(
      'insert into incidents
      (id, created, creator, updated, updatedby, state, status, type,
      incidentdate, logging, short_desc, pref_templ)
      values
      (%d, CURRENT_TIMESTAMP, %d, CURRENT_TIMESTAMP, %d, %d, %d, %d, %s, %s,
      %s, %s)',
         $incidentid,
         $_SESSION['userid'],
         $_SESSION['userid'],
         $params['state'] == '' ? 'NULL' : $params['state'] ,
         $params['status'] == '' ? 'NULL' : $params['status'] ,
         $params['type'] == '' ? 'NULL' : $params['type'],
         $params['date'] == '' ? 'NULL' : "'".Date('Y-m-d H:i:s', $params['date'])."'",
         $params['logging'] == '' ? 'NULL' : "'".db_escape_string($params['logging'])."'",
         $params['desc'] == '' ? 'NULL' : "'".db_escape_string($params['desc'])."'",
         $params['template'] == '' ? 'NULL' : "'".db_escape_string($params['template'])."'"
   ));
   if (!$res) {
      return false;
   }
   db_free_result($res);

   addIncidentComment(array(
      'comment'=>'Incident created',
      'incidentid'=>$incidentid
   ));
   if (empty($params['date'])) {
      $params['date'] = time();
   }
   $comment=sprintf('state=%s, status=%s, type=%s, date=%s',
      strip_tags(getIncidentStateLabelByID($params['state'])),
      strip_tags(getIncidentStatusLabelByID($params['status'])),
      strip_tags(getIncidentTypeLabelById($params['type'])),
      Date('d-M-Y H:i:s', $params['date']));
   addIncidentComment(array(
      'comment'=>$comment,
      'incidentid'=>$incidentid
   ));
   return $incidentid;
} // createIncident

/** Remove an incident from an IP address.
 * \param $ip IP address to be removed.
 * \param $incident ID of the IP to be removed
 * \param $role Address role ID of the IP address to be removed
 *
 * \return false on failure, true on success.
 */
function removeIPfromIncident($ip, $incident, $role) {
   if (!is_numeric($incident) || !is_numeric($role)) {
      return false;
   }
   generateEvent('incidentdelip', array(
      'incidentid' => $incident,
      'ip' => $ip,
      'addressrole' => $role
   ));

   $res = db_query(q('
      DELETE FROM incident_addresses
      WHERE ip=%ip
      AND   incident=%incidentid
      AND   addressrole=%addressrole', array(
      '%ip'=>db_masq_null($ip),
      '%incidentid'=>db_masq_null($incident),
      '%addressrole'=>db_masq_null($role))
   ));
   if ($res == false) {
      return false;
   }
   return true;
}

/** Fetch the label of an incident state by ID
 * @param $id Incident ID
 * @return a string containing the incident state of an ID, or the string
 *    'unknown'
 */
function getIncidentStateLabelByID($id) {
   if (!is_numeric($id)) {
      return _('unkown');
   }
   $res = db_query(q('
      SELECT label
      FROM   incident_states
      WHERE  id=\'%id\'', array('%id'=>$id)));
   if ($res == false) {
      return _('unknown');
   }

   if (db_num_rows($res)) {
      $row = db_fetch_next($res);
      $out = $row['label'];
   } else {
      $out = _('unknown');
   }

   return $out;
}

/* Fetch the label of an incident status by ID
 * @param $id Incident ID
 * @return a string containing the incident status of an ID, or the string
 *    'unknown'
 */
function getIncidentStatusLabelByID($id) {
   if (!is_numeric($id)) {
      return _('unkown');
   }
   $res = db_query(q('
      SELECT label
      FROM   incident_status
      WHERE  id=\'%id\'', array('%id'=>$id)));
   if ($res == false) {
      return _('unknown');
   }

   if (db_num_rows($res)) {
      $row = db_fetch_next($res);
      $out = $row['label'];
   } else {
      $out = _('unknown');
   }

   return $out;
}

/** Fetch the label of an incident type by ID
 * @param $id Incident ID
 * @return a string containing the incident type of an ID, or the string
 *    'unknown'
 */
function getIncidentTypeLabelByID($id) {
   if (!is_numeric($id)) {
      return _('unkown');
   }
   $res = db_query(q('
      SELECT label
      FROM   incident_types
      WHERE  id=\'%id\'', array('%id'=>$id)));
   if ($res == false) {
      return _('unknown');
   }
   if (db_num_rows($res)) {
      $row = db_fetch_next($res);
      $out = $row['label'];
   } else {
      $out = _('unknown');
   }

   return $out;
}

/** 
 * Associate a user with an incident.
 * @param $userid ID of the user
 * @param $incident ID of the incident
 *
 * @return false on failure, true on success
 */
function addUserToIncident($userid, $incident, $override='') {
   if (!is_numeric($userid) || !is_numeric($incident)) {
      airt_msg(_('Unable to add user to incident.'));
      return false;
   }

   $res = db_query(q('
      INSERT INTO incident_users
      (id, incidentid, userid, added, addedby)
      VALUES
      (nextval(\'incident_users_sequence\'), %incidentid, %userid, 
       CURRENT_TIMESTAMP, %logger)', array(
         '%incidentid'=>db_masq_null($incident),
         '%userid'=>db_masq_null($userid),
         '%logger'=>db_masq_null($_SESSION['userid']))));
   if ($res == false) {
      return false;
   }

   /* IODEF capability override */
   $u = getUserByUserID($userid);
   if ($u == false) {
      return false;
   }
   $caps = array();
   $err = '';
   if (getUserCapabilities($userid, $caps, $err) === false) {
      airt_msg($err);
      return false;
   }
   if (array_key_exists(AIRT_USER_CAPABILITY_IODEF, $caps) &&
       $caps[AIRT_USER_CAPABILITY_IODEF] == 1) {
      /* find matching mail template */
      $templates = array();
      $err = '';
      if (getCapabilityMailtemplates(AIRT_MAIL_CAPABILITY_IODEF, $templates, $err)
          === true ) {
         /* safe to get the first template in the array, since only one
          * template should be set to iodef-provider at any time
          */
         if (sizeof($templates) > 0) {
            $override = $templates[0];
         }
      }
   }

   if ($override == '') {
      ; # do nothing
   } else {
      setMailtemplateOverride($incident, $userid, $override);
   }

   generateEvent('incidentadduser', array(
      'incidentid' => $incident,
      'userid' => $userid
   ));
   return true;
}

/** Remove a user from an incdient id.
 * @param $userid ID of the user
 * @param $incident ID of the incident
 * @return true on success, false on failure.
 */
function removeUserfromIncident($userid, $incident) {
   generateEvent('incidentdeluser', array(
      'incidentid' => $incident,
      'userid' => $userid
   ));

   $res = db_query(q('
      DELETE FROM incident_users
      WHERE userid=%userid
      AND   incidentid=%incidentid', array(
         '%userid'=>db_masq_null($userid),
         '%incidentid'=>db_masq_null($incident))));
   if ($res == false) {
      return false;
   } else {
      return true;
   }
}

/* Return an HTML formatted string containing the basic incident data (type,
 * state and status. All input variables may be '', which leads to a system
 * default selection.
 */
function formatBasicIncidentData($params=array()) {
   foreach (array('desc', 'template', 'date', 'logging', 'type', 'state', 'status') 
            as $param) {
      if (empty($params[$param])) {
         $params[$param] = '';
      }
   }
   $output = '<table>'.LF;
   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Incident type').'</td>'.LF;
   $output .= '    <td>'.getIncidentTypeSelection('type', $params['type']).
      '</td>'.LF;
   $output .= '  </tr>'.LF;
   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Incident state').'</td>'.LF;
   $output .= '    <td>'.getIncidentStateSelection('state', $params['state']).
      '</td>'.LF;
   $output .= '  </tr>'.LF;
   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Incident status').'</td>'.LF;
   $output .= '    <td>'.getIncidentStatusSelection('status', $params['status']).
      '</td>'.LF;
   $output .= '  </tr>'.LF;
   $output .= '  <tr valign="top">'.LF;
   $output .= '    <td>'._('Date of incident').'</td>'.LF;
   $output .= '    <td>'.formatDateInput('date', $params['date']).'</td>'.LF;
   $output .= '  </tr>'.LF;
   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Mail template').'</td>'.LF;
   $output .= '    <td>'.getMailtemplateSelection('template',
      ($params['template'] == '') ? -1 : $params['template'], 
      array(-1 => _('None'))).'</td>'.LF;
   $output .= '  </tr>'.LF;
   $output .= '  <tr valign="top">'.LF;
   $output .= '    <td>'._('Short description').'</td>'.LF;
   $output .= '    <td><input type="text" name="desc" size="60" value="'.
      strip_tags($params['desc']).'"><em>'._('Leave empty for hostname').
      '</em></td>'.LF;
   $output .= '  </tr>'.LF;
	$output .= '  <tr valign="top">'.LF;
	$output .= '    <td>'._('Logging').'</td>'.LF;
	$output .= '    <td colspan="2"><textarea name="logging" cols="80" '.
      'rows="8">'.$params['logging'].'</textarea></td>'.LF;
	$output .= '  </tr>'.LF;
   $output .= '</table>'.LF;

   return $output;
}


/* Produces a simple HTML edit form to edit an IP address' data.
 * Will be expanded in the future.
 * Requires an incident ID and an IP address in dot notation (could
 * also have been a single incident_address ID, would be better).
 * Returns a HTML formatted string.
 */
function editIPform($incidentid,$ip) {
   if (!is_numeric($incidentid)) {
      return '';
   }
   // Retrieve the full address assignment data.
   $res = db_query(q('SELECT incident_addresses.id as id,
                ip,hostname,constituency,addressrole,
                to_char(added,\'YYYY-MM-DD HH24:MI\') as added,
                u1.email as addedby,
                to_char(updated,\'YYYY-MM-DD HH24:MI\') as updated,
                u2.email as updatedby
      FROM      incident_addresses
      FULL JOIN users u1 ON u1.id=addedby
      LEFT JOIN users u2 ON u2.id=updatedby
      WHERE     incident=%incidentid AND ip=%ip
      ', array('%incidentid'=>$incidentid, '%ip'=>db_masq_null($ip))))
   or airt_error('DB_QUERY', __FILE__.':'.__LINE__,
                 t(_('Could not fetch IP address details')));
   if (db_num_rows($res)>0) {
      $row = db_fetch_next($res);
      $id           = $row['id'];
      $ip           = $row['ip'];
      $addressrole  = $row['addressrole'];
      $hostname     = $row['hostname'];
      $constituency = $row['constituency'];
      $added        = $row['added'];
      $addedby      = $row['addedby'];
      $updated      = $row['updated'];
      $updatedby    = $row['updatedby'];
   } else {
      die(_('Could not find assigned IP address.'));
   }

   $o = '<div class="details-ip-edit">'.LF;
   $o .= sprintf('<form method="POST" action="%s">'.LF, $_SERVER['PHP_SELF']);
   $o .= '<input type="HIDDEN" name="action" value="updateip">'.LF;
   $o .= sprintf('<input type="HIDDEN" name="id" value="%d">'.LF, $id);
   $o .= sprintf('<input type="HIDDEN" name="ip" value="%s">'.LF, $ip);
   $o .= sprintf('<input type="HIDDEN" name="addressrole" value="%s">'.LF, $addressrole);
   $o .= sprintf('<input type="HIDDEN" name="incidentid" value="%d">'.LF, $incidentid);
   $o .= '<table>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('IP address').'</td>'.LF;
   $o .= '    <td>'.$ip.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Host name').'</td>'.LF;
   $o .= '    <td>'.$hostname.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Role in incident').'</td>'.LF;
   $o .= '    <td>'.getAddressRolesSelection('addressrole',$addressrole, array(''=>_('Not set'))).'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Constituency').'</td>'.LF;
   $o .= '    <td>'.getConstituencySelection('constituency',$constituency).'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Added').'</td>'.LF;
   $o .= '    <td>'.$added.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Added by').'</td>'.LF;
   $o .= '    <td>'.$addedby.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Updated').'</td>'.LF;
   $o .= '    <td>'.$updated.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Updated by').'</td>'.LF;
   $o .= '    <td>'.$updatedby.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>&nbsp;</td>'.LF;
   $o .= '    <td><input type="submit" value="'._('Update').'"></td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '</table>'.LF;
   $o .= '</form>'.LF;
   $o .= '</div>'.LF;

   return $o;
}


/* Attempts to update the incident_addresses table with new data.
 * Works on a unique ID for the combination (incident,ipadress).
 * Returns false of failure, true on success.
 */
function updateIPofIncident($id,$constituency,$addressrole) {
   if (!is_numeric($id) || !is_numeric($constituency) || !is_numeric($addressrole)) {
      return false;
   }
   $q = q('UPDATE incident_addresses
      SET constituency=%constituency,
          addressrole=%addressrole,
          updated=CURRENT_TIMESTAMP,
          updatedby=%updatedby
      WHERE id=%id', array(
         '%constituency'=>$constituency,
         '%addressrole'=>$addressrole,
         '%updatedby'=>$_SESSION['userid'],
         '%id'=>$id));
   $res = db_query($q)
   or airt_error('DB_QUERY', __FILE__.':'.__LINE__,
                 t(_('Could not update IP with incident')));
   return true;
}

/* Update basic incident data. For convenience reasons, all data fields
 * except the ID may be left unspecified (== ""), in which case they will
 * not be touched. If all fields are "", no update is done at all.
 * Relevant automatic fields will be generated accordingly.
 * Returns void.
 */
function updateIncident($id,$params = array()) {
   // Problem case: no ID given.
   if (empty($id)) {
      die(_('No ID given to update request.'));
   }

   // Compile the variable part of the SET clause.
   $set = '';
   if (!empty($params['state'])) {
      $set .= sprintf('state=%d,',$params['state']);
   }
   if (!empty($params['status'])) {
      $set .= sprintf('status=%d,',$params['status']);
   }
   if (!empty($params['type'])) {
      $set .= sprintf('type=%d,',$params['type']);
   }
   if (!empty($params['date'])) {
      $set .= sprintf('incidentdate=\'%s\',', db_escape_string(
      date('Y-m-d H:i:s', $params['date'])));
   }
   if (!empty($params['logging'])) {
      $set .= sprintf('logging=\'%s\',',db_escape_string(
         $params['logging']));
   }
   if (!empty($params['desc'])) {
      $set .= sprintf('short_desc=\'%s\',',db_escape_string(
         strip_tags($params['desc'])));
   } else {
      $set .= sprintf('short_desc=NULL,');
   }
   if (!empty($params['template'])) {
      $set .= sprintf('pref_templ=\'%s\',',db_escape_string(
         strip_tags($params['template'])));
   } else {
      $set .= sprintf('pref_templ=NULL,');
   }

   // Add the fixed part (we know for sure there is at least one variable
   // part).
   $set .= sprintf('updated=CURRENT_TIMESTAMP,updatedBy=%d', $_SESSION['userid']);
   // Create the whole query.

   db_query(q('UPDATE incidents SET %set WHERE id=%id', array('%set'=>$set, '%id'=>$id)));

  return;
}

/* Mass update a list of incidents. Only status and state can be given and
 * will be set to each incident ID in the list.
 * Returns void.
 */
function updateIncidentList($incidentList,$params) {
   foreach ($incidentList as $id) {
      updateIncident($id,$params);
   }
   return;
}

/* Return an associative array with incident IDs that are related to the
 * given IP address.
 * Input: an IP address in dotted-decimal notation.
 * Output: array[id]='#000132  Compromised   2005-10-11 12:12'.
 */
function getIncidentsByIP($ip) {
   // Fetch the relevant incidents and at the same time some basic incident
   // data for the nice summary string.
   $ip = db_escape_string($ip);
   $q = "SELECT incident as incident,
                incident_types.label as type,
                to_char(incidents.created,'YYYY-MM-DD HH24:MI') as created
         FROM incident_addresses,incidents,incident_types
         WHERE ip='$ip'
           AND incident_addresses.incident=incidents.id
           AND incidents.type = incident_types.id
         ORDER BY incident";
   $res = db_query($q) or airt_error('DB_QUERY',__FILE__.':'.__LINE__,
                             t(_('Could not get related incidents')));
   $out = array();
   while ($row = db_fetch_next($res)) {
      $incidentID = $row['incident'];
      $type       = $row['type'];
      $created    = $row['created'];
      // Create the site-specific incident ID notation.
      $siteIncidentID = encode_incidentid($incidentID);
      // Assume site-specific ID has fixed length.
      $summary = sprintf('%s  %-15s  %s',$siteIncidentID,$type,$created);
      $out[$row['incident']] = $summary;
   }
   return $out;
}// getIncidentsByIP


/** Return an associative array with incident IDs that belong to the 
 * current constituency.
 * @param $constituencyID: the ID of a constituency
 * @return array[incidentid]='#000132  Compromised   2005-10-11 12:12'.
 */
function getIncidentsByConstituency($constituencyID) {
   if (!is_numeric($constituencyID)) {
      return array();
   }
   $q = q('SELECT incident as incident,
                t.label as type,
                to_char(i.created, \'YYYY-MM-DD HH24:MI\') as created
         FROM   incident_addresses a
         LEFT JOIN incidents i ON (a.incident = i.id)
         LEFT JOIN incident_types t ON (i.type = t.id)
         WHERE  constituency=%consid
         ORDER BY incident', array('%consid'=>$constituencyID));
   $res = db_query($q);
   if (!$res) {
      airt_error('DB_QUERY',__FILE__.':'.__LINE__);
      return array();
   }
   $out = array();
   while ($row = db_fetch_next($res)) {
      $out[$row['incident']] = sprintf('%s  %-15s  %s', 
         encode_incidentID($row['incident']), $row['type'], $row['created']);
   }
   return $out;
}


/* Return an associative array with address roles.
 * Input: optionally, an array with extra address roles that are not from
 * the database. Typically, "Please select a role"-like inert selections.
 * Array format: array[extra_id]=extra_label. The extra states are prefixed
 * before the states from the database.
 * Output: array[id]=label.
 */
function getAddressRoles($extras=array()) {
   $res = db_query('SELECT id, label FROM address_roles ORDER BY id')
   or airt_error('DB_QUERY', __FILE__.':'.__LINE__,
                 t(_('Could not get address roles')));

   $out=$extras;
   while ($row = db_fetch_next($res)) {
      $out[$row['id']]=$row['label'];
   }
   return $out;
}

/* Return an HTML SELECT box containing valid choices for address roles.
 * Input: name = The HTML name of the selection box.
 *        default = Optionally, the ID of the default selection. 
 *        extras = Optionally, an array [id]=>label with extra states that
 *                 do not come from the database, and that are prefixed
 *                 before the database states (typically "Select State").
 * Output: HTML string with full <select> block.
 */
function getAddressRolesSelection($name, $default='', $extras=array()) {
   $output = t('<select name="%name">\n', array(
      '%name'=>htmlentities($name)
   ));
   $roles = getAddressRoles($extras);
   foreach ($roles as $i=>$l) {
      $output .= t('<option value="%id" %selected>%label</option>\n', array(
          '%id'=>htmlentities($i), 
          '%selected'=>($i == $default) ? "SELECTED" : '', 
          '%label'=>htmlentities($l)
      ));
   }
   $output .= "</select>";
   return $output;
}

/* Returns the label associated with an address role id, or an empty string if
 * no such role exists.
 */
function getAddressRoleByID($id) {
   $addressroles = getAddressRoles();
   if (array_key_exists($id, $addressroles)) {
      return $addressroles[$id];
   } else {
      return '';
   }
}

/** Retrieve 3rd-party incident IDs.
 * \param [in] $incidentid  Internal incident ID
 *
 * \return Will return an array of external incident identifiers. The array may
 * be empty if none exist.
 */
function getExternalIncidentIDs($incidentid='') {
   if (!is_numeric($incidentid)) {
      return array();
   }
   $out = array();
   $q = q('select incidentid, externalid from external_incidentids where incidentid=%id', array('%id'=>$incidentid));
   $res = db_query($q);
   while ($row = db_fetch_next($res)) {
      $out[] = $row['externalid'];
   }
   return $out;
}

/** Add 3rd-party incident IDs.
 * \param [in] $incidentid   Internal incident id.
 * \param [in] $externalids  External incident ids. If $externalids is a string, only one will be added, if it is an array, all will be added.
 * \return true on success, false on failure.
 */
function addExternalIncidentIDs($incidentid='', $externalids) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   if (is_string($externalids)) {
      $externalids = array($externalids);
   }
   $res = db_query('begin transaction');
   foreach ($externalids as $extid) {
      db_free_result($res);
      $res = db_query(q('insert into external_incidentids (incidentid, externalid) values (%id, \'%extid\')', array('%id'=>$incidentid, '%extid'=>db_escape_string($extid))));
      if ($res == false) {
         db_query('rollback');
         return false;
      }
      addincidentcomment(array(
         'comment'=>t(_('External identifier %extid added.'),
            array('%extid'=>$extid)),
         'incidentid'=>$incidentid));

   }
   return db_query('end transaction');
}

/** Remove 3rd-party incident IDs.
 * \param [in] $incidentid   Internal incident id.
 * \param [in] $externalids  External incident ids. If $externalids is a string, only one will be removed, if it is an array, all will be removed.
 * \return true on success, false on failure.
 */
function deleteExternalIncidentIDs($incidentid='', $externalids) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   if (is_string($externalids)) {
      $externalids = array($externalids);
   }
   $res = db_query('begin transaction');
   foreach ($externalids as $extid) {
      db_free_result($res);
      $res = db_query(q('delete from external_incidentids where incidentid=%id and externalid=\'%extid\'', array('%id'=>$incidentid, '%extid'=>db_escape_string($extid))));
      if ($res == false) {
         db_query('rollback');
         return false;
      }
      addincidentcomment(array(
         'comment'=>t(_('External identifier %extid removed.'),
            array('%extid'=>$extid)),
         'incidentid'=>$incidentid));
   }
   return db_query('end transaction');
}

/** Find incident ID for corresponding ticket number */
function getIncidentIDsByExternalID($externalid) {
   $output = array();
	if (!is_string($externalid)) {
		return false;
	}
	$q = q('select incidentid from external_incidentids '.
	       'where externalid=\'%extid\'', 
		    array('%extid'=>db_escape_string($externalid)));
	$res = db_query($q);
	if ($res == false) {
	   return false;
	}
	while (($row = db_fetch_next($res)) !== false) {
	   $output[] = $row['incidentid'];
	}
	return $output;
}

/** Update JavaScript in incidents pages.
 * This function will output HTML containing JavaScript. The JavaScript is a
 * non-essential part of AIRT, but it can make life easier at times.
 */
function updateCheckboxes() {
   // Used to compile some JavaScript that is needed in many places.
   global $toggle;

   $sortkey = strip_tags(fetchFrom('REQUEST','sortkey'));
   defaultTo($sortkey,'incidentid');

   $page = fetchFrom('REQUEST','page','%d');
   defaultTo($page,1);

   defaultTo($toggle,0);

   $filter = fetchFrom('REQUEST','filter[]');
   defaultTo($filter,array('state'=>-1, 'status'=>getIncidentStatusDefault()));
   if (!is_numeric($filter['state'])) {
      die(_('Invalid parameter type in ').__LINE__);
   }
   if (!is_numeric($filter['status'])) {
      die(_('Invalid parameter type in ').__LINE__);
   }

   // check for valid values of sortkey
   if (FALSE === array_search($sortkey, array(
      'constituency', 'hostname', 'status', 'state', 'type', 'created',
      'lastupdated', 'incidentid'))) {
      airt_msg(t(_('Invalid sort key (%key)'), array('%key'=>
      strip_tags($sortkey))));
      exit;
   }
   $urlsuffix=strtr(
     '&page=%p&filter[state]=%sf&filter[status]=%stf&sortkey=%sk&toggle=%t',
     array(
      '%p'=>$page,
      '%t'=>$toggle,
      '%sf'=>$filter['state'],
      '%stf'=>$filter['status'],
      '%sk'=>$sortkey));
   $output = '<SCRIPT Language="JavaScript">'.LF;
   $output .= 'function updateCheckboxes() {'.LF;
   $output .= '   if (!(document.jsform.email.value == "")) {'.LF;
   $output .= '      document.jsform.addifmissing.checked = true;'.LF;
   $output .= '      if (typeof document.jsform.sendmail != "undefined") document.jsform.sendmail.checked = true;'.LF;
   $output .= '   } else {'.LF;
   $output .= '      document.jsform.addifmissing.checked = false;'.LF;
   $output .= '   }'.LF;
   $output .= '}'.LF;
   $output .= 'function checkAll() {'.LF;
   $output .= '   window.location = "'.$_SERVER['PHP_SELF'].'?action=toggle'.$urlsuffix.'"'.LF;
   $output .= '}'.LF;

   $output .= '</SCRIPT>'.LF;
   return $output;
} // updateCheckboxes


/** Format the form for batch creation of incidents.
 */
function formatIncidentBulkForm(&$check) {
   $constituency = $email = $addressrole = '';
   $address = strip_tags(fetchFrom('SESSION','active_ip'));

   if (array_key_exists("constituency_id", $_SESSION)) {
      $constituency = $_SESSION["constituency_id"];
   }
   if (array_key_exists("current_email", $_SESSION)) {
      $email = $_SESSION["current_email"];
   }

   if (defined('CUSTOM_FUNCTIONS') && function_exists('custom_default_addressrole')) {
      $addressrole = custom_default_addressrole($address);
   }
   $output =  formatBasicIncidentData();
   $output .= '<h3>'._('Affected IP addresses').'</h3>'.LF;
   $output .= "<table cellpadding=\"4\">\n";
   $output .= "<tr>\n";
   $output .= "  <td valign=\"top\">hostname or ip address</td>\n";
   $output .= "  <td><textarea cols=\"30\" rows=\"15\" name=\"addresses\"></textarea>\n";
   $output .= "</tr>\n";
   $output .= "<tr>\n";
   $output .= t("<td>addressrole</td><td>%addressrole</td>\n",array('%addressrole'=>getAddressRolesSelection('addressrole', $addressrole)));
   $output .= "</tr>\n";

   $output .= "</table>\n";
 
   $output .= "<p/>\n";

   return $output;
} // show IncidentBulkForm


/** Format the incident details form.
 * This function is called only when creating a new incident report
 * from scratch.
 */
function formatIncidentForm(&$check) {
   $constituency = $name = $email = $type = $state = $status 
     = $addressrole = '';

   $address      = strip_tags(fetchFrom('SESSION','active_ip'));
	$constituency = 0;
	$email        = '';
	if ($address != '') {
	   $networkid = categorize($address);
		$constituency = getConstituencyIDbyNetworkID($networkid);
		$cc = array();
		foreach (getConstituencyContacts($constituency) as $c) {
		   $cc[] = $c['email'];
		}
		$email = implode(',',$cc);
	}

   if (defined('CUSTOM_FUNCTIONS') &&
             function_exists('custom_default_addressrole')) {
      $addressrole = custom_default_addressrole($address);
   }

   $output =  formatBasicIncidentData(array(
      'type'=>$type,
      'state'=>$state,
      'status'=>$status));

	if (defined('OTRS_ACTIVE') && OTRS_ACTIVE === true) {
	   $tn = strip_tags(fetchFrom('SESSION', 'otrs_tn'));
		if (!empty($tn)) {
	      unset($_SESSION['otrs_tn']);
		   $output .= '<input type="checkbox" CHECKED name="otrs-link">'.LF;
			$output .= '<input type="hidden" name="otrs_tn" value="'.$tn.'">'.LF;
			$output .= t(_('Link to OTRS ticket %tn'), array('%tn'=>$tn));
		}
	}

   $output .= '<h3>'._('Affected IP addresses').'</h3>'.LF;
   $output .= '<table cellpadding=4>'.LF;
   $output .= '<tr>'.LF;
   $output .= '  <td>'._('Hostname or IP address').'</td>'.LF;
   $output .= t('  <td><input type="text" size=30 name="address" '.
                'value="%address">%addressrole</td>'.LF, array(
      '%address'=>$address,
      '%addressrole'=>getAddressRolesSelection('addressrole', $addressrole)
   ));
   $output .= '</tr>'.LF;
   $output .= '<tr>'.LF;
   $output .= '  <td>'._('Constituency').'</td>'.LF;
   $output .= '  <td>'.getConstituencySelection('constituency',
       $constituency).'</td>'.LF;
   $output .= '</tr>'.LF;
   $output .= '</table>'.LF;
 
   $output .= '<h3>'._('Affected users').'</h3>'.LF;
   $output .= '<table bgcolor="#dddddd" cellpadding=2 border=0>'.LF;
   $output .= '<tr>'.LF;
   $output .= '  <td>'._('E-mail address of user').':</td>'.LF;
   $output .= '  <td><input onChange="updateCheckboxes()" type="text" '.
              'size=40 name="email" value="'.$email.'"></td>'.LF;
   $output .= '  <td>'.getMailtemplateSelection('mailtemplate_override', -1,
      array(-1 => _('Do not override'))).'</td>'.LF;
   $output .= '</tr>'.LF;
   $output .= '</table>'.LF;

   if ($email != '') {
      $check = true;
   }
   $output .= t('<input type="checkbox" name="addifmissing" %checked>'.LF,
      array('%checked'=>($check == false) ? '' : 'checked'));
   $output .= '  '._('If checked, create user if email address unknown').LF;

   $output .= '<p/>'.LF;

   return $output;
} // show Incidentform


/* Return a formatted string representing an HTML form for editing incident
 * details.
 */
function formatEditForm() {
   $incident = getIncident(fetchFrom('SESSION','incidentid', '%d'));
   $address = strip_tags(fetchFrom('SESSION','active_ip'));
   $constituency = fetchFrom('SESSION','constituency_id', '%d');

   // Basic incident data block.
   $output = '<div class="details-basic">'.LF;
   $output .= '<form action="'.$_SERVER['PHP_SELF'].'" method="post">'.LF;
   $output .= '<h3>'._('Basic incident data').'</h3>'.LF;
   $output .= formatBasicIncidentData(array(
      'type'=>$incident['type'],
      'state'=>$incident['state'],
      'status'=>$incident['status'],
      'logging'=>$incident['logging'],
      'date'=>$incident['incidentdate'],
      'template'=>$incident['template'],
      'desc'=>$incident['desc']));
   $output .= '<input type="submit" name="action" value="update">'.LF;
   $output .= '</form>'.LF;
   $output .= '</div> <!-- details-basic -->'.LF;

   // Affected IP addresses block. First the header part.
   $output .= '<div class="details-ip">'.LF;
   $output .= '<h3>'._('Affected IP addresses').'</h3>'.LF;
   $output .= '<table cellpadding=4>'.LF;
   $output .= '<tr>'.LF;
   $output .= '   <td>'._('IP Address').'</td>'.LF;
   $output .= '   <td>'._('Hostname').'</td>'.LF;
   $output .= '   <td>'._('Constituency').'</td>'.LF;
   $output .= '   <td>'._('Role in incident').'</td>'.LF;
   $output .= '   <td>'._('Edit').'</td>'.LF;
   $output .= '   <td>'._('Remove').'</td>'.LF;
   $output .= '</tr>'.LF;
   $conslist = getConstituencies();
   // Then the IP address list.
   foreach ($incident['ips'] as $address) {
      $output .= '<tr>'.LF;
      $output .= sprintf(
        '  <td><a href="search.php?action=search&q=%s">%s</a></td>'.LF,
         urlencode($address['ip']),
         $address['ip']);
      $_SESSION['active_ip'] = $address['ip'];
      $output .= sprintf(
         '  <td>%s</td>'.LF,
         $address['hostname']==''?_('Unknown'):
                       @gethostbyaddr(@gethostbyname($address['ip'])));
      $cons = getConstituencyIDbyNetworkID(categorize($address['ip']));
      $output .= sprintf('  <td>%s</td>'.LF, $conslist[$cons]['label']);
      $output .= t('  <td>%addressrole</td>'.LF,
         array(
            '%addressrole'=>getAddressRoleByID($address['addressrole'])));
      $output .= sprintf('  <td><a href="'.$_SERVER['PHP_SELF'].
                         '?action=editip&ip=%s">'._('edit').'</a></td>'.LF,
         urlencode($address['ip']));
      $output .= t('  <td><a href="'.$_SERVER['PHP_SELF'].
                   '?action=deleteip&incidentid=%incident&ip=%ip&addressrole=%addressrole">'.
                   _('remove').'</a></td>'.LF,
         array(
            '%ip'=>urlencode($address['ip']),
            '%incident'=>urlencode($incident['incidentid']),
            '%addressrole'=>urlencode($address['addressrole'])));
      $output .= '</tr>'.LF;
   }
   $output .= '</table>'.LF;

   // And lastly, the IP address footer.
   $output .= '<p/>'.LF;
   $output .= '<form action="'.$_SERVER['PHP_SELF'].'" method="POST">'.LF;
   $output .= '<input type="hidden" name="action" value="addip">'.LF;
   $output .= '<table bgColor="#DDDDDD" cellpadding=2>'.LF;
   $output .= '<tr>'.LF;
   $output .= '  <td>'._('IP Address').'</td>'.LF;
   $output .= '  <td><input type="text" name="ip" size=40></td>'.LF;
   $output .= t('<td>%addressrole</td>', array(
      '%addressrole' => getAddressRolesSelection('addressrole')
   ));
   $output .= '  <td><input type="submit" value="'._('Add').'"></td>'.LF;
   $output .= '</tr>'.LF;
   $output .= '</table>'.LF;
   $output .= '</form>'.LF;
   $output .= '</div><!-- details-ip -->'.LF;

   // Affected users block.
   $output .= '<div class="details-user">'.LF;
   $output .= '<h3>'._('Affected users').'</h3>'.LF;
   $output .= '<form action="'.$_SERVER['PHP_SELF'].'" method="POST">'.LF;
   $output .= t('<input type="hidden" name="incidentid" value="%incidentid">',
      array('%incidentid'=>$incident['incidentid']));
   $output .= '<table cellpadding=4>'.LF;
   // re-initialise active users
   $_SESSION['current_name'] = '';
   $_SESSION['current_email'] = '';
   foreach ($incident['users'] as $user) {
      $u = getUserByUserId($user);
      if ($_SESSION['current_email'] == '') {
         $_SESSION['current_email'] = $u['email'];
      } else {
         $_SESSION['current_email'] .= ','.$u['email'];
      }
      if ($u['firstname'] == '' && $u['lastname'] == '') {
         $name = $u['email'];
      } else {
         $name = $u['firstname'].' '.$u['lastname'];
      }
      if ($_SESSION['current_name'] == '') {
         $_SESSION['current_name'] = $name;
      } else {
         $_SESSION['current_name'] .= ','.$name;
      }
      $override = getMailtemplateOverride($incident['incidentid'], $u['id']);
      $output .= t('<tr>'.LF);
      $output .= t('  <td><input type="checkbox" name="to[]" value="%userid"></td>', array('%userid'=>$user));
      $output .= t('  <td>%email</td>', array('%email'=>$u['email'])).LF;
      $output .= t('  <td>').LF;
      $output .= getMailtemplateSelection(
         'template['.strip_tags($user).']', 
         ($override==false) ? -1 : $override,
         array('-1' => _('None'))).LF;
      $output .= '</tr>'.LF;
   }
   $output .= '</table>'.LF;
   $output .= '<input type="submit" name="action" value="'._('Mail').'">'.LF;
   $output .= '<input type="submit" name="action" value="'._('Remove').'">'.LF;
   $output .= '<input type="submit" name="action" value="'.
      _('Update overrides').'">'.LF;
   $output .= '</form>'.LF;
   $output .= '<p/>'.LF;
   // Affected user list footer. First get som data.
   $userid = fetchFrom('SESSION','current_userid', '%d');
   if ($userid!='') {
      $u = getUserByUserID($userid);    // Cannot cope with empty userids.
      if (sizeof($u) > 0) {
         $lastname = $u[0]['lastname'];
         $email = $u[0]['email'];
      }
   }
   $email = strip_tags(fetchFrom('SESSION','current_email'));
   // Then build the form.
   $output .= '<form name="jsform" action="'.$_SERVER['PHP_SELF'].
              '" method="POST">'.LF;
   $output .= '  <input type="hidden" name="action" value="adduser">'.LF;
   $output .= '  <table bgColor="#DDDDDD" cellpadding=2 border=0>'.LF;
   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Email address of user').':</td>'.LF;
   $output .= '    <td><input onChange="updateCheckboxes()" type="text" '.
              'size=40 name="email" value="'.$email.'"></td>'.LF;
   $output .= ' <td>'.
      getMailtemplateSelection('template',$incident['template']).'</td>'.LF;
   $output .= '  </tr>'.LF;
   $output .= '</table>'.LF;
   $output .= '<input type="submit" value="'._('Add').'">'.LF;
   $output .= t('  <input onChange="updateCheckboxes()" type="checkbox" name="addifmissing" %checked>', array(
      '%checked'=>($email=='')?'':'CHECKED')).LF;
   $output .= '  '._('If checked, create user if email address unknown').LF;
   $output .= '</form>'.LF;
   $output .= '</div><!-- details-user -->'.LF;

   $output .= '<h3>'._('Attachments').'</h3>'.LF;
   if (fetchAttachments($incident['incidentid'], $attachments, $error) ==
      false) {
      die($error);
   }
   $output .= '<table>'.LF;
   foreach ($attachments as $aid=>$a) {
      $output .= '<tr>'.LF;
      $output .= '<td>'.$a['filename'].' ('.$a['content-type'].')</td>'.LF;
      $output .= t('<td><a href="%url?action=download&attachment=%id">'._('download').'</a></td>'.LF, array(
         '%url' => BASEURL.'/incident.php',
         '%id' => $aid
      ));
      $output .= t('<td><a onclick="return confirm(\'Are you sure that you want to delete this attachment?\')" href="%url?action=rmattach&attachment=%id">'._('delete').'</a></td>'.LF, array(
         '%url' => BASEURL.'/incident.php',
         '%id' => $aid
      ));
      $output .= '</tr>'.LF;
   }
   $output .= '</table>'.LF;
   $output .= '<form enctype="multipart/form-data" method="POST">'.LF;
   $output .= '<input type="hidden" name="action" value="upload">'.LF;
   $output .= '<input type="hidden" name="incidentid" value="'.
      strip_tags($incident['incidentid']).'">'.LF;
   $output .= '<input size="40" type="file" name="file">'.LF;
   $output .= '<input type="submit" value="Upload">'.LF;
   $output .= '</form>'.LF;
   return $output;
} // formatEditForm


/* format the filter block in the page header */
function formatFilterBlock() {
   $filter = fetchFrom('REQUEST','filter[]');
# TODO These defaults need to come from the database.
   defaultTo($filter, array('state'=>-1, 'status'=>getIncidentStatusDefault()));
   if (!is_numeric($filter['state'])) {
      die(_('Invalid parameter type in ').__LINE__);
   }
   if (!is_numeric($filter['status'])) {
      die(_('Invalid parameter type in ').__LINE__);
   }

   $out = t(
      '<FORM method="POST">'.LF.
      '<table>'.LF.
      '<tr>'.LF.
      '   <td>'._('Status').'</td>'.LF.
      '   <td>'.
             getIncidentStatusSelection('filter[status]', $filter['status'],
             array(-1=>_('Do not filter'))).
      '   </td>'.LF.
      '</tr>'.LF.
      '<tr>'.LF.
      '   <td>'._('State').'</td>'.LF.
      '   <td>'.
             getIncidentStateSelection('filter[state]', $filter['state'],
             array(-1=>_('Do not filter'))).
      '   </td>'.LF.
      '</tr>'.LF.
      '<tr>'.LF.
      '  <td></td>'.LF.
      '  <td><INPUT TYPE="submit" VALUE="'._('Filter the List').'"></td>'.LF.
      '</tr>'.LF.
      '</table>'.LF.
      '</FORM>'.LF);
   return $out;
}// formatFilterBlock


/* format the details block in the page header */
function formatDetailBlock() {
   $out = t(
      '<form method="post">'.LF.
      '<table>'.LF.
      '<tr>'.LF.
      '  <td>'._('Incident #').'</td>'.LF.
      '  <td><INPUT TYPE="text" name="incidentid" size="7">'.LF.
      '</tr><tr>'.LF.
      '  <td></td>'.LF.
      '  <td><INPUT TYPE="submit" name="action" value="'.
            _('Show Details').'"></td>'.LF.
      '</tr>'.LF.
      '</table>'.LF.
      '</form>'.LF);
   return $out;
}

/* format the create incident(s) block in the page header */
function formatCreateIncidentBlock() {
   $out = t(
      '<form method="post">'.LF.
      '<INPUT TYPE="submit" Name="action" VALUE="'.
         _('Create New Incident').'"><p>'.LF.
      '<INPUT TYPE="submit" Name="action" VALUE="'.
         _('Create Many Incidents').'">'.LF.
      '</form>'.LF
   );
   return $out;
}


/* return a string containing the list overview page header, which contains
 * a few blocks horizontally next to each other.
 */
function formatListOverviewHeader() {
   // A style expression for the vertical separation lines between the
   // blocks.
   $out = t(
      '<div class="details-overview-header">'.LF.
      '<table>'.LF.
      '<tr valign="top">'.LF.
      '   <td>%filters</td>'.LF.
      '   <td>%details</td>'.LF.
      '   <td>%createIncident</td>'.LF.
      '</tr>'.LF.
      '</table>'.LF.
      '</div>'.LF,
      array(
         '%filters'=>formatFilterBlock(),
         '%details'=>formatDetailBlock(),
         '%createIncident'=>formatCreateIncidentBlock()));

   return $out;
}// formatListOverviewHeader


/* User interface component which formats a pager line. Take the total number
 * of incidents, the current page, and the number of incidents per page as
 * input
 */
function formatPagerLine($page, $numincidents, $pagesize=PAGESIZE) {
   global $sortkey;
   global $filter;

   if ($numincidents < $pagesize) {
      return '';
   }

   $urlprefix = '&sortkey='.$sortkey.
                '&filter[status]='.$filter['status'].
                '&filter[state]='.$filter['state'];
   $out = '';
   $numpages = (int) ceil($numincidents / $pagesize);

   if ($page == 1) {
      $out .= '<strong>'._('Previous').'</strong>&nbsp;';
   } else {
      $out .= t('<a href="%url?page=%prev%urlprefix">'.
                 _('Previous').'</a>&nbsp;',
                array(
         '%urlprefix'=>$urlprefix,
         '%url'=>$_SERVER['PHP_SELF'],
         '%prev'=>($page-1)));
   }
   for ($i = 1; $i <= $numpages; $i++) {
      if ($i == $page) {
         $out .= "<strong>$i</strong>&nbsp;";
      } else {
         $out .= t('<a href="%url?page=%i%urlprefix">'.$i.'</a>&nbsp;',
                 array(
                   '%i'=>$i,
                   '%urlprefix'=>$urlprefix,
                   '%url' => $_SERVER['PHP_SELF']));
      }
   }
   if ($page == $numpages) {
      $out .= '<strong>'._('Next').'</strong>&nbsp;';
   } else {
      $out .= t('<a href="%url?page=%next%urlprefix">'._('Next').'</a>&nbsp;',
              array(
               '%urlprefix'=>$urlprefix,
               '%url'=>$_SERVER['PHP_SELF'],
               '%next'=>($page+1)));
   }
   return $out;
}


/**
 * User interface component returning an HTML-formatted overview 
 * of open incidents.
 */
function formatListOverviewBody() {
   global $sortkey;
   global $filter;
   global $toggle;

   $filter = fetchFrom('REQUEST','filter[]');
   // NOTE: the $filter itself has a default, but if somebody manipulates
   // the $filter and e.g. removes the 'status' index, things go wrong here.
   // It looks secure, but it breaks.
   defaultTo($filter,
             array('status'=>getIncidentStatusDefault(), 'state'=>-1));

   $sortkey = strip_tags(fetchFrom('REQUEST','sortkey'));
   defaultTo($sortkey, 'incidentid');

   $page = fetchFrom('REQUEST','page','%d');
   defaultTo($page,1);

   $statuses = getIncidentStatus();
   if (array_key_exists($filter['status'], $statuses) && 
      $filter['status'] >= 0) {
      $sqlfilter = " WHERE s1.label = '".$statuses[$filter['status']]."'";
   } else {
      $sqlfilter = '';
   }

   $states = getIncidentStates();
   if (array_key_exists($filter['state'], $states) && 
      $filter['state'] >= 0) {
      if (empty($sqlfilter)) {
         $sqlfilter = " WHERE s2.label = '".$states[$filter['state']]."'";
      } else {
         $sqlfilter .= " AND s2.label = '".$states[$filter['state']]."'";
      }
   }
   if (empty($sqlfilter)) {
      $sqlfilter = " WHERE s1.label in ('open', 'stalled')";
   }
   switch ($sortkey) {
      case 'incidentid':
         $sqlfilter .= ' ORDER BY incidentid';
         break;
      case 'constituency':
         $sqlfilter .= ' ORDER BY constituency';
         break;
      case 'hostname':
         $sqlfilter .= ' ORDER BY hostname';
         break;
      case 'status':
         $sqlfilter .= ' ORDER BY status';
         break;
      case 'state':
         $sqlfilter .= ' ORDER BY state';
         break;
      case 'type':
         $sqlfilter .= ' ORDER BY type';
         break;
      case 'lastupdated':
         $sqlfilter .= ' ORDER BY updated';
         break;
      case 'created':
         $sqlfilter .= ' ORDER BY created';
         break;
      default:
         // Hmmm... should not happen. Manual intervention in the URL?
         $sqlfilter .= ' ORDER BY incidentid';
         $sortkey = 'incidentid';
   }
   $incidents = getOpenIncidents($sqlfilter);
   if (sizeof($incidents) == 0) {
        return '<I>'._('No incidents').'</I>';
   }

   // Now produce the list header.
   $out = t(
      '<form name="listform" action="%url" method="POST">'.LF.
      '<INPUT TYPE="hidden" name="action" value="massupdate">'.LF.
      '<table id="details-overview-body" width="100%">'.LF.'<tr>'.LF,
      array('%url'=>$_SERVER['PHP_SELF']));

   // 'Select all' checkbox. No <th> but <td> for visual alignment reasons.
   $out .= t(
      '   <td><input type="checkbox" %checked onChange="checkAll()"></td>'.LF,
      array('%url'=>$_SERVER['PHP_SELF'],
            '%checked'=>($toggle==1)?"CHECKED":""));

   // 'Incident ID' column header. Clickable if not the current sort key.
   if ($sortkey == 'incidentid') {
      $out .= t('   <th>'._('Incident ID').'</th>'.LF);
   } else {
      $out .= t('   <th><a href="%url?sortkey=incidentid&filter[status]=%sf'.
                '&filter[state]=%stf&page=1">%heading</a></th>'.LF, 
         array('%url'=>$_SERVER['PHP_SELF'],
               '%sf'=>$filter['status'],
               '%heading'=>_('Incident ID'),
               '%stf'=>$filter['state']));
   }

   // 'Constituency' column header. Clickable if not the current sort key.
   if ($sortkey == 'constituency') {
      $out .= t('   <th>'._('Constituency').'</th>'.LF);
   } else {
      $out .= t('   <th><a href="%url?sortkey=constituency&filter[status]=%sf'.
                '&filter[state]=%stf&page=1">%heading</a></th>'.LF, 
         array('%url'=>$_SERVER['PHP_SELF'],
               '%sf'=>$filter['status'],
               '%heading'=>_('Constituency'),
               '%stf'=>$filter['state']));
   }

   // 'Hostname' column header. Clickable if not the current sort key.
   if ($sortkey == 'hostname') {
      $out .= t('   <th>'._('Host name').'</th>'.LF);
   } else {
      $out .= t('   <th><a href="%url?sortkey=hostname&filter[status]=%sf'.
                '&filter[state]=%stf&page=1">%heading</a></th>'.LF, 
         array('%url'=>$_SERVER['PHP_SELF'],
               '%sf'=>$filter['status'],
               '%heading'=>_('Host name'),
               '%stf'=>$filter['state']));
   }

   // 'Status' column header. Clickable if not the current sort key.
   if ($sortkey == 'status') {
      $out .= t('   <th>'._('Status').'</th>'.LF);
   } else {
      $out .= t('   <th><a href="%url?sortkey=status&filter[status]=%sf'.
                '&filter[state]=%stf&page=1">%heading</a></th>'.LF, 
         array('%url'=>$_SERVER['PHP_SELF'],
               '%sf'=>$filter['status'],
               '%heading'=>_('Status'),
               '%stf'=>$filter['state']));
   }

   // 'State' column header. Clickable if not the current sort key.
   if ($sortkey == 'state') {
      $out .= t('   <th>'._('State').'</th>'.LF);
   } else {
      $out .= t('   <th><a href="%url?sortkey=state&filter[status]=%sf'.
                '&filter[state]=%stf&page=1">%heading</a></th>'.LF, 
         array('%url'=>$_SERVER['PHP_SELF'],
               '%sf'=>$filter['status'],
               '%heading'=>_('State'),
               '%stf'=>$filter['state']));
   }

   // 'Type' column header. Clickable if not the current sort key.
   if ($sortkey == 'type') {
      $out .= t('   <th>'._('Type').'</th>'.LF);
   } else {
      $out .= t('   <th><a href="%url?sortkey=type&filter[status]=%sf'.
                '&filter[state]=%stf&page=1">%heading</a></th>'.LF, 
         array('%url'=>$_SERVER['PHP_SELF'],
               '%sf'=>$filter['status'],
               '%heading'=>_('Type'),
               '%stf'=>$filter['state']));
   }

   if ($sortkey == 'created') {
      $out .= t('   <th>'._('Created').'</th>'.LF);
   } else {
      $out .= t('   <th><a href="%url?sortkey=created&filter[status]=%sf'.
                '&filter[state]=%stf&page=1">%heading</a></th>'.LF, 
         array('%url'=>$_SERVER['PHP_SELF'],
               '%sf'=>$filter['status'],
               '%heading'=>_('Created'),
               '%stf'=>$filter['state']));
   }


   // 'Last updated' column header. Clickable if not the current sort key.
   if ($sortkey == 'lastupdated') {
      $out .= t('   <th>'._('Updated').'</th>'.LF);
   } else {
      $out .= t('   <th><a href="%url?sortkey=lastupdated&filter[status]=%sf'.
                '&filter[state]=%stf&page=1">%heading</a></th>'.LF, 
         array('%url'=>$_SERVER['PHP_SELF'],
               '%sf'=>$filter['status'],
               '%heading'=>_('Updated'),
               '%stf'=>$filter['state']));
   }
   $out .= t('</tr>'.LF);

   // Prepare to run over the list of incidents that need display.
   $count = 0;
   $conslist = getConstituencies();
   foreach ($incidents as $id=>$data) {
      if ($count < PAGESIZE*($page-1) || $count >= PAGESIZE*($page)) {
         $count++;
         continue;
      }
      $hostline= $data['hostname'];
      $d = trim($data['desc']);
      if (!empty($d)) {
         $hostline = strip_tags($data['desc']);
      }
      $addresses = getAddressesForIncident($id);
      if (sizeof($addresses) > 0) {
         $constituency = $conslist[$addresses[0]['constituency']]['label'];
      } else {
         $constituency = '';
      }

      $out .= t('<tr bgcolor="%color">'.LF.
         '   <td>'.
         '<input type="checkbox" name="massincidents[]" %check value="%id">'.
         '</td>'.LF.
         '   <td>'.
         '<a href="%url?action=details&incidentid=%id">%incidentid</a>'.
         '</td>'.LF.
         '   <td>%constituency</td>'.LF.
         '   <td>%hostline</td>'.LF.
         '   <td>%status</td>'.LF.
         '   <td>%state</td>'.LF.
         '   <td>%type</td>'.LF.
         '   <td>%created</td>'.LF.
         '   <td>%updated</td>'.LF.
         '</tr>'.LF, array(
            '%color'=> ($count++%2 == 1) ? '#FFFFFF' : '#DDDDDD',
            '%url' => $_SERVER['PHP_SELF'],
            '%id' => $id,
            '%incidentid' => encode_incidentid($id),
            '%constituency' => $constituency,
            '%hostline' => $hostline,
            '%status' => $data['status'],
            '%state' => $data['state'],
            '%type' => $data['type'],
            '%check' => ($toggle == 1) ? 'CHECKED' : '',
            '%created' => Date('d M Y', $data['created']),
            '%updated' => Date('d M Y', $data['updated'])));
   } // foreach

   $out .= '</table><p>'.LF;
   $out .= '<div align="center">'.
           formatPagerLine($page, sizeof($incidents)).
           '</div>'.LF;
   return $out;
} // formatQueueOverviewBody


/* Returns a string which contains the incident overview list footer, two
 * blocks of menus/buttons.
 */
function formatListOverviewFooter() {
   // A style expression for the vertical separation lines between the
   // blocks.
   $style = 'style="border-right-width:1px; border-right-style:solid; '.
            'padding-left:10px; padding-right:10px"';

   $updatetable = t(
      '<table id="details-overview-footer">'.LF.
      '<tr>'.LF.
      '  <td>'._('New State').'</td>'.LF.
      '  <td>'.getIncidentStateSelection('massstate', 'null',
                          array('null'=>_('Leave Unchanged'))).'</td>'.LF.
      '</tr>'.LF.
      '<tr>'.LF.
      '  <td>'._('New Status').'</td>'.LF.
      '  <td>'.getIncidentStatusSelection('massstatus', 'null',
                          array('null'=>_('Leave Unchanged'))).'</td>'.LF.
      '</tr>'.LF.
      '<tr>'.LF.
      '  <td>'._('New Type').'</td>'.LF.
      '  <td>'.getIncidentTypeSelection('masstype', 'null',
                          array('null'=>_('Leave Unchanged'))).'</td>'.LF.
      '</tr>'.LF.
      '<tr>'.LF.
      '  <td>&nbsp;</td>'.LF.
      '  <td><input type="submit" value="'._('Update All Selected').'"></td>'.LF.
      '</tr>'.LF.
      '</table>'.LF);

   $actiontable = t(
      '<table>'.LF.
      '<tr>'.LF.
      '  <td>'._('Bulk mail').'</td>'.LF.
      '  <td>'.getMailTemplateSelection('template', 'null', array( 
         _('Use preferred template')=>_('Use preferred template')) 
         ).'</td>'.LF.
      '</tr>'.LF.
      '<tr>'.LF.
      '  <td>&nbsp;</td>'.LF.
      '  <td><input type="submit" name="action" value="'._('Prepare').'"></td>'.LF.
      '</tr>'.LF.
      '</table>'.LF);

   $out = t(
      '<table>'.LF.
      '<tr valign="top">'.LF.
      '  <td %style>%updatetable</td>'.LF.
      '  <td style="padding-left:10px">%actiontable</td>'.LF.
      '</tr>'.LF.
      '</table>'.LF.
      '</form>', array(
         '%actiontable'=>$actiontable,
         '%updatetable'=>$updatetable,
         '%style'=>$style
      ));
   return $out;
}


function getFormattedBasicIncidentData($incidentid='') {
   if (!is_numeric($incidentid)) {
      return false;
   }

   $incident = getIncident($incidentid);
   $out = '<h2>'._('Basic incident data').'</h2>';
   $out .= '<table>';
   $out .= t('<tr><td>'._('Incident ID').'</td><td>%incidentid</td></tr>', array(
      '%incidentid'=>normalize_incidentid($incidentid)));
   $out .= t('<tr><td>'._('Type').'</td><td>%type</td></tr>', array(
      '%type'=>getIncidentTypeDescr($incident['type'])));
   $out .= t('<tr><td>'._('Status').'</td><td>%status</td></tr>', array(
      '%status'=>getIncidentStatusDescr($incident['status'])));
   $out .= t('<tr><td>'._('State').'</td><td>%state</td></tr>', array(
      '%state'=>getIncidentStateDescr($incident['state'])));
   $out .= t('<tr valign="top"><td>'._('Logging').'</td><td><pre>%logging</pre></td></tr>', array(
      '%logging'=>htmlentities($incident['logging'])));
   $out .= '</table>';

   return $out;
}

/** User interface component for editing external incident ids.
 * \param [in] $incidentid  Identifier of the incident
 *
 * \return false on failure, true on success.
 */
function formatEditExternalids($incidentid='') {
   if (!is_numeric($incidentid)) {
      return false;
   }
   pageHeader(t(_('External incident identifiers of %id'), array(
      '%id'=>normalize_incidentid($incidentid))));

   $out = '<div class="details-external-ids-edit-basic">'.LF;
   $out .= getFormattedBasicIncidentData($incidentid);
   $out .= t('<a href="%url?action=details&incidentid=%id">'.
      _('Back to details').'</a>',
      array('%url'=>$_SERVER['PHP_SELF'], '%id'=>urlencode($incidentid)));
   $out .= '</div><!-- details-external-ids-edit-basic -->'.LF;

   $out .= '<div class="details-external-ids-extids">'.LF;
   $out .= '<h2>'._('External identifiers').'</h2>';
   foreach (getExternalIncidentIDS($incidentid) as $extid) {
      $out .= t('<a href="%url?action=delete_extid&incidentid=%id&extid=%extid">'._('Remove').'</a> ', array(
         '%url'=>$_SERVER['PHP_SELF'], 
         '%id' => $incidentid, 
         '%extid' => urlencode($extid)));
      $out .= $extid."<br/>\n";
   }
   $out .= '<p/><form>';
   $out .= t('<input type="hidden" name="incidentid" value="%id">', array(
      '%id'=>urlencode($incidentid)));
   $out .= _('New identifer:').' <input type="text" name="extid" size="25">';
   $out .= '<input type="submit" name="action" value="'.
      _('Add external identifier').'">';
   $out .= '</form>';
   $out .= '</div><!-- details-external-ids-extids -->'.LF;
   print $out;
   pageFooter();
}

/** Format an the edit ticket field */
function formatEditTicket($incidentid='') {
   if (!is_numeric($incidentid)) {
      return false;
   }
   pageHeader(t(_('Ticket number of %id'), 
      array('%id'=>normalize_incidentid($incidentid))));
   $out = getFormattedBasicIncidentData($incidentid);
   $out .= t('<a href="%url?action=details&incidentid=%id">'.
      _('Back to details').'</a>',
      array('%url'=>$_SERVER['PHP_SELF'], '%id'=>urlencode($incidentid)));
   $out .= '<h2>'._('Ticket numbers').'</h2>';
   foreach (getTicketNumbers($incidentid) as $tn) {
      $out .= t('<a href="%url?action=delete_tn&incidentid=%id&tn=%tn">'._('Remove').'</a> ', array(
         '%url'=>$_SERVER['PHP_SELF'], 
         '%id' => $incidentid,
         '%tn' => urlencode($tn)));
      $out .= $tn."<br/>\n";
   }
   $out .= '<p/><form>';
   $out .= t('<input type="hidden" name="incidentid" value="%id">', array(
      '%id'=>urlencode($incidentid)));
   $out .= _('New ticket number:').' <input type="text" name="tn" size="25">';
   $out .= '<input type="submit" name="action" value="'.
      _('Add ticket number').'">';
   $out .= '</form>';
   return $out;
}

/** Return an array containing OTRS ticket numbers for the provided incident
 * @param $incidentid Numerical incident id
 * @return an array containing the appropriate OTRS ticket numbers (may be empty)
 */
function getTicketNumbers($incidentid) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   $matches = array();
   $tn = array();
   foreach (getExternalIncidentIDs($incidentid) as $extid) {
      if (preg_match('/^_OTRS([0-9]+)/', $extid, $matches) > 0) {
         $tn[] = $matches[1];
      }
   }
   return $tn;
}

/** Return an array containing incidents.
 *
 */
function getOpenIncidentsByConstituency($cons) {
   if (!is_numeric($cons)) {
	   return array();
	}
	$out = array();
	$q = q('select distinct a.incident
		from incident_addresses a, incidents i, incident_status s
		where a.constituency = %cons
		and   i.id = a.incident
		and   i.status = s.id
		and   s.label = \'open\'
		', array('%cons'=>$cons));
	$res = db_query($q);
	while ($row = db_fetch_next($res)) {
	   $out[] = $row['incident'];
	}
	return $out;
}

/** Fetch name of preferred template for a given incident.
 *
 * @param $incidentid Numerical incident id
 * @return name of preferred mail template, or NULL if not set
 */
function getPreferredMailTemplateName($incidentid) {
   if (!is_numeric($incidentid)) {
      airt_msg(_('non-numeric incidentid'));
      return null;
   }
   $q = q('SELECT pref_templ FROM incidents WHERE id=%id',
	   array('%id'=>$incidentid));
   $res = db_query($q);
   if ($res == false) {
      airt_error('DB_QUERY', 'incidents.plib:'.__LINE__);
      airt_msg(_('database error'));
		reload('');
		return null;
   }
   if (db_num_rows($res) == 0) {
      airt_msg(_('No preferred template'));
      return null;
   } else {
      $row = db_fetch_next($res);
      return $row['pref_templ'];
   }
}

/** Check if an incident with the given ID exists in the database.
 * @param $incidentid ID of the incident
 * @return true if the incident exists; false if it does not
 */
function incidentExists($incidentid) {
   if (!is_numeric($incidentid)) {
	   return false;
   }
	$q = q('SELECT id FROM incidents WHERE id=%id',
	   array('%id'=>$incidentid));
	$res = db_query($q);
	if ($res == false) {
	   airt_error('DB_QUERY', 'incidents.plib:'.__LINE__);
		reload('');
		return false;
	}
	if (db_num_rows($res) == 0) {
	   return false;
	} else {
	   return true;
	}
}


/** Set name of preferred template for a given incident.
 *
 * @param $incidentid Numerical incident id
 * @param $template name of preferred mail template
 * @return true on success, false on failure
 */
function setPreferredMailTemplateName($incidentid, $template) {
   if (!is_numeric($incidentid)) {
	   return false;
   }
	if (!incidentExists($incidentid)) {
	   return false;
	}
	if (!templateExists($template)) {
	   return false;
	}
	$q = q('UPDATE incidents SET pref_templ=\'%templ\' WHERE id=%id',
	   array('%id'=>$incidentid, '%templ'=>db_escape_string($template)));
	$res = db_query($q);
	if ($res == false) {
	   airt_error('DB_QUERY', 'incidents.plib:'.__LINE__);
		reload('');
		return false;
	}
	return true;
}

/** Update the last_updated field of an incident 
 *
 * @param $incidentid ID of incident to be updated
 * @param &$timestamp timestamp to be set (optional; defaults to 'now'). 
 *     The value of $timestamp should be epoch seconds.
 * @return false on failure; true on success.
 */
function touchIncident($incidentid, $timestamp='') {
   if (!is_numeric($incidentid)) {
      return false;
   }
   $q = 'UPDATE incidents set updated=';
   if (empty($timestamp)) {
      $q .= 'CURRENT_TIMESTAMP';
   } else {
      if (!is_numeric($timestamp)) {
         return false;
      }
      $now = date('d M Y H:i:s', $timestamp);
      $q .= "to_timestamp('$now', 'DD Mon YYYY HH24:MI:SS')";
   }
   $q .= ' where id='.$incidentid;
   $res = db_query($q);
   if ($res === false) {
      return false;
   } else {
      return true;
   }
}

/* return an array of prevous incident ids for a given IP address
 */
function getPreviousIncidents($ip, &$out, &$error='') {
   $q = q('select i.id from incidents i, incident_addresses a 
          where i.id = a.incident
          and   a.ip = \'%ip\'', array('%ip'=>db_escape_string($ip)));
   $res = db_query($q);
   if ($res == false) {
      $error = db_errormessage();
      return false;
   }
   $out=array();
   while ($row = db_fetch_next($res)) {
      $out[] = $row['id'];
   }
   db_free_result($res);
   return true;
}

/* filter incidents by age;
 */
function filterIncidentsByAge($incidents, $maxage, &$out, &$error='') {
   if (sizeof($incidents) == 0) {
      $out = $incidents;
      return true;
   }
   $i = implode(',', $incidents);
   $limit = Date('Y-m-d H:i:s', time()-$maxage);
   $q = q('select id from incidents 
      where id in (%set)
      and updated > timestamp \'%limit\'', array('%set'=>$i, '%limit'=>$limit));
   $res = db_query($q);
   if ($res == false) {
      $error = db_errormessage();
      return false;
   }
   $out = array();
   while ($row = db_fetch_next($res)) {
      $out[] = $row['id'];
   }
   db_free_result($res);
   return true;
}

function filterIncidentsByStatus($incidents, $status, &$out, &$error='') {
   if (sizeof($incidents) == 0) {
      $out = $incidents;
      return true;
   }
   $i = implode(',', $incidents);
   if (!is_numeric($status)) {
      $error = _('Status must be numeric');
      return false;
   }
   $q = q('select id from incidents 
      where id in (%set)
      and status = %status', array('%set'=>$i, '%status'=>$status));
   $res = db_query($q);
   if ($res == false) {
      $error = db_errormessage();
      return false;
   }
   $out = array();
   while ($row = db_fetch_next($res)) {
      $out[] = $row['id'];
   }
   db_free_result($res);
   return true;
}

/* Retrieve attachments for a given file upload.
 *
 * $incidentid is the incidentid to which the file will be attached
 * $attachments will be an associative array containing a number of 
 *    attachments. Each attachments will be an associative array with
 *    indexes content-type, filename.
 * $error will contain an error message, if any
 *
 * note: the function will not return the content-body; fetch that with the
 * fetchAttachment function.
 *
 * The function will return true on success and false on failure
 */
function fetchAttachments($incidentid, &$attachments=array(), &$error='') {
   if (!is_numeric($incidentid)) {
      $error = _("Invalid parameter type");
      return false;
   }
   $attachments = array();
   $q = q("select id, incident, content_type, filename from incident_attachments where incident=%id", array(
      '%id' => $incidentid
   ));
   $res = db_query($q);
   if ($res == false) {
      $error = _('Database query failed in ').'fetchAttachments:'.__LINE__;
      return false;
   }
   while (($row = db_fetch_next($res)) !== false) {
      $attachments[$row['id']] = array(
         'content-type' => $row['content_type'],
         'filename' => $row['filename']
      );
   }
   return true;
}

/* Receive a file upload
 *
 * $incidentid is the incidentid to which the file will be attached
 * $error will be an error message, if any
 *
 * The function will return true on success or false on failure
 */
function receiveUpload($incidentid, &$error='') {
   // note: we are looking for the hard-code filename: file
   $upload = fetchFrom('FILES', 'file');
   if (empty($upload)) {
      $error = _("Unable to retrieve upload");
      return false;
   }
   if (!is_uploaded_file($upload['tmp_name'])) {
      $error = _("Unable to validate upload");
      return false;
   }
   if (!is_numeric($incidentid)) {
      $error = _("Invalid parameter type (incidentid)");
      return false;
   }
   $fh = fopen($upload['tmp_name'], 'r');
   $f = fread($fh, filesize($upload['tmp_name']));
   fclose($fh);
   $md5sum = md5($f);
   $file_content = pg_escape_bytea($f);

   $q = q("insert into incident_attachments (id, incident, content_type, content_body, filename) values (nextval('generic_sequence'), %id, '%type', '%content', '%filename')", array(
      '%id' => $incidentid,
      '%type' => $upload['type'],
      '%content' => $file_content,
      '%filename' => $upload['name']
   ));
   $res = db_query($q);
   if ($res == false) {
      $error = _("Upload rejected by database");
      return false;
   }
   db_free_result($res);
   unset($f);
   unset($file_content);
   unlink($upload['tmp_name']);
   addIncidentComment(array(
      'incidentid'=>$incidentid,
      'comment'=>'File '.strip_tags($upload['name']).' uploaded ('.
         $upload['size'].' bytes). Content type:'.
         strip_tags($upload['type'].' MD5sum:'.$md5sum)));
   return true;
}

/* Retrieve an attachment
 *
 * $id is the identifier of the attachment
 * $data is an associative array containing the following fields
 *   content-type
 *   content-body
 *   filename
 * $error will contain an error message, if any
 *
 * The function will return true on success or false on failure.
 */
function fetchAttachment($id, &$data=array(), &$error) {
   if (!is_numeric($id)) {
      $error = _("Invalid parameter type");
      return false;
   }
   $data = array();
   $q = q("select incident, content_type, content_body, filename from incident_attachments where id=%id", array(
      '%id' => $id
   ));
   $res = db_query($q);
   if ($res == false) {
      $error = _('Database query failed in ').'fetchAttachment:'.__LINE__;
      return false;
   }
   if (($row = db_fetch_next($res)) === false) {
      $error = _('Unable to fetch attachment in ').'fetchAttachment:'.__LINE__;
      return false;
   }
   unset($res);
   $data['content_type'] = $row['content_type'];
   $data['content_body'] = pg_unescape_bytea($row['content_body']);
   $data['filename'] = $row['filename'];
   unset($row);
   return true;
}

/* Delete an attachment
 *
 * $id is the identifier of the attachment
 * $error will contain an error message, if any
 *
 * The function will return true on success or false on failure.
 */
function deleteAttachment($id, &$error='') {
   if (!is_numeric($id)) {
      $error = _('Invalid parameter type');
      return false;
   }
   if (fetchAttachment($id, $a, $error) == false || sizeof($a) == 0) {
      $error = _('No such attachment');
      return false;
   }
   $q = q("delete from incident_attachments where id='%id'", array(
      '%id' => $id
   ));
   $res = db_query($q);
   if ($res == false) {
      $error = _('Unable to delete attachment ').strip_tags($id);
      return false;
   }
   addIncidentComment(array(
      'comment'=>t(_('Attachment deleted. Filename=%file, Type=%type.'),
         array('%file'=>$a['filename'], '%type'=>$a['content_type']))
   ));
   return true;
}

/**
 * Check for the presence of a mail template override.
 * 
 * @param incidentid numeric
 * @param userid     numeric
 *
 * @return the name of the template that overrides the incident template,
 * or false if that value has not been set. Also return 'false' if an
 * invalid value was passed.
 */
function getMailTemplateOverride($incidentid, $userid) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   if (!is_numeric($userid)) {
      return false;
   }
   $res = db_query(q('SELECT mailtemplate_override FROM incident_users WHERE incidentid=%incidentid AND userid=%userid', array(
      '%incidentid'=>$incidentid,
      '%userid'=>$userid
   )));
   if ($res === false) {
      return false;
   }
   $row = db_fetch_next($res);
   if (db_num_rows($res) == 0) {
      return false;
   }
   return trim($row['mailtemplate_override']);
}

/**
 * Set a mail template override
 *
 * @param incidentid numeric
 * @param userid numeric
 * @param template string
 *
 * return true on success, or false on failure
 */
function setMailtemplateOverride($incidentid, $userid, $template) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   if (!is_numeric($userid)) {
      return false;
   }
   if ($template == -1) {
      $template = '';
   }
   $res = db_query(q('SELECT id FROM incident_users WHERE incidentid=%incidentid AND userid=%userid', array(
      '%incidentid'=>$incidentid,
      '%userid'=>$userid
   )));
   if ($res == false) {
      return false;
   }
   $row = db_fetch_next($res);
   if (db_num_rows($res) == 0) {
      return false;
   }
   db_free_result($res);
   $q = q('UPDATE incident_users 
   SET mailtemplate_override=%t
   WHERE id=%id', array(
      '%t'=>trim(db_masq_null(db_escape_string($template))),
      '%id'=>$row['id']
   ));
   $res = db_query($q);
   return true;
}
?>
