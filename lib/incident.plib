<?php
/* vim: syntax=php shiftwidth=3 tabstop=3
 * AIRT: Application for Incident Response Teams
 * Copyright (C) 2006 Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * incident.plib - Incident management application logic
 *
 * $Id$
 */

require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/search.plib';
require_once LIBDIR.'/constituency.plib';
require_once LIBDIR.'/history.plib';
require_once LIBDIR.'/airt.plib';
require_once LIBDIR.'/mailtemplates.plib';
require_once LIBDIR.'/profiler.plib';
require_once LIBDIR.'/mailbox.plib';

/** Return an associative array with incident states.
 * @param $extras Optionally, an array with extra incident states that are
 * not from the database. Typically, "Please select a state"-like inert
 * selections.
 * Array format: array[extra_id]=extra_label. The extra states are prefixed
 * before the states from the database.
 * @return array[id]=label.
 */
function getIncidentStates($extras=array()) {
   $res = db_query('SELECT  id, label FROM incident_states ORDER BY id')
   or die(_('Unable to connect to database.'));

   $states=$extras;
   while ($row = db_fetch_next($res)) {
      $states[$row['id']]=$row['label'];
   }
   return $states;
}

/** Retrieve an incident state description by its identifier.
 * \param [in] $id Identifier of the incident state
 * \return An empty string on failure, or a string containing the description.
 */
function getIncidentStateDescr($id='') {
   if (!is_numeric($id)) {
      return '';
   }
   $states = getIncidentStates();
   if (array_key_exists($id, $states)) {
      return $states[$id];
   } else {
      return '';
   }
}

/**
 * Return the current incident state ID system default. If there is no
 * explicit default set, return an empty string. 
 */
function getIncidentStateDefault() {
   $res = db_query('SELECT id FROM incident_states WHERE isdefault')
   or die(_('Unable to execute query.'));

   if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
   } else {
      // Unsure.
      $default = '';
   }
   return $default;
}

function setIncidentStateDefault() {
   // set the lowest id to the default state
   // fetch the lowest result
   $res = db_query('UPDATE incident_states SET
      isdefault=true where id in (SELECT min(id) FROM
      incident_states)');
   db_free_result($res);
}

/* Return an HTML SELECT box containing valid choices for incident states.
 * Input: name = The HTML name of the selection box.
 *        default = Optionally, the ID of the default selection. If not
 *                  given, the database default state is used as selection
 *                  default.
 *        extras = Optionally, an array [id]=>label with extra states that
 *                 do not come from the database, and that are prefixed
 *                 before the database states (typically "Select State").
 * Output: HTML string with full <select> block.
 */
function getIncidentStateSelection($name, $default='@', $extras=array(),
   $script='') {
   $output = sprintf('<select %s name="%s">'.LF, 
      $script, htmlentities($name));
   $states = getIncidentStates($extras);
   if ($default=='@') {
      $default = getIncidentStateDefault();
   }
   foreach ($states as $i=>$l) {
      $output .= sprintf('<option value="%s" %s>%s</option>'.LF,
         htmlentities($i),
         ($i == $default) ? 'SELECTED' : '', htmlentities($l));
   }
   $output .= '</select>'.LF;
   return $output;
}

/* Return an associative array with incident statuses.
 * Input: optionally, an array with extra incident statuses that are not from
 * the database. Typically, "Please select a status"-like inert selections.
 * Array format: array[extra_id]=extra_label. The extra statuses are prefixed
 * before the statuses from the database.
 * Output: array[id]=label.
 */
function getIncidentStatus($extras=array()) {
   $res = db_query('SELECT id, label FROM incident_status ORDER BY id')
   or die(_('Unable to connect to database.'));

   $statuses=$extras;
   while ($row = db_fetch_next($res)) {
      $statuses[$row['id']]=$row['label'];
   }
   return $statuses;
}

/** Retrieve an incident status description by its identifier.
 * \param [in] $id Identifier of the incident status
 * \return An empty string on failure, or a string containing the description.
 */
function getIncidentStatusDescr($id='') {
   if (!is_numeric($id)) {
      return '';
   }
   $statuses = getIncidentStatus();
   if (array_key_exists($id, $statuses)) {
      return $statuses[$id];
   } else {
      return '';
   }
}

/* Return the current incident status ID system default. If there is no
 * explicit default set, return an empty string. */
function getIncidentStatusDefault() {
   $res = db_query('SELECT id FROM incident_status WHERE isdefault')
   or die(_('Unable to execute query.'));

   if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
    } else {
      // Unsure.
      $default = '';
    }
    return $default;
}

function setIncidentStatusDefault() {
   $res  = db_query('UPDATE incident_status SET
      isdefault=true where id in (SELECT min(id) FROM
      incident_status)');
   db_free_result($res);
}

/* Return an HTML SELECT box containing valid choices for incident statuses.
 * Input: name = The HTML name of the selection box.
 *        default = Optionally, the ID of the default selection. If not
 *                  given, the database default status is used as selection
 *                  default.
 *        extras = Optionally, an array [id]=>label with extra statuses that
 *                 do not come from the database, and that are prefixed
 *                 before the database statuses (typically "Select Status").
 * Output: HTML string with full <select> block.
 */
function getIncidentStatusSelection($name, $default='', $extras=array()) {
   $output = sprintf('<select name="%s">'.LF, htmlentities($name));
   $statuses = getIncidentStatus($extras);
   if ($default=='') {
      $default = getIncidentStatusDefault();
   }
   foreach ($statuses as $i=>$l) {
      $output .= sprintf('<option value="%s" %s>%s</option>'.LF,
         htmlentities($i),
         ($i == $default) ? 'SELECTED' : '', htmlentities($l));
   }
   $output .= '</select>'.LF;
   return $output;
}

/** Retrieve an incident type description by its identifier.
 * \param [in] $id Identifier of the incident type
 * \return An empty string on failure, or a string containing the description.
 */
function getIncidentTypeDescr($id='') {
   if (!is_numeric($id)) {
      return '';
   }
   $types = getIncidentTypes();
   if (array_key_exists($id, $types)) {
      return $types[$id];
   } else {
      return '';
   }
}

function getIncidentTypes($extras=array()) {
   $res = db_query('SELECT id, label FROM incident_types ORDER BY id')
   or die(_('Unable to connect to database.'));

   $types=$extras;
   while ($row = db_fetch_next($res)) {
      $types[$row['id']]=$row['label'];
   }
   return $types;
}

/* Return the current incident type ID system default. If there is no
 * explicit default set, return an empty string. */
function getIncidentTypeDefault() {
   $res = db_query('SELECT id FROM incident_types WHERE isdefault')
   or die(_('Unable to execute query.'));

   if (db_num_rows($res)==1) {
      // Exactly one row == exactly one default, perfect.
      $row = db_fetch_next($res);
      $default = $row['id'];
   } else {
      // Unsure.
      $default = '';
   }
   return $default;
}

function setIncidentTypeDefault() {
   // set default type
   $res  = db_query('UPDATE incident_types SET
      isdefault=true where id in (SELECT min(id) FROM
      incident_types)');
   db_free_result($res);
}

/* Return an HTML SELECT box containing valid choices for incident types.
   When a default choice is not given (""), fetch system default.*/
function getIncidentTypeSelection($name, $default='',$extras=array()) {
   $output = sprintf('<select name="%s">'.LF,
      htmlentities($name));
   $states = getIncidentTypes($extras);
   if ($default=='') {
      $default = getIncidentTypeDefault();
   }
   foreach ($states as $i=>$l) {
      $output .= sprintf('<option value="%s" %s>%s</option>'.LF,
         htmlentities($i),
         ($i == $default) ? 'SELECTED' : '', htmlentities($l));
   }
   $output .= '</select>'.LF;
   return $output;
}

/* retrieve incidents with status open or stalled.  Returns an associative
 * array with the incident ID as key and an associative array with incident
 * data as value. The optional variable $sqlfilter can be used to influence
 * which incidents are returned. Without it, all open and stalled incidents
 * are retrieved.
 */
function getOpenIncidents($sqlfilter = "WHERE s1.label IN ('open','stalled')") {
   $res = db_query(
      'SELECT   i.id as incidentid,
                i.short_desc as desc,
                extract(epoch from created) as created,
                u1.lastname as creator_lastname,
                u1.firstname as creator_firstname,
                u1.email as creator_email,
                u1.phone as creator_phone,
                extract(epoch from i.updated) as updated,
                u2.lastname as updatedby_lastname,
                u2.firstname as updatedby_firstname,
                u2.email as updatedby_email,
                u2.phone as updatedby_phone,
                s2.label as state,
                s1.label as status,
                t.label as type,
                a.ip as ip,
                a.hostname as hostname,
                extract(epoch from i.incidentdate) as incidentdate
         FROM   incidents i
         LEFT JOIN incident_addresses a on i.id = a.incident
         LEFT JOIN constituencies c on a.constituency = c.id
         LEFT JOIN incident_status s1 on s1.id = i.status
         LEFT JOIN incident_states s2 on s2.id = i.state
         LEFT JOIN incident_types t on t.id = i.type
         LEFT JOIN users u1 on u1.id = i.creator
         LEFT JOIN users u2 on u2.id = i.updatedby
         '.
         $sqlfilter);
   if (!$res) {
      airt_error('DB_QUERY', 'incident.plib:'.__LINE__);
      return array();
   }

   $incidents=array();
   while ($row = db_fetch_next($res)) {
      $incidents[$row['incidentid']]=$row;
   }
   return $incidents;
}

/* Return a list of IP address records that are associated with the given
 * incident id.
 */
function getAddressesForIncident($id) {
   $out = array();
   if (!is_numeric($id)) {
      return $out;
   }
   $id = decode_incidentid($id);
   $res = db_query(q('SELECT ip,hostname,constituency,addressrole FROM incident_addresses WHERE incident = %id', array('%id'=>$id)));
   if (!$res) {
      airt_error('DB_QUERY', 'incidnet.plib:'.__LINE__);
      return array();
   }
   while ($row = db_fetch_next($res)) {
       $out[] = $row;
   }
   return $out;
}


/** Retrieve an incident by detail.
 * @param $id numeric identifier of incident to retrieve.
 * @return false on failaire, or an associative array with the following fields:
 *    incidentid, created, creator, updated, updatedby, state, status, type,
 *    logging, incidentdate, ips, users.
 *    All dates are returned as Unix timestamps. Status, state and type are
 *    numeric identifiers. ids and users are arrays.
 */
function getIncident($id) {
   if (!is_numeric($id)) {
      return false;
   }
   // get basic info
   $q = q('SELECT id as incidentid,
        extract(epoch from created) as created,
        creator,
        extract(epoch from updated) as updated,
        updatedby,
        state,
        status,
        type,
	    logging,
        extract(epoch from incidentdate) as incidentdate,
        pref_templ as template,
        short_desc as desc
      FROM incidents
      WHERE id=%id', array('%id'=>$id));
   $res = db_query($q);
   if ($res == false) {
      return false;
   }
   if (db_num_rows($res) == 0) {
      return false;
   }

   $row = db_fetch_next($res);
   $data = $row;

   $data['ips'] = getAddressesForIncident($id);

   // get users
   db_free_result($res);
   $res = db_query(q('SELECT userid FROM incident_users '.
      'WHERE incidentid = \'%id\'', array('%id'=>$id)));
   if ($res == false) {
      $errormsg = _('Unable to match users to incident.');
      return false;
   }
   $users = array();
   while ($row = db_fetch_next($res)) {
      array_push($users, $row['userid']);
   }
   $data['users'] = $users;

   return $data;
}


/** Add an additional IP address to an existing incident, optionally specifying
 * the role that the incident plays.
 * @param $ip IP address to be added
 * @param $incident Identifier of the incident to which $ip will be added
 * @param $role (optional) Identifier of the address role
 *
 * @return false of failure, true on success
 */
function addIPtoIncident($ip, $incident,$role=0) {
   if (!is_numeric($incident)) {
      airt_profile('addIPtoIncident: Incident ID is not numeric');
      return false;
   }

   if (!is_numeric($role)) {
      airt_profile('addIPtoIncident: Role is not numeric');
      return false;
   }

   $networkid = categorize($ip);
   if (defined('CUSTOM_FUNCTIONS') && function_exists("custom_categorize")) {
      $networkid = custom_categorize($ip, $networkid);
   }
   airt_profile('addIPtoIncident: networkid = '.$networkid);

   $constituencyID = getConstituencyIDbyNetworkID($networkid);
   airt_profile('addIPtoIncident: constituency = '.$constituencyID);

   $hostname = @gethostbyaddr($ip);
   $_SESSION['active_ip'] = $ip;

   $res = db_query(q('
      INSERT INTO incident_addresses
      (id, incident, ip, addressrole, hostname, constituency,
        added, addedby, updated, updatedby)
      VALUES
      (nextval(\'incident_addresses_sequence\'), %incidentid, %ip,
       %addressrole, %hostname, %constituency, CURRENT_TIMESTAMP, %userid, 
       CURRENT_TIMESTAMP, %userid)', array(
         '%incidentid'=>db_masq_null($incident),
         '%ip'=>db_masq_null($ip),
         '%hostname'=>db_masq_null($hostname),
         '%constituency'=>$constituencyID,
         '%addressrole'=>$role,
         '%userid'=>db_masq_null($_SESSION['userid']))
   ));
   if (!$res) {
      airt_error('DB_QUERY', 'incident.plib:'.__LINE__,
                 t(_('Could not add IP to incident')));
      Header("Location: $_SERVER[PHP_SELF]");
      return false;
   }
   return true;
}

/** Add a new incident to the database.
 * The incident will be assigned a new ID and the basic incident information
 * will be added to the database.
 *
 * \param[in] $state   The numerical ID of an incident state
 * \param[in] $status  The numerical ID of an incident status
 * \param[in] $type    The numerical ID of an incident type
 * \param[in] $logging An optional string containing the logging
 *
 * \return Returns a numerical incident ID on success, or false on failure
 */
function createIncident($params = array()) {

   if (!is_array($params)) {
      return false;
   }
   if (empty($params['state']) || !is_numeric($params['state'])) {
      return false;
   }
   if (empty($params['status']) || !is_numeric($params['status'])) {
      $params['status'] = getIncidentStatusDefault();
   }
   if (empty($params['type']) || !is_numeric($params['type'])) {
      return false;
   }
   if (empty($params['logging'])) {
      $params['logging'] = '';
   }
   if (empty($params['date'])) {
      $params['date'] = '';
   }
   if (empty($params['desc'])) {
      $params['desc'] = '';
   } else {
      // do not allow HTML or PHP tags in short description
      $params['desc'] = strip_tags($params['desc']);
   }
   if (empty($params['template'])) {
      $params['template'] = '';
   } else {
      // do not allow HTML or PHP tags in short description
      $params['template'] = strip_tags($params['template']);
   }

   $res = db_query('select nextval(\'incidents_sequence\') as incidentid');
   if ($res == false) {
      return false;
   }
   $row = db_fetch_next($res);
   $incidentid = $row['incidentid'];
   $_SESSION['incidentid'] = $incidentid;
   db_free_result($res);

   $q = sprintf(
      'insert into incidents
      (id, created, creator, updated, updatedby, state, status, type,
      incidentdate, logging, short_desc, pref_templ)
      values
      (%d, CURRENT_TIMESTAMP, %d, CURRENT_TIMESTAMP, %d, %d, %d, %d, %s, %s,
      %s, %s)',
         $incidentid,
         $_SESSION['userid'],
         $_SESSION['userid'],
         $params['state'] == '' ? 'NULL' : $params['state'] ,
         $params['status'] == '' ? 'NULL' : $params['status'] ,
         $params['type'] == '' ? 'NULL' : $params['type'],
         $params['date'] == '' ? 'NULL' : "'".Date('Y-m-d H:i:s', $params['date'])."'",
         $params['logging'] == '' ? 'NULL' : "'".db_escape_string($params['logging'])."'",
         $params['desc'] == '' ? 'NULL' : "'".db_escape_string($params['desc'])."'",
         $params['template'] == '' ? 'NULL' : "'".db_escape_string($params['template'])."'"
   );
   $res = db_query($q);
   if (!$res) {
      return false;
   }
   db_free_result($res);

   addIncidentComment(array(
      'comment'=>'Incident created',
      'incidentid'=>$incidentid
   ));
   if (empty($params['date'])) {
      $params['date'] = time();
   }
   $comment=sprintf('state=%s, status=%s, type=%s, date=%s',
      strip_tags(getIncidentStateLabelByID($params['state'])),
      strip_tags(getIncidentStatusLabelByID($params['status'])),
      strip_tags(getIncidentTypeLabelById($params['type'])),
      Date('d-M-Y H:i:s', $params['date']));
   addIncidentComment(array(
      'comment'=>$comment,
      'incidentid'=>$incidentid
   ));
   return $incidentid;
} // createIncident

/** Remove an incident from an IP address.
 * \param $ip IP address to be removed.
 * \param $incident ID of the IP to be removed
 * \param $role Address role ID of the IP address to be removed
 *
 * \return false on failure, true on success.
 */
function removeIPfromIncident($ip, $incident, $role) {
   if (!is_numeric($incident) || !is_numeric($role)) {
      return false;
   }
   generateEvent('incidentdelip', array(
      'incidentid' => $incident,
      'ip' => $ip,
      'addressrole' => $role
   ));

   $res = db_query(q('
      DELETE FROM incident_addresses
      WHERE ip=%ip
      AND   incident=%incidentid
      AND   addressrole=%addressrole', array(
      '%ip'=>db_masq_null($ip),
      '%incidentid'=>db_masq_null($incident),
      '%addressrole'=>db_masq_null($role))
   ));
   if ($res == false) {
      return false;
   }
   return true;
}

/** Fetch the label of an incident state by ID
 * @param $id Incident ID
 * @return a string containing the incident state of an ID, or the string
 *    'unknown'
 */
function getIncidentStateLabelByID($id) {
   if (!is_numeric($id)) {
      return _('unkown');
   }
   $res = db_query(q('
      SELECT label
      FROM   incident_states
      WHERE  id=\'%id\'', array('%id'=>$id)));
   if ($res == false) {
      return _('unknown');
   }

   if (db_num_rows($res)) {
      $row = db_fetch_next($res);
      $out = $row['label'];
   } else {
      $out = _('unknown');
   }

   return $out;
}

/* Fetch the label of an incident status by ID
 * @param $id Incident ID
 * @return a string containing the incident status of an ID, or the string
 *    'unknown'
 */
function getIncidentStatusLabelByID($id) {
   if (!is_numeric($id)) {
      return _('unkown');
   }
   $res = db_query(q('
      SELECT label
      FROM   incident_status
      WHERE  id=\'%id\'', array('%id'=>$id)));
   if ($res == false) {
      return _('unknown');
   }

   if (db_num_rows($res)) {
      $row = db_fetch_next($res);
      $out = $row['label'];
   } else {
      $out = _('unknown');
   }

   return $out;
}

/** Fetch the label of an incident type by ID
 * @param $id Incident ID
 * @return a string containing the incident type of an ID, or the string
 *    'unknown'
 */
function getIncidentTypeLabelByID($id) {
   if (!is_numeric($id)) {
      return _('unkown');
   }
   $res = db_query(q('
      SELECT label
      FROM   incident_types
      WHERE  id=\'%id\'', array('%id'=>$id)));
   if ($res == false) {
      return _('unknown');
   }
   if (db_num_rows($res)) {
      $row = db_fetch_next($res);
      $out = $row['label'];
   } else {
      $out = _('unknown');
   }

   return $out;
}

/** 
 * Associate a user with an incident.
 * @param $userid ID of the user
 * @param $incident ID of the incident
 *
 * @return false on failure, true on success
 */
function addUserToIncident($userid, $incident, $override='') {
   if (!is_numeric($userid) || !is_numeric($incident)) {
      airt_msg(_('Unable to add user to incident.'));
      return false;
   }

   $res = db_query(q('
      INSERT INTO incident_users
      (id, incidentid, userid, added, addedby)
      VALUES
      (nextval(\'incident_users_sequence\'), %incidentid, %userid, 
       CURRENT_TIMESTAMP, %logger)', array(
         '%incidentid'=>db_masq_null($incident),
         '%userid'=>db_masq_null($userid),
         '%logger'=>db_masq_null($_SESSION['userid']))));
   if ($res == false) {
      return false;
   }

   /* IODEF capability override */
   $u = getUserByUserID($userid);
   if ($u == false) {
      return false;
   }
   $caps = array();
   $err = '';
   if (getUserCapabilities($userid, $caps, $err) === false) {
      airt_msg($err);
      return false;
   }
   if (array_key_exists(AIRT_USER_CAPABILITY_IODEF, $caps) &&
       $caps[AIRT_USER_CAPABILITY_IODEF] == 1) {
      /* find matching mail template */
      $templates = array();
      $err = '';
      if (getCapabilityMailtemplates(AIRT_MAIL_CAPABILITY_IODEF, $templates, $err)
          === true ) {
         /* safe to get the first template in the array, since only one
          * template should be set to iodef-provider at any time
          */
         if (sizeof($templates) > 0) {
            $override = $templates[0];
         }
      }
   }

   if ($override == '') {
      ; # do nothing
   } else {
      setMailtemplateOverride($incident, $userid, $override);
   }

   generateEvent('incidentadduser', array(
      'incidentid' => $incident,
      'userid' => $userid
   ));
   return true;
}

/** Remove a user from an incdient id.
 * @param $userid ID of the user
 * @param $incident ID of the incident
 * @return true on success, false on failure.
 */
function removeUserfromIncident($userid, $incident) {
   generateEvent('incidentdeluser', array(
      'incidentid' => $incident,
      'userid' => $userid
   ));

   $res = db_query(q('
      DELETE FROM incident_users
      WHERE userid=%userid
      AND   incidentid=%incidentid', array(
         '%userid'=>db_masq_null($userid),
         '%incidentid'=>db_masq_null($incident))));
   if ($res == false) {
      return false;
   } else {
      return true;
   }
}

/* Produces a simple HTML edit form to edit an IP address' data.
 * Will be expanded in the future.
 * Requires an incident ID and an IP address in dot notation (could
 * also have been a single incident_address ID, would be better).
 * Returns a HTML formatted string.
 */
function editIPform($incidentid,$ip) {
   if (!is_numeric($incidentid)) {
      return '';
   }
   // Retrieve the full address assignment data.
   $res = db_query(q('SELECT incident_addresses.id as id,
                ip,hostname,constituency,addressrole,
                to_char(added,\'YYYY-MM-DD HH24:MI\') as added,
                u1.email as addedby,
                to_char(updated,\'YYYY-MM-DD HH24:MI\') as updated,
                u2.email as updatedby
      FROM      incident_addresses
      FULL JOIN users u1 ON u1.id=addedby
      LEFT JOIN users u2 ON u2.id=updatedby
      WHERE     incident=%incidentid AND ip=%ip
      ', array('%incidentid'=>$incidentid, '%ip'=>db_masq_null($ip))))
   or airt_error('DB_QUERY', __FILE__.':'.__LINE__,
                 t(_('Could not fetch IP address details')));
   if (db_num_rows($res)>0) {
      $row = db_fetch_next($res);
      $id           = $row['id'];
      $ip           = $row['ip'];
      $addressrole  = $row['addressrole'];
      $hostname     = $row['hostname'];
      $constituency = $row['constituency'];
      $added        = $row['added'];
      $addedby      = $row['addedby'];
      $updated      = $row['updated'];
      $updatedby    = $row['updatedby'];
   } else {
      die(_('Could not find assigned IP address.'));
   }

   $o = '<div class="details-ip-edit">'.LF;
   $o .= sprintf('<form method="POST" action="%s">'.LF, $_SERVER['PHP_SELF']);
   $o .= '<input type="HIDDEN" name="action" value="updateip">'.LF;
   $o .= sprintf('<input type="HIDDEN" name="id" value="%d">'.LF, $id);
   $o .= sprintf('<input type="HIDDEN" name="ip" value="%s">'.LF, $ip);
   $o .= sprintf('<input type="HIDDEN" name="addressrole" value="%s">'.LF, $addressrole);
   $o .= sprintf('<input type="HIDDEN" name="incidentid" value="%d">'.LF, $incidentid);
   $o .= '<table class="horizontal">'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('IP address').'</td>'.LF;
   $o .= '    <td>'.$ip.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Host name').'</td>'.LF;
   $o .= '    <td>'.$hostname.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Role in incident').'</td>'.LF;
   $o .= '    <td>'.getAddressRolesSelection('addressrole',$addressrole, array(''=>_('Not set'))).'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Constituency').'</td>'.LF;
   $o .= '    <td>'.getConstituencySelection('constituency',$constituency).'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Added').'</td>'.LF;
   $o .= '    <td>'.$added.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Added by').'</td>'.LF;
   $o .= '    <td>'.$addedby.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Updated').'</td>'.LF;
   $o .= '    <td>'.$updated.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>'._('Updated by').'</td>'.LF;
   $o .= '    <td>'.$updatedby.'</td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '  <tr>'.LF;
   $o .= '    <td>&nbsp;</td>'.LF;
   $o .= '    <td><input type="submit" value="'._('Update').'"></td>'.LF;
   $o .= '  </tr>'.LF;
   $o .= '</table>'.LF;
   $o .= '</form>'.LF;
   $o .= '</div>'.LF;

   return $o;
}


/* Attempts to update the incident_addresses table with new data.
 * Works on a unique ID for the combination (incident,ipadress).
 * Returns false of failure, true on success.
 */
function updateIPofIncident($id,$constituency,$addressrole) {
   if (!is_numeric($id) || !is_numeric($constituency) || !is_numeric($addressrole)) {
      return false;
   }
   $q = q('UPDATE incident_addresses
      SET constituency=%constituency,
          addressrole=%addressrole,
          updated=CURRENT_TIMESTAMP,
          updatedby=%updatedby
      WHERE id=%id', array(
         '%constituency'=>$constituency,
         '%addressrole'=>$addressrole,
         '%updatedby'=>$_SESSION['userid'],
         '%id'=>$id));
   $res = db_query($q)
   or airt_error('DB_QUERY', __FILE__.':'.__LINE__,
                 t(_('Could not update IP with incident')));
   return true;
}

/* Update basic incident data. For convenience reasons, all data fields
 * except the ID may be left unspecified (== ""), in which case they will
 * not be touched. If all fields are "", no update is done at all.
 * Relevant automatic fields will be generated accordingly.
 * Returns void.
 */
function updateIncident($id,$params = array()) {
   // Problem case: no ID given.
   if (empty($id)) {
      die(_('No ID given to update request.'));
   }

   // Compile the variable part of the SET clause.
   $set = '';
   if (!empty($params['state'])) {
      $set .= sprintf('state=%d,',$params['state']);
   }
   if (!empty($params['status'])) {
      $set .= sprintf('status=%d,',$params['status']);
   }
   if (!empty($params['type'])) {
      $set .= sprintf('type=%d,',$params['type']);
   }
   if (!empty($params['date'])) {
      $set .= sprintf('incidentdate=\'%s\',', db_escape_string(
      date('Y-m-d H:i:s', $params['date'])));
   }
   if (!empty($params['logging'])) {
      $set .= sprintf('logging=\'%s\',',db_escape_string(
         $params['logging']));
   }
   if (!empty($params['desc'])) {
      $set .= sprintf('short_desc=\'%s\',',db_escape_string(
         strip_tags($params['desc'])));
   } else {
      $set .= sprintf('short_desc=NULL,');
   }
   if (!empty($params['template'])) {
      $set .= sprintf('pref_templ=\'%s\',',db_escape_string(
         strip_tags($params['template'])));
   } else {
      $set .= sprintf('pref_templ=NULL,');
   }

   // Add the fixed part (we know for sure there is at least one variable
   // part).
   $set .= sprintf('updated=CURRENT_TIMESTAMP,updatedBy=%d', $_SESSION['userid']);
   // Create the whole query.

   db_query(q('UPDATE incidents SET %set WHERE id=%id', array('%set'=>$set, '%id'=>$id)));

  return;
}

/* Mass update a list of incidents. Only status and state can be given and
 * will be set to each incident ID in the list.
 * Returns void.
 */
function updateIncidentList($incidentList,$params) {
   foreach ($incidentList as $id) {
      updateIncident($id,$params);
   }
   return;
}

/* Return an associative array with incident IDs that are related to the
 * given IP address.
 * Input: an IP address in dotted-decimal notation.
 * Output: array[id]='#000132  Compromised   2005-10-11 12:12'.
 */
function getIncidentsByIP($ip) {
   // Fetch the relevant incidents and at the same time some basic incident
   // data for the nice summary string.
   $ip = db_escape_string($ip);
   $q = "SELECT incident as incident,
                incident_types.label as type,
                to_char(incidents.created,'YYYY-MM-DD HH24:MI') as created
         FROM incident_addresses,incidents,incident_types
         WHERE ip='$ip'
           AND incident_addresses.incident=incidents.id
           AND incidents.type = incident_types.id
         ORDER BY incident";
   $res = db_query($q) or airt_error('DB_QUERY',__FILE__.':'.__LINE__,
                             t(_('Could not get related incidents')));
   $out = array();
   while ($row = db_fetch_next($res)) {
      $incidentID = $row['incident'];
      $type       = $row['type'];
      $created    = $row['created'];
      // Create the site-specific incident ID notation.
      $siteIncidentID = encode_incidentid($incidentID);
      // Assume site-specific ID has fixed length.
      $summary = sprintf('%s  %-15s  %s',$siteIncidentID,$type,$created);
      $out[$row['incident']] = $summary;
   }
   return $out;
}// getIncidentsByIP


/** Return an associative array with incident IDs that belong to the 
 * current constituency.
 * @param $constituencyID: the ID of a constituency
 * @return array[incidentid]='#000132  Compromised   2005-10-11 12:12'.
 */
function getIncidentsByConstituency($constituencyID) {
   if (!is_numeric($constituencyID)) {
      return array();
   }
   $q = q('SELECT incident as incident,
                t.label as type,
                to_char(i.created, \'YYYY-MM-DD HH24:MI\') as created
         FROM   incident_addresses a
         LEFT JOIN incidents i ON (a.incident = i.id)
         LEFT JOIN incident_types t ON (i.type = t.id)
         WHERE  constituency=%consid
         ORDER BY incident', array('%consid'=>$constituencyID));
   $res = db_query($q);
   if (!$res) {
      airt_error('DB_QUERY',__FILE__.':'.__LINE__);
      return array();
   }
   $out = array();
   while ($row = db_fetch_next($res)) {
      $out[$row['incident']] = sprintf('%s  %-15s  %s', 
         encode_incidentID($row['incident']), $row['type'], $row['created']);
   }
   return $out;
}


/**
 * Fetch a list of all incidents associated with a given userid
 *
 * @param $user userid
 * @param $incidents Incidents associated with user
 * @param $error error message, if any
 * @return false on failure, true on success
 */
function getIncidentsByUserID($userid, &$incidents, &$error='') {
   $incidents = array();
   $error = '';
   if (!is_numeric($userid)) {
      $error = _('Bad parameter type in').' incident.plib:'.__LINE__;
      return false;
   }
   $q = q('SELECT incidentid
           FROM   incident_users
           WHERE  userid=%uid', array('%uid'=>$userid));
   $res = db_query($q);
   if ($res === false) {
      $error = _('Error querying database in').' incident.plib:'.__LINE__;
      return false;
   }
   while (($row = db_fetch_next($res)) !== false) {
      $incidents[] = $row['incidentid'];
   }
   db_free_result($res);
   return true;
}

/* Return an associative array with address roles.
 * Input: optionally, an array with extra address roles that are not from
 * the database. Typically, "Please select a role"-like inert selections.
 * Array format: array[extra_id]=extra_label. The extra states are prefixed
 * before the states from the database.
 * Output: array[id]=label.
 */
function getAddressRoles($extras=array()) {
   $res = db_query('SELECT id, label FROM address_roles ORDER BY id')
   or airt_error('DB_QUERY', __FILE__.':'.__LINE__,
                 t(_('Could not get address roles')));

   $out=$extras;
   while ($row = db_fetch_next($res)) {
      $out[$row['id']]=$row['label'];
   }
   return $out;
}

/* Return an HTML SELECT box containing valid choices for address roles.
 * Input: name = The HTML name of the selection box.
 *        default = Optionally, the ID of the default selection. 
 *        extras = Optionally, an array [id]=>label with extra states that
 *                 do not come from the database, and that are prefixed
 *                 before the database states (typically "Select State").
 * Output: HTML string with full <select> block.
 */
function getAddressRolesSelection($name, $default='', $extras=array()) {
   $output = t('<select name="%name">\n', array(
      '%name'=>htmlentities($name)
   ));
   $roles = getAddressRoles($extras);
   foreach ($roles as $i=>$l) {
      $output .= t('<option value="%id" %selected>%label</option>\n', array(
          '%id'=>htmlentities($i), 
          '%selected'=>($i == $default) ? "SELECTED" : '', 
          '%label'=>htmlentities($l)
      ));
   }
   $output .= "</select>";
   return $output;
}

/* Returns the label associated with an address role id, or an empty string if
 * no such role exists.
 */
function getAddressRoleByID($id) {
   $addressroles = getAddressRoles();
   if (array_key_exists($id, $addressroles)) {
      return $addressroles[$id];
   } else {
      return '';
   }
}

/** Retrieve 3rd-party incident IDs.
 * \param [in] $incidentid  Internal incident ID
 *
 * \return Will return an array of external incident identifiers. The array may
 * be empty if none exist.
 */
function getExternalIncidentIDs($incidentid='') {
   if (!is_numeric($incidentid)) {
      return array();
   }
   $out = array();
   $q = q('select incidentid, externalid from external_incidentids where incidentid=%id', array('%id'=>$incidentid));
   $res = db_query($q);
   while ($row = db_fetch_next($res)) {
      $out[] = $row['externalid'];
   }
   return $out;
}

/** Add 3rd-party incident IDs.
 * \param [in] $incidentid   Internal incident id.
 * \param [in] $externalids  External incident ids. If $externalids is a string, only one will be added, if it is an array, all will be added.
 * \return true on success, false on failure.
 */
function addExternalIncidentIDs($incidentid='', $externalids) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   if (is_string($externalids)) {
      $externalids = array($externalids);
   }
   $res = db_query('begin transaction');
   foreach ($externalids as $extid) {
      db_free_result($res);
      $res = db_query(q('insert into external_incidentids (incidentid, externalid) values (%id, \'%extid\')', array('%id'=>$incidentid, '%extid'=>db_escape_string($extid))));
      if ($res == false) {
         db_query('rollback');
         return false;
      }
      addincidentcomment(array(
         'comment'=>t(_('External identifier %extid added.'),
            array('%extid'=>$extid)),
         'incidentid'=>$incidentid));

   }
   return db_query('end transaction');
}

/** Remove 3rd-party incident IDs.
 * \param [in] $incidentid   Internal incident id.
 * \param [in] $externalids  External incident ids. If $externalids is a string, only one will be removed, if it is an array, all will be removed.
 * \return true on success, false on failure.
 */
function deleteExternalIncidentIDs($incidentid='', $externalids) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   if (is_string($externalids)) {
      $externalids = array($externalids);
   }
   $res = db_query('begin transaction');
   foreach ($externalids as $extid) {
      db_free_result($res);
      $res = db_query(q('delete from external_incidentids where incidentid=%id and externalid=\'%extid\'', array('%id'=>$incidentid, '%extid'=>db_escape_string($extid))));
      if ($res == false) {
         db_query('rollback');
         return false;
      }
      addincidentcomment(array(
         'comment'=>t(_('External identifier %extid removed.'),
            array('%extid'=>$extid)),
         'incidentid'=>$incidentid));
   }
   return db_query('end transaction');
}

/** Find incident ID for corresponding ticket number */
function getIncidentIDsByExternalID($externalid) {
   $output = array();
	if (!is_string($externalid)) {
		return false;
	}
	$q = q('select incidentid from external_incidentids '.
	       'where externalid=\'%extid\'', 
		    array('%extid'=>db_escape_string($externalid)));
	$res = db_query($q);
	if ($res == false) {
	   return false;
	}
	while (($row = db_fetch_next($res)) !== false) {
	   $output[] = $row['incidentid'];
	}
	return $output;
}

function getFormattedBasicIncidentData($incidentid='') {
   if (!is_numeric($incidentid)) {
      return false;
   }

   $incident = getIncident($incidentid);
   $out = '<h2>'._('Basic incident data').'</h2>';
   $out .= '<table class="horizontal">';
   $out .= t('<tr><td>'._('Incident ID').'</td><td>%incidentid</td></tr>', array(
      '%incidentid'=>normalize_incidentid($incidentid)));
   $out .= t('<tr><td>'._('Type').'</td><td>%type</td></tr>', array(
      '%type'=>getIncidentTypeDescr($incident['type'])));
   $out .= t('<tr><td>'._('Status').'</td><td>%status</td></tr>', array(
      '%status'=>getIncidentStatusDescr($incident['status'])));
   $out .= t('<tr><td>'._('State').'</td><td>%state</td></tr>', array(
      '%state'=>getIncidentStateDescr($incident['state'])));
   $out .= t('<tr valign="top"><td>'._('Logging').'</td><td><pre>%logging</pre></td></tr>', array(
      '%logging'=>htmlentities($incident['logging'])));
   $out .= '</table>';

   return $out;
}


/** Return an array containing incidents.
 *
 */
function getOpenIncidentsByConstituency($cons) {
   if (!is_numeric($cons)) {
	   return array();
	}
	$out = array();
	$q = q('select distinct a.incident
		from incident_addresses a, incidents i, incident_status s
		where a.constituency = %cons
		and   i.id = a.incident
		and   i.status = s.id
		and   s.label = \'open\'
		', array('%cons'=>$cons));
	$res = db_query($q);
	while ($row = db_fetch_next($res)) {
	   $out[] = $row['incident'];
	}
	return $out;
}

/** Fetch name of preferred template for a given incident.
 *
 * @param $incidentid Numerical incident id
 * @return name of preferred mail template, or NULL if not set
 */
function getPreferredMailTemplateName($incidentid) {
   if (!is_numeric($incidentid)) {
      airt_msg(_('non-numeric incidentid'));
      return null;
   }
   $q = q('SELECT pref_templ FROM incidents WHERE id=%id',
	   array('%id'=>$incidentid));
   $res = db_query($q);
   if ($res == false) {
      airt_error('DB_QUERY', 'incidents.plib:'.__LINE__);
      airt_msg(_('database error'));
		reload('');
		return null;
   }
   if (db_num_rows($res) == 0) {
      airt_msg(_('No preferred template'));
      return null;
   } else {
      $row = db_fetch_next($res);
      return $row['pref_templ'];
   }
}

/** Check if an incident with the given ID exists in the database.
 * @param $incidentid ID of the incident
 * @return true if the incident exists; false if it does not
 */
function incidentExists($incidentid) {
   if (!is_numeric($incidentid)) {
	   return false;
   }
	$q = q('SELECT id FROM incidents WHERE id=%id',
	   array('%id'=>$incidentid));
	$res = db_query($q);
	if ($res == false) {
	   airt_error('DB_QUERY', 'incidents.plib:'.__LINE__);
		reload('');
		return false;
	}
	if (db_num_rows($res) == 0) {
	   return false;
	} else {
	   return true;
	}
}


/** Set name of preferred template for a given incident.
 *
 * @param $incidentid Numerical incident id
 * @param $template name of preferred mail template
 * @return true on success, false on failure
 */
function setPreferredMailTemplateName($incidentid, $template) {
   if (!is_numeric($incidentid)) {
	   return false;
   }
	if (!incidentExists($incidentid)) {
	   return false;
	}
	if (!templateExists($template)) {
	   return false;
	}
	$q = q('UPDATE incidents SET pref_templ=\'%templ\' WHERE id=%id',
	   array('%id'=>$incidentid, '%templ'=>db_escape_string($template)));
	$res = db_query($q);
	if ($res == false) {
	   airt_error('DB_QUERY', 'incidents.plib:'.__LINE__);
		reload('');
		return false;
	}
	return true;
}

/** Update the last_updated field of an incident 
 *
 * @param $incidentid ID of incident to be updated
 * @param &$timestamp timestamp to be set (optional; defaults to 'now'). 
 *     The value of $timestamp should be epoch seconds.
 * @return false on failure; true on success.
 */
function touchIncident($incidentid, $timestamp='') {
   if (!is_numeric($incidentid)) {
      return false;
   }
   $q = 'UPDATE incidents set updated=';
   if (empty($timestamp)) {
      $q .= 'CURRENT_TIMESTAMP';
   } else {
      if (!is_numeric($timestamp)) {
         return false;
      }
      $now = date('d M Y H:i:s', $timestamp);
      $q .= "to_timestamp('$now', 'DD Mon YYYY HH24:MI:SS')";
   }
   $q .= ' where id='.$incidentid;
   $res = db_query($q);
   if ($res === false) {
      return false;
   } else {
      return true;
   }
}

/* return an array of prevous incident ids for a given IP address
 */
function getPreviousIncidents($ip, &$out, &$error='') {
   $q = q('select i.id from incidents i, incident_addresses a 
          where i.id = a.incident
          and   a.ip = \'%ip\'', array('%ip'=>db_escape_string($ip)));
   $res = db_query($q);
   if ($res == false) {
      $error = db_errormessage();
      return false;
   }
   $out=array();
   while ($row = db_fetch_next($res)) {
      $out[] = $row['id'];
   }
   db_free_result($res);
   return true;
}

/* filter incidents by age;
 */
function filterIncidentsByAge($incidents, $maxage, &$out, &$error='') {
   if (sizeof($incidents) == 0) {
      $out = $incidents;
      return true;
   }
   $i = implode(',', $incidents);
   $limit = Date('Y-m-d H:i:s', time()-$maxage);
   $q = q('select id from incidents 
      where id in (%set)
      and updated > timestamp \'%limit\'', array('%set'=>$i, '%limit'=>$limit));
   $res = db_query($q);
   if ($res == false) {
      $error = db_errormessage();
      return false;
   }
   $out = array();
   while ($row = db_fetch_next($res)) {
      $out[] = $row['id'];
   }
   db_free_result($res);
   return true;
}

function filterIncidentsByStatus($incidents, $status, &$out, &$error='') {
   if (sizeof($incidents) == 0) {
      $out = $incidents;
      return true;
   }
   $i = implode(',', $incidents);
   if (!is_numeric($status)) {
      $error = _('Status must be numeric');
      return false;
   }
   $q = q('select id from incidents 
      where id in (%set)
      and status = %status', array('%set'=>$i, '%status'=>$status));
   $res = db_query($q);
   if ($res == false) {
      $error = db_errormessage();
      return false;
   }
   $out = array();
   while ($row = db_fetch_next($res)) {
      $out[] = $row['id'];
   }
   db_free_result($res);
   return true;
}

/* Retrieve attachments for a given file upload.
 *
 * $incidentid is the incidentid to which the file will be attached
 * $attachments will be an associative array containing a number of 
 *    attachments. Each attachments will be an associative array with
 *    indexes content-type, filename.
 * $error will contain an error message, if any
 *
 * note: the function will not return the content-body; fetch that with the
 * fetchAttachment function.
 *
 * The function will return true on success and false on failure
 */
function fetchAttachments($incidentid, &$attachments=array(), &$error='') {
   if (!is_numeric($incidentid)) {
      $error = _("Invalid parameter type");
      return false;
   }
   $attachments = array();
   $q = q("select id, incident, content_type, filename from incident_attachments where incident=%id", array(
      '%id' => $incidentid
   ));
   $res = db_query($q);
   if ($res == false) {
      $error = _('Database query failed in ').'fetchAttachments:'.__LINE__;
      return false;
   }
   while (($row = db_fetch_next($res)) !== false) {
      $attachments[$row['id']] = array(
         'content-type' => $row['content_type'],
         'filename' => $row['filename']
      );
   }
   return true;
}

/* Receive a file upload
 *
 * $incidentid is the incidentid to which the file will be attached
 * $error will be an error message, if any
 *
 * The function will return true on success or false on failure
 */
function receiveUpload($incidentid, &$error='') {
   // note: we are looking for the hard-code filename: file
   $upload = fetchFrom('FILES', 'file');
   if (empty($upload)) {
      $error = _("Unable to retrieve upload");
      return false;
   }
   if (!is_uploaded_file($upload['tmp_name'])) {
      $error = _("Unable to validate upload");
      return false;
   }
   if (!is_numeric($incidentid)) {
      $error = _("Invalid parameter type (incidentid)");
      return false;
   }
   $fh = fopen($upload['tmp_name'], 'r');
   $f = fread($fh, filesize($upload['tmp_name']));
   fclose($fh);
   $md5sum = md5($f);
   $file_content = pg_escape_bytea($f);

   $q = q("insert into incident_attachments (id, incident, content_type, content_body, filename) values (nextval('generic_sequence'), %id, '%type', '%content', '%filename')", array(
      '%id' => $incidentid,
      '%type' => $upload['type'],
      '%content' => $file_content,
      '%filename' => $upload['name']
   ));
   $res = db_query($q);
   if ($res == false) {
      $error = _("Upload rejected by database");
      return false;
   }
   db_free_result($res);
   unset($f);
   unset($file_content);
   unlink($upload['tmp_name']);
   addIncidentComment(array(
      'incidentid'=>$incidentid,
      'comment'=>'File '.strip_tags($upload['name']).' uploaded ('.
         $upload['size'].' bytes). Content type:'.
         strip_tags($upload['type'].' MD5sum:'.$md5sum)));
   return true;
}

/* Retrieve an attachment
 *
 * $id is the identifier of the attachment
 * $data is an associative array containing the following fields
 *   content-type
 *   content-body
 *   filename
 * $error will contain an error message, if any
 *
 * The function will return true on success or false on failure.
 */
function fetchAttachment($id, &$data=array(), &$error) {
   if (!is_numeric($id)) {
      $error = _("Invalid parameter type");
      return false;
   }
   $data = array();
   $q = q("select incident, content_type, content_body, filename from incident_attachments where id=%id", array(
      '%id' => $id
   ));
   $res = db_query($q);
   if ($res == false) {
      $error = _('Database query failed in ').'fetchAttachment:'.__LINE__;
      return false;
   }
   if (($row = db_fetch_next($res)) === false) {
      $error = _('Unable to fetch attachment in ').'fetchAttachment:'.__LINE__;
      return false;
   }
   unset($res);
   $data['content_type'] = $row['content_type'];
   $data['content_body'] = pg_unescape_bytea($row['content_body']);
   $data['filename'] = $row['filename'];
   unset($row);
   return true;
}

/* Delete an attachment
 *
 * $id is the identifier of the attachment
 * $error will contain an error message, if any
 *
 * The function will return true on success or false on failure.
 */
function deleteAttachment($id, &$error='') {
   if (!is_numeric($id)) {
      $error = _('Invalid parameter type');
      return false;
   }
   if (fetchAttachment($id, $a, $error) == false || sizeof($a) == 0) {
      $error = _('No such attachment');
      return false;
   }
   $q = q("delete from incident_attachments where id='%id'", array(
      '%id' => $id
   ));
   $res = db_query($q);
   if ($res == false) {
      $error = _('Unable to delete attachment ').strip_tags($id);
      return false;
   }
   addIncidentComment(array(
      'comment'=>t(_('Attachment deleted. Filename=%file, Type=%type.'),
         array('%file'=>$a['filename'], '%type'=>$a['content_type']))
   ));
   return true;
}

/**
 * Check for the presence of a mail template override.
 * 
 * @param incidentid numeric
 * @param userid     numeric
 *
 * @return the name of the template that overrides the incident template,
 * or false if that value has not been set. Also return 'false' if an
 * invalid value was passed.
 */
function getMailTemplateOverride($incidentid, $userid) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   if (!is_numeric($userid)) {
      return false;
   }
   $res = db_query(q('SELECT mailtemplate_override FROM incident_users WHERE incidentid=%incidentid AND userid=%userid', array(
      '%incidentid'=>$incidentid,
      '%userid'=>$userid
   )));
   if ($res === false) {
      return false;
   }
   $row = db_fetch_next($res);
   if (db_num_rows($res) == 0) {
      return false;
   }
   return trim($row['mailtemplate_override']);
}

/**
 * Set a mail template override
 *
 * @param incidentid numeric
 * @param userid numeric
 * @param template string
 *
 * return true on success, or false on failure
 */
function setMailtemplateOverride($incidentid, $userid, $template) {
   if (!is_numeric($incidentid)) {
      return false;
   }
   if (!is_numeric($userid)) {
      return false;
   }
   if ($template == -1) {
      $template = '';
   }
   $res = db_query(q('SELECT id FROM incident_users WHERE incidentid=%incidentid AND userid=%userid', array(
      '%incidentid'=>$incidentid,
      '%userid'=>$userid
   )));
   if ($res == false) {
      return false;
   }
   $row = db_fetch_next($res);
   if (db_num_rows($res) == 0) {
      return false;
   }
   db_free_result($res);
   $q = q('UPDATE incident_users 
   SET mailtemplate_override=%t
   WHERE id=%id', array(
      '%t'=>trim(db_masq_null(db_escape_string($template))),
      '%id'=>$row['id']
   ));
   $res = db_query($q);
   return true;
}

/**
 * Formatted overview of open incidents
 */
function listIncidents() {

   /* by default, do not filter on state */
   $state = fetchFrom('REQUEST','state');
   defaultTo($state, '');
   
   /* by default, only list open */
   $status = fetchFrom('REQUEST','status');
   defaultTo($status, '');
   if (!empty($status)) {
       $archive = true;
   } else {
       $archive = false;
   }

   $sortkey = strip_tags(fetchFrom('REQUEST','sortkey'));
   defaultTo($sortkey, 'incidentid');

   $page = fetchFrom('REQUEST', 'page', '%d');
   defaultTo($page, 1);

   $filter=array();
   $f=explode(',', $status);
   $f = array_filter($f, 'is_numeric');
   
   if (sizeof($f) == 0) {
       $filter[] = "s1.label in ('open', 'stalled')";
   } else {
       $filter[] = 's1.id in ('.implode(',', $f).')';
   }

   $f = explode(',', $state);
   $f = array_filter($f, 'is_numeric');
   
   if (sizeof($f) > 0) {
       $filter[] = 's2.id in ('.implode(',', $f).')';
   }

   $sqlfilter = 'WHERE '.implode(' AND ', $filter);

   switch ($sortkey) {
      case 'incidentid':
         $sqlfilter .= ' ORDER BY incidentid';
         break;
      case 'constituency':
         $sqlfilter .= ' ORDER BY c.label';
         break;
      case 'address':
         $sqlfilter .= ' ORDER BY hostname';
         break;
      case 'status':
         $sqlfilter .= ' ORDER BY status';
         break;
      case 'state':
         $sqlfilter .= ' ORDER BY state';
         break;
      case 'type':
         $sqlfilter .= ' ORDER BY type';
         break;
      case 'updated':
         $sqlfilter .= ' ORDER BY updated';
         break;
      case 'created':
         $sqlfilter .= ' ORDER BY created';
         break;
      default:
         // Hmmm... should not happen. Manual intervention in the URL?
         $sqlfilter .= ' ORDER BY incidentid';
         $sortkey = 'incidentid';
   }
   $incidents = getOpenIncidents($sqlfilter);

   $out = '';
   $out .= '<div class="left">'.LF;
   $out .= t('<form name="filter" action="%url/incident.php">'.LF, array(
      '%url'=>BASEURL));
   $out .= _('Filters: ').LF;
   $out .= t('<input type="hidden" name="status" value="%s">'.LF, array(
      '%s'=>$status));
   $out .= t('<input type="hidden" name="sortkey" value="%s">'.LF, array(
      '%s'=>$sortkey));
   $out .= t('<input type="hidden" name="page" value="%s">'.LF, array(
      '%s'=>$page));
   $out .= getIncidentStateSelection('state', $state, array(
      ''=>_('[Choose a state]')), 'onChange="document.filter.submit()"');
   $out .= '<input type="submit" value="'._('Filter').'">'.LF;
   $out .= '</form>'.LF;
   $out .= '</div>'.LF;

   $out .= LF.'<div class="right">'.LF;
   $out .= t('<a href="%url/incident.php?action=new" class="button">'.
      _('Add incident').'</a>'.LF, array(
      '%url'=>BASEURL));
   $out .= t('<a href="%url/incident.php?action=addbulk" class="button">'.
      _('Add multiple incidents').'</a>'.LF, array(
      '%url'=>BASEURL));
   $out .= '</div><!-- right -->'.LF.LF;

   $out .= t('<form name="listform" action="%url/incident.php" method="POST">',
      array('%url'=>BASEURL)).LF;
   $out .= '<input type="hidden" name="action" value="massupdate">'.LF;
   $out .= '<table class="horizontal" id="details-overview-body">'.LF;
   $out .= '<tr>'.LF;
   $out .= '  <th><input type="checkbox" onChange="checkAll()"></th>'.LF;

   if ($sortkey == 'incidentid') {
       $out .= t('  <th>%l</th>'.LF, array('%l'=>_('Incident ID')));
   } else {
       $out .= t('  <th><a href="%url/incident.php?page=%p&sortkey=incidentid&status=%status&state=%state">%l</a></th>'.LF, array(
          '%p'=>$page,
          '%url'=>BASEURL,
          '%status'=>$status,
          '%state'=>$state,
          '%l'=>_('Incident ID')));
   }

   if ($sortkey == 'address') {
       $out .= t('  <th>%l</th>'.LF, array('%l'=>_('IP Address')));
   } else {
       $out .= t('  <th><a href="%url/incident.php?page=%p&sortkey=address&status=%status&state=%state">%l</a></th>'.LF, array(
          '%p'=>$page,
          '%url'=>BASEURL,
          '%status'=>$status,
          '%state'=>$state,
          '%l'=>_('IP Address')));
   }

   if ($sortkey == 'constituency') {
       $out .= t('  <th>%l</th>'.LF, array('%l'=>_('Constituency')));
   } else {
       $out .= t('  <th><a href="%url/incident.php?page=%p&sortkey=constituency&status=%status&state=%state">%l</a></th>'.LF, array(
          '%p'=>$page,
          '%url'=>BASEURL,
          '%status'=>$status,
          '%state'=>$state,
          '%l'=>_('Constituency')));
   }

   if ($sortkey == 'type') {
       $out .= t('  <th>%l</th>'.LF, array('%l'=>_('Type')));
   } else {
       $out .= t('  <th><a href="%url/incident.php?page=%p&sortkey=type&status=%status&state=%state">%l</a></th>'.LF, array(
          '%p'=>$page,
          '%url'=>BASEURL,
          '%status'=>$status,
          '%state'=>$state,
          '%l'=>_('Type')));
   }

   if ($sortkey == 'state') {
       $out .= t('  <th>%l</th>'.LF, array('%l'=>_('State')));
   } else {
       $out .= t('  <th><a href="%url/incident.php?page=%p&sortkey=state&state=%state&status=%status">%l</a></th>'.LF, array(
          '%p'=>$page,
          '%url'=>BASEURL,
          '%status'=>$status,
          '%state'=>$state,
          '%l'=>_('State')));
   }

   if ($sortkey == 'created') {
       $out .= t('  <th>%l</th>'.LF, array('%l'=>_('Created')));
   } else {
       $out .= t('  <th><a href="%url/incident.php?page=%p&sortkey=created&state=%state&status=%status">%l</a></th>'.LF, array(
          '%url'=>BASEURL,
          '%p'=>$page,
          '%status'=>$status,
          '%state'=>$state,
          '%l'=>_('Created')));
   }

   if ($sortkey == 'updated') {
       $out .= t('  <th>%l</th>'.LF, array('%l'=>_('Updated')));
   } else {
       $out .= t('  <th><a href="%url/incident.php?page=%p&sortkey=updated&state=%state&status=%status">%l</a></th>'.LF, array(
          '%p'=>$page,
          '%url'=>BASEURL,
          '%status'=>$status,
          '%state'=>$state,
          '%l'=>_('Updated')));
   }
   $out .= '</tr>'.LF;

   // Prepare to run over the list of incidents that need display.
   $count = 0;
   $conslist = getConstituencies();
   foreach ($incidents as $id=>$data) {
      $count++;
      if (($count > $page * PAGESIZE) ||
          ($count <= ($page-1) * PAGESIZE)) {
          continue;
      }
      $hostline= $data['hostname'];
      $hostdesc = strip_tags($data['desc']);
      $addresses = getAddressesForIncident($id);
      if (sizeof($addresses) > 0) {
         $constituency = $conslist[$addresses[0]['constituency']]['label'];
      } else {
         $constituency = '';
      }

      $out .= '<tr>'.LF;
      $out .= t('  <td><input type="checkbox" name="massincidents[]" '.
         'value="%id"></td>'.LF, array(
            '%id' => $id));
      $out .= t('  <td><a href="%url?action=details&incidentid=%id">'.
         '%incidentid</a></td>'.LF, array(
            '%url'=>BASEURL.'/incident.php',
            '%id'=>$id,
            '%incidentid'=>encode_incidentid($id)));
      if (empty($hostdesc)) {
          $out .= t('   <td>%hostline</td>'.LF, array(
             '%hostline'=>$hostline));
      } else {
          $out .= t('   <td><a title="%d" class="hover">%l</addr></td>'.LF, 
           array('%d'=>htmlentities($hostdesc),
                 '%l'=>htmlentities($hostline)));
      }
      $out .= t('   <td>%constituency</td>'.LF, array(
         '%constituency'=>htmlentities($constituency)));
      $out .= t('   <td>%type</td>'.LF, array(
         '%type'=>htmlentities($data['type'])));
      $out .= t('   <td>%state</td>'.LF, array(
         '%state'=>htmlentities($data['state'])));
      $out .= t('   <td>%created</td>'.LF, array(
         '%created'=>Date('d M Y', $data['created'])));
      $out .= t('   <td>%updated</td>'.LF, array(
            '%updated' => Date('d M Y', $data['updated'])));
      $out .= '</tr>'.LF;
   } // foreach
   $out .= '</table>'.LF;
   
   if (sizeof($incidents) > PAGESIZE) {
       $pages = ceil(sizeof($incidents) / PAGESIZE);
       $out .= t(_('Message %n - %m. Page :'), array(
          '%n'=>(1-$page)*PAGESIZE+1,
          '%m'=>$page*PAGESIZE));
       for ($i=1; $i <= $pages; $i++) {
           if ($page == $i) {
               $out .= " <span>$i</span> ";
           } else {
               $out .= t(' <a href="%u/incident.php?page=%n&sortkey=%k&state=%s&status=%S">%i</a> ', array(
                  '%u'=>BASEURL,
                  '%n'=>$i,
                  '%i'=>$i,
                  '%k'=>$sortkey,
                  '%s'=>$status,
                  '%S'=>$state));
           }
       }
   }

   $out .= LF.'<p>'._('With selected:').'</p>'.LF.LF;
   $out .= '<table class="horizontal">'.LF;
   $out .= '<tr>'.LF;
   $out .= '  <td>'._('New State');
   $out .= getIncidentStateSelection('massstate', 'null',
      array('null'=>_('Leave Unchanged')));
   $out .= '  <br/>'.LF;
   $out .=_('New Status');
   $out .= getIncidentStatusSelection('massstatus', 'null',
      array('null'=>_('Leave Unchanged')));
   $out .= '  <br/>'.LF;
   $out .= _('New Type');
   $out .= getIncidentTypeSelection('masstype', 'null',
      array('null'=>_('Leave Unchanged')));
   $out .= '<input type="submit" value="'._('Update').'">'.LF;
   $out .= '</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '  <td>'._('OR').'<br/>'._('Compose mail with ');
   $out .= getMailTemplateSelection('template', 'null', array(
         _('Use preferred template')=>_('Use preferred template')));
   $out .= '</tr>'.LF;
   $out .= '</table>'.LF;
   $out .= '</form>'.LF;

   if ($archive) {
       pageHeader(_('Incident Archive'), array(
          'menu'=>'incidents',
          'submenu'=>'archive'));
   } else {
       pageHeader(_('Incidents'), array(
          'menu'=>'incidents',
          'submenu'=>'incidents'));
   }
   print $out;
   pageFooter();
}

/**
 * Front-end code for incident details screen
 */
function incidentDetails() {
   $address = strip_tags(fetchFrom('SESSION','active_ip'));

   $constituency = fetchFrom('SESSION','constituency_id', '%d');
   $conslist = getConstituencies();

   $incidentid = fetchFrom('REQUEST','incidentid', '%d');
   if (empty($incidentid)) {
      airt_error('PARAM_MISSING', 'incident.php:'.__LINE__);
      reload();
   }

   if (($incident = getIncident($incidentid)) === false) {
     airt_msg(t(_('Requested incident (%s) does not exist.'), array(
        '%s'=>$norm_incidentid)));
     reload();
     exit;
   }
   $_SESSION['incidentid'] = $incidentid;

   pageHeader(t(_('Incident %n'), array(
      '%n'=>normalize_incidentid($incidentid))), array(
       'menu'=>'incidents', 
       'submenu'=>'incidents'));

   $output = '<div class="right">'.LF;
   if (getIncidentStatusDescr($incident['status']) == _('closed') ||
       (getIncidentStatusDescr($incident['status']) == _('stalled'))) {
       $output .= t('<a href="%u/incident.php?action=reopen&incidentid=%i" class="button">%l</a>', array(
          '%u'=>BASEURL,
          '%i'=>$incidentid,
          '%l'=>_('Re-open this incident')));
   } else {
       $output .= t('<a href="%u/incident.php?action=close&incidentid=%i" class="button">%l</a>', array(
          '%u'=>BASEURL,
          '%i'=>$incidentid,
          '%l'=>_('Close this incident')));

       $output .= t('<a href="%u/incident.php?action=stall&incidentid=%i" class="button">%l</a>', array(
          '%u'=>BASEURL,
          '%i'=>$incidentid,
          '%l'=>_('Stall this incident')));
   }
   $output .= '</div><!-- right -->'.LF.LF;

   $output .= '<div id="incident-details">'.LF.LF;
   $output .= '<div class="column">'.LF.LF;

   $output .= '<div class="block">'.LF;
   $output .= t('<form action="%u/incident.php" method="post">'.LF, array(
      '%u'=>BASEURL));
   $output .= '<h3>'._('Basic incident data').'</h3>'.LF;
   $output .= '<table>'.LF;
   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Type of incident').'</td>'.LF;
   $output .= '    <td>'.getIncidentTypeSelection('type', $incident['type']).
      '</td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('State of incident').'</td>'.LF;
   $output .= '    <td>'.getIncidentStateSelection('state', $incident['state']).
      '</td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr valign="top">'.LF;
   $output .= '    <td>'._('Date of incident').'</td>'.LF;
   $output .= '    <td>'.formatDateInput('date', $incident['incidentdate']).'</td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr valign="top">'.LF;
   $output .= '    <td>'._('Short description').'</td>'.LF;
   $output .= '    <td><input type="text" name="desc" size="50" value="'.
      strip_tags($incident['desc']).'"></td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr valign="top">'.LF;
   $output .= '    <td colspan="2">'.LF;
   $output .= '    <textarea name="logging" class="logging">'.
       $incident['logging'].'</textarea>'.LF;
/*
   $output .= '<div class="right"><a href="">'.
        _('Show logging in popup-window').'</a></div>'.LF;
*/
   $output .= '</td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Mail template').'</td>'.LF;
   $output .= '    <td>'.getMailtemplateSelection('template',
      ($incident['template'] == '') ? -1 : $incident['template'], 
      array(-1 => _('None'))).'</td>'.LF;
   $output .= '  </tr>'.LF;
   $output .= '</table>'.LF;
   $output .= '<input type="submit" name="action" value="update" class="right"/>'.LF;
   $output .= '</form>'.LF;
   $output .= '</div> <!-- block -->'.LF;

   $output .= '<div class="block">'.LF;
   $output .= '<h3>'._('Affected IP addresses').'</h3>'.LF;
   $output .= '<table cellpadding="4">'.LF;
   $output .= '<tr>'.LF;
   $output .= '   <td>'._('Role').'</td>'.LF;
   $output .= '   <td>'._('IP Address').'</td>'.LF;
   $output .= '   <td>'._('Constituency').'</td>'.LF;
   $output .= '</tr>'.LF;
   foreach ($incident['ips'] as $address) {
      $cons = getConstituencyIDbyNetworkID(categorize($address['ip']));
      $_SESSION['active_ip'] = $address['ip'];

      $output .= '<tr>'.LF;
      $output .= t('  <td>%addressrole</td>'.LF, array(
            '%addressrole'=>getAddressRoleByID($address['addressrole'])));
      $output .= t('  <td><a title="%t" href="%u/search.php?action=search&q=%q">%l</a></td>'.LF, array(
         '%u'=>BASEURL,
         '%q'=>urlencode($address['ip']),
         '%t'=>($address['hostname']=='') ? _ ('Unknown'):
                 @gethostbyaddr(@gethostbyname($address['ip'])),
         '%l'=>htmlentities($address['ip'])));

      $output .= t('  <td>%s</td>'.LF, array(
         '%s'=>htmlentities($conslist[$cons]['label'])));
      $output .= t('  <td><a href="%u/incident.php?action=editip&ip=%s">%l</a></td>'.LF, array(
         '%u'=>BASEURL,
         '%s'=>urlencode($address['ip']),
         '%l'=>_('edit')));

      $output .= t('  <td><a
      href="%u/incident.php?action=deleteip&incidentid=%incident&ip=%ip&addressrole=%addressrole">%l</a></td>'.LF,
         array(
            '%ip'=>urlencode($address['ip']),
            '%incident'=>urlencode($incident['incidentid']),
            '%addressrole'=>urlencode($address['addressrole']),
            '%l'=>_('remove')));
      $output .= '</tr>'.LF;
   }
   $output .= '</table>'.LF;
   $output .= '<p/>'.LF;
   $output .= '<form action="incident.php" method="POST">'.LF;
   $output .= _('Add an IP-Address').LF;
   $output .= '<input type="hidden" name="action" value="addip">'.LF;
   $output .= '<table>'.LF;
   $output .= '<tr>'.LF;
   $output .= '<td><input type="text" name="ip" size="40"></td>'.LF;
   $output .= '<td>'.getAddressRolesSelection('addressrole').'</td>'.LF;
   $output .= '</td>'.LF;
   $output .= '<td><input type="submit" value="'._('Add').'"></td>'.LF;
   $output .= '</tr>'.LF;
   $output .= '</table>'.LF;
   $output .= '</form>'.LF;
   $output .= '</div><!-- block -->'.LF;

   $output .= '</div><!-- column -->'.LF;


   $output .= '<div class="column">'.LF;
   $output .= '<div class="block" id="history">'.LF;
   $output .= '<h3>'._('History').'</h3>'.LF;
   generateEvent('historyshowpre', array('incidentid'=>$incidentid));
   $output .= formatIncidentHistory($incidentid);
   generateEvent('historyshowpost', array('incidentid'=>$incidentid));
   $output .= t('<form action="%u/incident.php" method="POST">'.LF, array(
      '%u'=>BASEURL));
   $output .= '<input type="hidden" name="action" value="addcomment"/>'.LF;
   $output .= t('<input type="hidden" name="incidentid" value="%i"/>'.LF, 
      array('%i'=>$incidentid));
   $output .= '<input type="text" size="45" name="comment"/>'.LF;
   $output .= '<input type="submit" value="'._('Add comment').'"/>'.LF;
   $output .= '</form>'.LF;
   $output .= '</div><!-- block -->'.LF;

   $output .= '<div class="block">'.LF;
   $output .= '<h3>'._('Affected users').'</h3>'.LF;
   $output .= t('<form action="%u/incident.php" method="POST">'.LF, array(
      '%u'=>BASEURL));
   $output .= t('<input type="hidden" name="incidentid" value="%i">', array(
      '%i'=>$incident['incidentid']));
   $output .= t('<input type="submit" name="action" value="%l"/>', array(
      '%l'=>_('Mail')));
   $output .= t('<input type="submit" name="action" value="%l"/>', array(
      '%l'=>_('Remove')));
   $output .= t('<input type="submit" name="action" value="%l"/>', array(
      '%l'=>_('Update overrides')));
   $output .= '<table>'.LF;

   $_SESSION['current_name'] = '';
   $_SESSION['current_email'] = '';
   foreach ($incident['users'] as $user) {
      $u = getUserByUserId($user);
      if ($_SESSION['current_email'] == '') {
         $_SESSION['current_email'] = $u['email'];
      } else {
         $_SESSION['current_email'] .= ','.$u['email'];
      }
      if ($u['firstname'] == '' && $u['lastname'] == '') {
         $name = $u['email'];
      } else {
         $name = $u['firstname'].' '.$u['lastname'];
      }
      if ($_SESSION['current_name'] == '') {
         $_SESSION['current_name'] = $name;
      } else {
         $_SESSION['current_name'] .= ','.$name;
      }
      $override = getMailtemplateOverride($incident['incidentid'], $u['id']);
      $output .= '<tr>'.LF;
      $output .= '  <td>'.LF;
      $output .= t('<input type="checkbox" name="to[]" value="%u">', array(
         '%u'=>$user));
      $output .= '  </td>'.LF;
      $output .= t('  <td>%email</td>', array(
        '%email'=>$u['email'])).LF;
      $output .= t('  <td>').LF;
      $output .= getMailtemplateSelection(
         'template['.strip_tags($user).']', 
         ($override==false) ? -1 : $override,
         array('-1' => _('None'))).LF;
      $output .= '</tr>'.LF;
   }
   $output .= '</table>'.LF;
   $output .= '</form>'.LF;
   $output .= '<p/>'.LF;
   $output .= t('<form name="jsform" action="%u/incident.php" method="POST">'.LF, array(
      '%u'=>BASEURL));
   $output .= '<input type="hidden" name="action" value="adduser">'.LF;
   $output .= '<table>'.LF;
   $output .= '<tr>'.LF;
   $output .= '<td>'._('Email address').':</td>'.LF;
   $output .= '<td><input onChange="updateCheckboxes()" type="text" size="40" name="email" value=""></td>'.LF;
   $output .= '<td>'.LF;
# mailtemplateselection
   $output .= '</td>'.LF;
   $output .= '</tr>'.LF;
   $output .= '</table>'.LF;
   $output .= '<input type="submit" value="'._('Add').'">'.LF;
   $output .= '</form>'.LF;

   $output .= '</div><!-- block -->'.LF;

# XXX
   $output .= '<div class="block">'.LF;
   $output .= '<h3>'._('Attachments').'</h3>'.LF;
   if (fetchAttachments($incident['incidentid'], $attachments, $error) ==
      false) {
      die($error);
   }
   $output .= '<table>'.LF;
   foreach ($attachments as $aid=>$a) {
      $output .= '<tr>'.LF;
      $output .= '<td>'.$a['filename'].' ('.$a['content-type'].')</td>'.LF;
      $output .= t('<td><a href="%url?action=download&attachment=%id">'._('download').'</a></td>'.LF, array(
         '%url' => BASEURL.'/incident.php',
         '%id' => $aid
      ));
      $output .= t('<td><a onclick="return confirm(\'Are you sure that you want to delete this attachment?\')" href="%url?action=rmattach&attachment=%id">'._('delete').'</a></td>'.LF, array(
         '%url' => BASEURL.'/incident.php',
         '%id' => $aid
      ));
      $output .= '</tr>'.LF;
   }
   $output .= '</table>'.LF;
   $output .= '<form enctype="multipart/form-data" method="POST">'.LF;
   $output .= '<input type="hidden" name="action" value="upload">'.LF;
   $output .= '<input type="hidden" name="incidentid" value="'.
      strip_tags($incident['incidentid']).'">'.LF;
   $output .= '<input size="40" type="file" name="file">'.LF;
   $output .= '<input type="submit" value="Upload">'.LF;
   $output .= '</form>'.LF;
   $output .= '</div><!-- block -->'.LF;
   
   $output .= '<div class="block">'.LF; 
   $output .= '<h3>'._('Linked email messages').'</h3>'.LF;
   if (fetchEmailsForIncident($incident['incidentid'], $msgs, $err) == false){
      airt_msg($err);
   } else {
      if (sizeof($msgs) == 0) {
         $output .= '<em>'._('No linked messages').'</em>'.LF;
      } else {
         $output .= '<table>';
         $output .= '<tr>'.LF;
         $output .= '<th>'._('Sender').'</th>'.LF;
         $output .= '<th>'._('Subject').'</th>'.LF;
         $output .= '<th>'._('Date').'</th>'.LF;
         $output .= '<th>'._('Unlink').'</th>'.LF;
         $output .= '<th>'._('View').'</th>'.LF;
         $output .= '</tr>'.LF;

         $count=0;
         foreach ($msgs as $msgid) {
            if ( fetchMailMessage($msgid, $msg, $err) == false) {
               airt_msg($err);
            } else {
               $output .= '<tr>'.LF;
               $output .= t('<td>%sender</td>'.LF, array(
                  '%sender'=>$msg['sender']));
               $output .= t('<td>%subject</td>'.LF, array(
                  '%subject'=>$msg['subject']));
               $output .= t('<td>%date</td>'.LF, array(
                  '%date'=>date('r', $msg['date'])));
               $output .= '<td>'.LF;
               $output .= t('<a href="%u?action=unlink&msgid=%m&incidentid=%i">'.
                  _('unlink').'</a>'.LF, array(
                  '%u'=>BASEURL.'/incident.php',
                  '%m'=>$msgid,
                  '%i'=>$incident['incidentid']));
               $output .= '</td>'.LF;
               $output .= '<td>'.LF;
               $output .= t('<a href="%u?action=view&msgid=%m">'.
                  _('view').'</a>'.LF, array(
                  '%u'=>BASEURL.'/mailbox.php',
                  '%m'=>$msgid));
               $output .= '</td>'.LF;
               $output .= '</tr>'.LF;
            }
         }
         $output .= '</table>';
      }
   }
   $output .= '</div><!-- block -->'.LF;

   $output .= '<div class="block">'.LF;
   $output .= '<h3>'._('External identifiers').'</h3>'.LF;
   $output .= '<table>'.LF;
   foreach (getExternalIncidentIDs($incidentid) as $extid) {
       $output .= '<tr>'.LF;
       $output .= '<td>'.htmlentities($extid).'</td>'.LF;
       $output .= t('<td><a href="%u/incident.php?action=del_extid&incidentid=%i&extid=%e">%l</a></td>'.LF, array(
          '%u'=>BASEURL,
          '%i'=>urlencode($incidentid),
          '%e'=>urlencode($extid),
          '%l'=>_('remove')));
       $output .= '</tr>'.LF;
   }
   $output .= '</table>'.LF;

   $output .= t('<form action="%u/incident.php" method="GET">'.LF, array(
      '%u'=>BASEURL));
   $output .= '<input type="hidden" name="action" value="add_extid"/>'.LF;
   $output .= t('<input type="hidden" name="incidentid" value="%i"/>'.LF, 
      array('%i'=>urlencode($incidentid)));
   $output .= '<input type="text" name="extid" size="40">'.LF;
   $output .= '<input type="submit" value="'.
      _('Add external identifier').'"/>'.LF;
   $output .= '</form>'.LF;

   $output .= '</div><!-- block -->'.LF;

   $output .= '</div><!-- column -->'.LF;

   $output .= '<br style="clear: both;" />'.LF;
   $output .= '</div><!-- incident-details -->'.LF;
   print $output;
   pageFooter();
}

function closeIncident() {
    $incidentid = fetchFrom('REQUEST', 'incidentid', '%d');
    if (empty($incidentid)) {
        airt_msg(_('Invalid parameter type in ').'incident.plib:'.__LINE__);
        return reload();
    }
    if (($incident = getIncident($incidentid)) == false) {
        airt_msg(_('Invalid incident number in ').'incident.plib:'.__LINE__);
        return reload();
    }
    $status = getIncidentStatus();
    if (($id = array_search('closed', $status)) == false) {
        airt_msg(_('Could not locate status closed in ').
           'incident.plib:'.__LINE__);
        return reload();
    }
    updateIncident($incidentid, array('status'=>$id));
    addIncidentComment(array(
       'comment'=>_('Incident closed'),
       'incidentid'=>$incidentid
    ));
    airt_msg(t(_('Incident %n closed'), array(
       '%n'=>normalize_incidentid($incidentid))));
    reload();
}

function reopenIncident() {
    $incidentid = fetchFrom('REQUEST', 'incidentid', '%d');
    if (empty($incidentid)) {
        airt_msg(_('Invalid parameter type in ').'incident.plib:'.__LINE__);
        return reload();
    }
    if (($incident = getIncident($incidentid)) == false) {
        airt_msg(_('Invalid incident number in ').'incident.plib:'.__LINE__);
        return reload();
    }
    $status = getIncidentStatus();
    if (($id = array_search('open', $status)) == false) {
        airt_msg(_('Could not locate status open in ').
           'incident.plib:'.__LINE__);
        return reload();
    }
    updateIncident($incidentid, array('status'=>$id));
    addIncidentComment(array(
       'comment'=>_('Incident reopened'),
       'incidentid'=>$incidentid
    ));
    airt_msg(t(_('Incident %n reopened'), array(
       '%n'=>normalize_incidentid($incidentid))));
    reload();
}

function stallIncident() {
    $incidentid = fetchFrom('REQUEST', 'incidentid', '%d');
    if (empty($incidentid)) {
        airt_msg(_('Invalid parameter type in ').'incident.plib:'.__LINE__);
        return reload();
    }
    if (($incident = getIncident($incidentid)) == false) {
        airt_msg(_('Invalid incident number in ').'incident.plib:'.__LINE__);
        return reload();
    }
    $status = getIncidentStatus();
    if (($id = array_search('stalled', $status)) == false) {
        airt_msg(_('Could not locate status stalled in ').
           'incident.plib:'.__LINE__);
        return reload();
    }
    updateIncident($incidentid, array('status'=>$id));
    addIncidentComment(array(
       'comment'=>_('Incident stalled'),
       'incidentid'=>$incidentid
    ));
    airt_msg(t(_('Incident %n stalled'), array(
       '%n'=>normalize_incidentid($incidentid))));
    reload();
}


function newIncident() {
   pageHeader(_('Record new incident'),array(
       'menu'=>'incidents', 
       'submenu'=>'incidents'));
   
   $output = '<div id="incident-details">'.LF;

   $output .= '<div class="block">'.LF;
   $output .= t('<form action="%u/incident.php" method="post">'.LF, array(
      '%u'=>BASEURL));
   $output .= '<h3>'._('Basic incident data').'</h3>'.LF;
   $output .= '<table>'.LF;
   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Type of incident').'</td>'.LF;
   $output .= '    <td>';
   $output .= getIncidentTypeSelection('type', getIncidentTypeDefault());
   $output .= '</td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('State of incident').'</td>'.LF;
   $output .= '    <td>';
   $output .= getIncidentStateSelection('state', getIncidentStateDefault());
   $output .= '</td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr valign="top">'.LF;
   $output .= '    <td>'._('Date of incident').'</td>'.LF;
   $output .= '    <td>'.formatDateInput('date', time()).'</td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr valign="top">'.LF;
   $output .= '    <td>'._('Short description').'</td>'.LF;
   $output .= '    <td>'.LF;
   $output .= '    <input type="text" name="desc" size="50" value="">'.LF;
   $output .= '    </td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr valign="top">'.LF;
   $output .= '    <td colspan="2">'.LF;
   $output .= '    <textarea name="logging" class="logging"></textarea>'.LF;
   $output .= '</td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr>'.LF;
   $output .= '    <td>'._('Mail template').'</td>'.LF;
   $output .= '    <td>';
   $output .= getMailtemplateSelection('template', -1);
   $output .= '    </td>';
   $output .= '  </tr>'.LF;
   
   $output .= '  <tr valign="top">'.LF;
   $output .= t('    <td><a title="%s">%l</a></td>', array(
      '%s'=>_('Provide 1 IP address or hostname per line'),
      '%l'=>_('IP Address')));
   $output .= '    <td><textarea class="newips" name="ips"></textarea></td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '  <tr valign="top">'.LF;
   $output .= t('    <td><a title="%s">%l</a></td>', array(
      '%s'=>_('Provide 1 email address per line'),
      '%l'=>_('Users')));
   $output .= '    <td><textarea class="newusers" name="users"></textarea></td>'.LF;
   $output .= '  </tr>'.LF;
   
   $output .= '  <tr valign="top">'.LF;
   $output .= t('    <td><a title="%s">%l</a></td>', array(
      '%s'=>_('Provide 1 external identifier per line'),
      '%l'=>_('Additional IDs')));
   $output .= '    <td><textarea class="newids" name="ids"></textarea></td>'.LF;
   $output .= '  </tr>'.LF;

   $output .= '</table>'.LF;
   $output .= '<input type="submit" name="action" value="'.
     _('Add').'" class="right"/>'.LF;
   $output .= '</form>'.LF;
   $output .= '</div> <!-- block -->'.LF;
   $output .= '</div> <!-- incident-details -->'.LF;

   print $output;
   return;
}


function addIncident() {
   $ips = fetchFrom('REQUEST', 'ips');
   defaultTo($ips, '');
   $ips = explode("\r\n", $ips);
 
   $users = fetchFrom('REQUEST', 'users');
   defaultTo($users, '');
   $users = explode("\r\n", $users);
   
   $newids = fetchFrom('REQUEST', 'ids');
   defaultTo($newids, '');
   $newids = explode("\r\n", $newids);


   $date_day = trim(fetchFrom('POST', 'date_day', '%d'));
   $date_month = trim(fetchFrom('POST', 'date_month', '%d'));
   $date_year = trim(fetchFrom('POST', 'date_year', '%d'));
   $date_hour = trim(fetchFrom('POST', 'date_hour', '%d'));
   $date_minute = trim(fetchFrom('POST', 'date_minute', '%d'));
   $date_second = trim(fetchFrom('POST', 'date_second', '%d'));
   $date = strtotime(sprintf('%04d-%02d-%04d %02d:%02d:%02d',
      $date_year, $date_month, $date_day,
      $date_hour, $date_minute, $date_second));

   $template = strip_tags(fetchFrom('POST', 'template'));
   if ($template == -1) {
      $template = '';
   }

   $status = getIncidentStatus();
   if (($statusid = array_search('open', $status)) === false) {
       $statusid = getIncidentStatusDefault();
   }

   $incidentid   = createIncident(array(
      'state'=>fetchFrom('POST', 'state', '%d'),
      'status'=>$statusid,
      'type'=>fetchFrom('POST', 'type', '%d'),
      'date'=>$date,
      'logging'=>db_escape_string(trim(fetchFrom('POST', 'logging'))),
      'template'=>$template,
      'desc'=>trim(fetchFrom('POST', 'desc'))));

   foreach ($ips as $ip) {
      $ip = trim($ip);
      if (empty($ip)) continue;
      if (preg_match('/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/', $ip) == 0) {
          $ip = @gethostbyname($ip);
      }
      addIPtoIncident($ip, $incidentid, 
         fetchFrom('POST', 'addressrole', '%d'));
   }
 
   foreach ($users as $addr) {
      $addr = strtolower(trim($addr));
      if (empty($addr)) continue;
      $override = fetchFrom('REQUEST', 'mailtemplate_override');
      defaultTo($override, '');
      if ($override == -1) {
         $override = '';
      }
      $user = getUserByEmail($addr);

      /* user does not yet exist; check if we need to add it */
      if (!$user) {
         /* create new user */
         addUser(array('email'=>$addr));
         $user = getUserByEmail($addr);

      } 

      /* add new user to existing incident */
      addUserToIncident($user['id'], $incidentid, $override);
      $incident_userids[] = $user['id'];
   }

   if (!empty($newids)) {
       addExternalIncidentIDs($incidentid, $newids);
   }
   reload();
}

?>
