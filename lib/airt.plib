<?php
/* vim:syntax=php shiftwidth=3 tabstop=3
 * $Id$ 

 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005   Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

///// Init code, executed once at library load time. ////////////////////////

require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/error.plib';
require_once LIBDIR.'/user.plib';
require_once LIBDIR.'/incident.plib';
require_once LIBDIR.'/importqueue.plib';

define('LF',"\n");

// Find out whether we run as web server module or as CLI interpreter.
if ($_SERVER['DOCUMENT_ROOT']=='') {
   // We run as CLI.
   define('AIRT_RUN_MODE','CLI');
} else {
   // We run as web server module.
   define('AIRT_RUN_MODE','HTTP');
}

// We already have a database connection here. Check for a match between
// code and database AIRT version.
$q = "SELECT value FROM VERSIONS where key='airtversion'";
$res = db_query($q) or die(_('Unable to connect to database.'));
$row = db_fetch_next($res);
$dbVersion = $row['value'];
$br = (AIRT_RUN_MODE=='CLI') ? '' : '<br/>';
if (AIRT_VERSION != $dbVersion) {
   echo _('Expected database version: ').AIRT_VERSION.$br.LF;
   echo _('Actual database version:   ').$dbVersion.$br.LF;
   echo _('Cannot continue, needs database update first.').LF;
   exit;
}

// Include custom functions if requested.
if (defined('CUSTOM_FUNCTIONS')) {
  require_once CUSTOM_FUNCTIONS;
}

// The next code block is only meant for HTTP runtime environments.
if (AIRT_RUN_MODE=='HTTP') {
   @session_start();
   if (!array_key_exists('BASEURL', $_SESSION)) {
      // see if the sessions has been specified explicitly
      if (defined('BASEURL')) {
         $_SESSION['BASEURL'] = BASEURL;
      } else {
         $_SESSION['BASEURL'] = dirname($_SERVER['PHP_SELF']);
      }
   }
   $BASEURL=$_SESSION['BASEURL'];

   // set default in session
   $lang = 'C';
   if (array_key_exists('language', $_SESSION)) {
      $lang = $_SESSION['language'];
   } else {
      if (Setup::getOption('defaultlanguage', $defaultlang) === true) {
         $lang = $defaultlang;
      } else {
         $lang = 'en_US.utf8';
      }
      $userid = fetchFrom('SESSION', 'userid');
      if ($userid != '') {
         $user = getUserByUserID($userid);
         if ($user != false && array_key_exists('language', $user) && $user['language'] != '') {
            $lang = $user['language'];
         }
      }
      $_SESSION['language'] = $lang;
   }

   // We want locale $lang; try to get it.
   $locale = setlocale(LC_ALL,$lang);
   if ($locale===FALSE) {
      // Serious problem that the system admin must fix. Bail out.
      airt_msg(sprintf('Locale problem! Could not set up locale \'%s\'; please fix.<br>',
             $lang));
      airt_msg('This is not an AIRT problem, but an operating system level problem.<br>');
   } else {
      // Successfully got the locale. Let gettext know where to find the message
      // catalogs.
      bindtextdomain ('airt', LIBDIR.'/locale');
      textdomain('airt');
   }

   if (!isset($public)){
      $public = 0;
   }

   airt_check_session($public);
} // HTTP runtime environment

function airt_check_session($public) {
   $BASEURL=BASEURL;
   if (!isset($public) || !$public) {
       if (!array_key_exists('username', $_SESSION)) {
           Header("Location: $BASEURL/login.php?ref=$_SERVER[REQUEST_URI]");
           exit;
       }

       if (!array_key_exists('userid', $_SESSION)) {
           Header("Location: $BASEURL/login.php?ref=$_SERVER[REQUEST_URI]");
           exit;
       }

       if (!array_key_exists('ip', $_SESSION)) {
           Header("Location: $BASEURL/login.php?ref=$_SERVER[REQUEST_URI]");
           exit;
       }

       if (!array_key_exists('last', $_SESSION)) {
           Header("Location: $BASEURL/login.php?ref=$_SERVER[REQUEST_URI]");
           exit;
       }

       // check session ip
       if ($_SERVER['REMOTE_ADDR'] != $_SESSION['ip']) {
           Header("Location: $BASEURL/login.php?ref=$_SERVER[REQUEST_URI]");
           exit;
       }

       // check expiration
       $last = $_SESSION['last'];
       $now = time();

       Setup::getOption('session_timeout', $session, true);
       if ($now - $last > $session) {
           reload(BASEURL.'/logout.php');
           exit;
       }

       // update session timestamp
       $_SESSION['last'] = $now;
   }
}

///// End init code; remaining file contains only function definitions, ////
///// but these are partially conditional. /////////////////////////////////

function mainMenu($active) {
   $out = '';
   $out .= t('       <a href="%url/incident.php" %active>%i</a>'.LF,
      array('%url'=>BASEURL, 
            '%i'=>_('Incidents'),
            '%active'=>($active == 'incidents') ? 'class="active"' : ''));
   $out .= t('       <a href="%url/constituencies.php" %active>%i</a>'.LF, 
      array('%url'=>BASEURL,
            '%i'=>_('Constituencies'),
            '%active'=>($active == 'constituencies') ? 'class="active"' : ''));
   $out .= t('       <a href="%url/mailtemplates.php" %active>%i</a>'.LF, 
      array('%url'=>BASEURL,
            '%i'=>_('Mail'),
            '%active'=>($active == 'mail') ? 'class="active"' : ''));
   $out .= t('       <a href="%url/settings.php" %active>%i</a>'.LF, 
      array('%url'=>BASEURL,
            '%i'=>_('Settings'),
				'%active'=>($active == 'settings') ? 'class="active"' : ''));
   return $out;
}


function subMenu($menu, $submenu, $title='') {
   $out = '';
   $closed = array_search('closed', getIncidentStatus());
   if ($closed === false) {
       airt_msg(_('Unable to locate ID for incident status closed'));
       $closed = getIncidentStatusDefault();
   }
   $incidents = sizeof(getOpenIncidents());
   if (queueGetItems($elements, $error)) {
       $elements = sizeof($elements);
   } else {
       $elements = _('Unknown');
   }

   switch ($menu) {
       case 'incidents':
           $out .= t('  <a href="%url/incident.php" %active>%l</a>'.LF, 
           array(
              '%url'=>BASEURL,
              '%l'=>_('Incidents ('.$incidents.')'),
              '%active'=>($submenu == 'incidents' ? 'class="active"' : '')));

           $out .= t('  <a href="%url/importqueue.php" %active>%l</a>'.LF, 
           array(
              '%url'=>BASEURL,
              '%l'=>_('Import queue ('.$elements.')'),
              '%active'=>($submenu == 'importqueue' ? 'class="active"' : '')));
 
           $out .= t('  <a href="%url/incident.php?action=list&status=%s" %active>%l</a>'.LF, 
           array(
              '%s'=>$closed,
              '%url'=>BASEURL,
              '%l'=>_('Incident Archive'),
              '%active'=>($submenu == 'archive' ? 'class="active"' : '')));

           $out .= t('  <a href="%url/stats.php" %active>%l</a>'.LF, 
           array(
              '%url'=>BASEURL,
              '%l'=>_('Statistics'),
              '%active'=>($submenu == 'reports' ? 'class="active"' : '')));
           break;

        case 'constituencies':
           $out .= t('  <a href="%url/constituencies.php" %active>%l</a>'.LF, 
           array(
              '%url'=>BASEURL,
              '%l'=>_('Constituencies'),
              '%active'=>($submenu == 'constituencies'?'class="active"' : '')));

           $out .= t('  <a href="%url/networks.php" %active>%l</a>'.LF, 
           array(
              '%url'=>BASEURL,
              '%l'=>_('Networks'),
              '%active'=>($submenu == 'networks' ? 'class="active"' : '')));

           $out .= t('  <a href="%url/constituency_contacts.php" %active>%l</a>'.LF, 
           array(
              '%url'=>BASEURL,
              '%l'=>_('Constituency Contacts'),
              '%active'=>($submenu == 'contacts' ? 'class="active"' : '')));
           break;

        case 'mail':
           $out .= t('   <a href="%url/mailtemplates.php" %active>%l</a>', 
           array(
              '%url'=>BASEURL,
              '%l'=>_('Mail templates'),
              '%active'=>($submenu == 'templates' ? 'class="active"' : '')));

           $out .= t('   <a href="%url/mailbox.php" %active>%l</a>', 
           array(
              '%url'=>BASEURL,
              '%l'=>_('Mailbox'),
              '%active'=>($submenu == 'mailbox' ? 'class="active"' : '')));
           break;
   }
  
   $tmp = generateEvent('submenu-post', array(
      'menu'=>$menu, 'submenu'=>$submenu, 'pagetitle'=>$title));
   $out .= implode(' ', $tmp);

   return $out;
}


/**
 * Display the page header
 * @in title The title of the page
 */
function pageHeader($title='', $options=array()) {
   if (!is_array($options)) {
       $option = array();
   }

   if (array_key_exists('event', $options)) {
       $event = $options['event'];
   } else {
       $event = true;
   }
   if (array_key_exists('showmenu', $options)) {
       $showmenu = $options['showmenu'];
   } else {
       $showmenu = true;
   }
   if (array_key_exists('menu', $options)) {
       $menu = $options['menu'];
   } else {
       $menu = 'unknown';
   }
   if (array_key_exists('submenu', $options)) {
       $submenu = $options['submenu'];
   } else {
       $submenu = 'unknown';
   }

   $userid = fetchFrom('SESSION', 'userid');
   if (empty($userid) || 
      ($u = getUserByUserId($_SESSION['userid'])) === false) {
       $name = _('Unknown');
   } else {
       $name = $u['firstname'].' '.$u['lastname'];
   }
   $username = strip_tags(fetchFrom('SESSION', 'username'));
   defaultTo($username,'Not logged in');
   $messages = '';
   if (isset($_SESSION['msg'])) {
      $messages = $_SESSION['msg'];
      unset($_SESSION['msg']);
   }


   print '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" '.
         '   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'.LF;
   print '<html>'.LF;
   print '  <head>'.LF;
   print '      <title>AIRT</title>'.LF;
   print t('     <link href="%url/airt-style.css" rel="stylesheet" '.
     'type="text/css">'.LF, array(
     '%url'=>BASEURL));
   print '  </head>'.LF;

   print '<body>'.LF;
   print '<div id="wrapper">'.LF;
   if ($showmenu === true) {
      if ((Setup::getOption('instancename', $instance)) === false) {
	 $instance = _('Default instance');
      }

      print '  <div id="header">'.LF.LF;
      print '  <div class="left">'.LF;
      print t('  <a href="%url/incident.php" title="'._('Back to the first page').
         '"><img src="images/airt_logo.png" alt="AIRT" id="logo" /></a>'.LF, 
         array('%url'=>BASEURL));
      print '    <h2>Application for Incident Response Teams</h2>'.LF;
      print '    <h4>'.htmlentities($instance).'</h4>'.LF;
      print '    <div id="navigation">'.LF;
      print mainMenu($menu);
      print '    </div><!-- navigation -->'.LF;
      print '  </div><!-- left -->'.LF;
      print '  <div class="right">'.LF;
      print t('    <div id="userinfo">'._('Logged in as %name').
         ' (<a href="%url/logout.php">%l</a>)</div>'.LF, array(
         '%name'=>htmlentities($name),
         '%url'=>BASEURL,
         '%l'=>_('Log out')));

      print t('    <form action="%u/search.php" method="get">'.LF, array(
         '%u'=>BASEURL));
      print '      <input type="hidden" name="action" value="query"/>'.LF;
      print '      <input type="text" name="query" />'.LF;
      print t('      <input type="submit" value="%l" />', array(
         '%l'=>_('Search')));
      print '    </form>'.LF;

      print LF.'    <div id="tools">'.LF;
      print '    <ul>'.LF;
      print t('    <li><span>%l</span>'.LF, array(
         '%l'=>_('Tools')));

      print '      <ul>'.LF;

      $res = db_query(q("
         SELECT url, label
         FROM   urls
         WHERE  NOT menu_position IS NULL
         ORDER BY menu_position"))
      or die(_('Unable to query database.'));

      while (($row = db_fetch_next($res)) !== false) {
         $url = $row['url'];
         $description = $row['label'];
         print t('<li><a target="_blank" href="%url">%description</a></li>'.LF, array(
            '%url'=>$url,
            '%description'=>strip_tags($description)));
      }

      print '    </ul></li>'.LF;
      print '    </ul>'.LF;
      print '  </div><!-- tools -->'.LF;
      print '  </div><!-- right -->'.LF;
      print '</div><!-- header -->'.LF;

      print LF.'<div id="submenu">'.LF;
      print subMenu($menu, $submenu, $title);
      print '</div><!-- submenu -->'.LF;
   } // menu is true
   print LF.'<div class="content">'.LF;
   if (!empty($messages)) {
       print t('<div class="messages">%msg</div>'.LF, array(
          '%msg'=>htmlentities($messages)));
   }
   print t('<h1>%title</h1>'.LF, array('%title'=>htmlentities($title)));
} // pageheader()


/**
 * Display the page footer
 * @in pagefooter The footer of the page
 */
function pageFooter() {
    print '<br style="clear: both;". />'.LF;
    print '</div><!-- content -->'.LF;
    print '</div><!-- wrapper -->'.LF;
    print '<div id="footer">'.LF;
    print '(C) AIRT Project. Licensed under GNU General Public License, v2';
    print '</div><!-- footer -->'.LF;
    print '</body>'.LF;
    print '</html>'.LF;

} // pagefooter()


/**
 * Format an email addres
 */
function email($msg) {
   printf("<a href=\"%s\">%s</a>", $msg, $msg);
}

/** Encodes an incident ID with the configured prefix.
 * @param $id Numerical incident ID
 * @return A string in the format PREFIX#number
 */
function encode_incidentid($id) {
   return sprintf("%s%06d", INCIDENTID_PREFIX, $id);
}

/** Extract the numerical incident ID from a normalized incident ID.
 * @param $id String containing the normalized incident ID
 * @return a numerical value containing the incident id.
 */
function decode_incidentid($id) {
   $x = ereg_replace(INCIDENTID_PREFIX, "", $id);
   $x = ereg_replace("^0*", "", $x);
   return $x;
}

/** Normalize an incident ID.
 * @param $id Numeric or previously normalized incident id
 * @return Normalized incidentid
 */
function normalize_incidentid($id) {
    $id = decode_incidentid($id);
    return encode_incidentid($id);
}

/** GUI component which returns an HTML <OPTION>. Both option and value are
 * stripped of HTML/PHP code and are properly HTML entity encoded.
 *
 * @param $label Label of the option
 * @param $value Value of the option
 * @param $default Default value; makes option SELECTED is $value==$default
 * @return HTML string
 */
function choice($label, $value, $default) {
    if ($value == $default)
        return sprintf('<OPTION value="%s" SELECTED>%s</OPTION>'.LF,
            htmlentities(strip_tags($value)),
            htmlentities(strip_tags($label)));
    else
        return sprintf('<OPTION value="%s">%s</OPTION>'.LF,
            htmlentities(strip_tags($value)),
            htmlentities(strip_tags($label)));
}

/** Register an event handler.
 * @param $event Event to register for
 * @param $function Function to call when $event is generated.
 */
function registerEventHandler($event, $function) {
   global $glEventHandlers;

   if (!isset($glEventHandlers)) $glEventHandlers = array();

   if (array_key_exists($event, $glEventHandlers))
      array_push($glEventHandlers[$event], $function);
   else
      $glEventHandlers[$event] = array($function);
}

/** Generate an event.
 * @param $event Event to generate
 * @param $data Associative array containing additional information about event
 */
function generateEvent($event, $data=array()) {
   global $glEventHandlers;

   $out = array();
   if (isset($glEventHandlers) &&
       array_key_exists($event, $glEventHandlers)) {
      foreach ($glEventHandlers[$event] as $fun) 
         $out[]=call_user_func($fun, $data);
   }
   return $out;
}

/* based on Drupal code; format the given string for output, making pattern
 * replacesments when required. This will be the place to implement locale
 * support.
 *
 *   $string A string containing the English string to translate.
 *
 *   $args An associative array of replacements to make after translation.
 *   Incidences of any key in this array are replaced with the corresponding
 *   value.
 */
function t($string, $args = 0) {
   global $locale;
   if (!$args) {
      return utf8_encode($string);
   } else {
      return utf8_encode(strtr($string, $args));
   }
}


/* based on Drupal code; replace patterns in sql string
 *   $string A string containing the English string to translate.
 *
 *   $args An associative array of replacements to make after translation.
 *   Incidences of any key in this array are replaced with the corresponding
 *   value.
 */
function q($string, $args = 0) {
   if (!$args) {
      return $string;
   } else {
      return strtr($string, $args);
   }
}

/* schedule a message to be printed the next time a page is loaded. The
 * optional priority will be used to specify a feedback level
 */
function airt_msg($msg, $prio=0) {
   if (isset($_SESSION['msg'])) {
      $_SESSION['msg'] .= $msg;
   } else {
      $_SESSION['msg'] = $msg;
   }
}

/** Central HTTP parameter and session variable fetcher.
 * Should cater for most standard requests, does not have any known side
 * effects. Is NOT meant to make strings SQL-safe, use the DB-specific
 * library calls for this. Gets and formats data from a GET, POST or COOKIE
 * variable, or from REQUEST (combined GET and POST). Same for SESSION.
 *
 * Is safe to use no matter what register_globals or get_magic_quotes_gpc
 * are set to. The return value is of type string in most cases, unless the
 * requested name has '[]' appended to force it to type array. When a
 * formatting string (such as '%d') is given, this may also lead to return
 * values of type integer or float.
 *
 * If the requested input variable is absent from the PHP input arrays, the
 * returned value is either '' or array(). It won't trigger a PHP warning.
 * 
 * @param $source = One of 'GET', 'POST', 'COOKIE', 'REQUEST', 'SESSION'.
 * @param $name   = The variable to look up in the input arrays.
 * @param $format = Optionally, printf() format specifier for the value.
 * @return The requested input variable, no escaped quotes, various types
 * possible.
 */
function fetchFrom($source,$name,$format='') {

  // Set up the default return value for the requested parameter, used in
  // case it is not available. Basically only two types: string and array.
  if (substr($name,-2,2)=='[]') {
     $value = array();
     // Remove the trailing '[]'.
     $name = substr($name,0,-2);
  } else {
     $value = '';
  }

  // Fetch the data, force empty if not available.
  switch ($source) {
    case 'GET':
      if (isset($_GET[$name])) {
        $value = $_GET[$name];
      }
      break;
    case 'POST':
      if (isset($_POST[$name])) {
        $value = $_POST[$name];
      }
      break;
    case 'COOKIE':
      if (isset($_COOKIE[$name])) {
        $value = $_COOKIE[$name];
      }
      break;
    case 'REQUEST':
      if (isset($_REQUEST[$name])) {
        $value = $_REQUEST[$name];
      }
      break;
    case 'SESSION':
      if (isset($_SESSION[$name])) {
        $value = $_SESSION[$name];
      }
      break;
    case 'FILES':
      if (isset($_FILES[$name])) {
         $value = $_FILES[$name];
      }
      break;
    default:
      die(sprintf(_(
        "Unknown fetch source type '%s'. Script terminated."),
        $source));
  }

  // If magic quotes is ON, strip all added slashes.
  if (get_magic_quotes_gpc()) {
    if (is_array($value)) {
       foreach($value as $index=>$val) {
          $value[$index] = stripSlashes($val);
       }
    } else {
      $value = stripSlashes($value);
    }
  }

  // If format is given, apply it.
  if ($format!='') {
    if (is_array($value)) {
       foreach($value as $index=>$val) {
          $value[$index] = sprintf($format,$val);
       }
    } else {
      $value = sprintf($format,$value);
    }
  }

  return $value;

}// fetchFrom


/** Uses a default value for a variable if the variable is empty ('').
 * In case the variable does not exist yet, it is silently created with the
 * default value. If the variable is an empty array() it is considered empty
 * and the given default value may be an array.
 * @param[in|out] $variable The variable (reference) which needs to be
 *                          checked and possibly defaulted.
 * @param $default_value    The default value of the variable.
 */
function defaultTo(&$variable, $default_value) {
   if (empty($variable)) {
      $variable = $default_value;
   }
}// defaultTo


/** Directs the browser to reload the current page.
 * Uses a 'Location:' header (so needs to be called before any other output)
 * and directly exits the script.
 * @param $url Optionally, a full URL to jump to instead of to the current
 *             page.
 */
function reload($url='') {
   if ($url=='') {
      header('Location: '.$_SERVER['PHP_SELF']);
   } else {
      header('Location: '.$url);
   }
   exit;
}// reload


/** Create an HTML fragment for inputing a date.
 * @param $var Name of the variable containing the date.
 * @param $default Default date in Unix format (Date('U'))
 * The function will create 6 HTML variables:
 * $var_day, $var_month, $var_year, $var_hour, $var_min, $var_sec
 */
function formatDateInput($var='', $default='') {
   $months = array(
      1=>_('Jan'),   7=>_('Jul'),
      2=>_('Feb'),   8=>_('Aug'),
      3=>_('Mar'),    9=>_('Sep'),
      4=>_('Apr'),  10=>_('Oct'),
      5=>_('May'),  11=>_('Nov'),
      6=>_('Jun'),   12=>_('Dec'));
   $var = strip_tags($var);
   $out = '<select name="'.$var.'_day">'.LF;
   if ($default=='') {
      $default = Date('U');
   }
   $today_day=Date('j', $default);
   $today_month=Date('n', $default);
   $today_year=Date('Y', $default);
   $today_hour=Date('H', $default);
   $today_min=(int)Date('i', $default);
   $today_sec=(int)Date('s', $default);
   for ($i=1;$i<32;$i++) {
      $out .= sprintf('<option %s value="%d">%02d</option>'.LF, 
         ($i==$today_day)?'SELECTED':'', $i, $i);
   }
   $out .= '</select>'.LF;
   $out .= '<select name="'.$var.'_month">'.LF;
   for ($i=1;$i<13;$i++) {
      $out .= sprintf('<option %s value="%d">%s</option>'.LF,
         ($i==$today_month)?'SELECTED':'', $i, $months[$i]);
   }
   $out .= '</select>'.LF;
   $out .= '<input type="text" size="4" width="4" name="'.$var.'_year" value="'.$today_year.'">'.LF;

   $out .= '&nbsp;&nbsp;&nbsp;';

   $out .= '<select name="'.$var.'_hour">'.LF;
   for ($i=0;$i<24;$i++) {
      $out .= sprintf('<option %s value="%d">%02d</option>'.LF,
         ($i==$today_hour)?'SELECTED':'', $i, $i);
   }
   $out .= '</select>'.LF;
   $out .= '<select name="'.$var.'_minute">'.LF;
   for ($i=0;$i<60;$i++) {
      $out .= sprintf('<option %s value="%d">%02d</option>'.LF,
         ($i==$today_min)?'SELECTED':'', $i, $i);
   }
   $out .= '</select>'.LF;
   $out .= '<select name="'.$var.'_second">'.LF;
   for ($i=0;$i<60;$i++) {
      $out .= sprintf('<option %s value="%d">%02d</option>'.LF,
         ($i==$today_sec)?'SELECTED':'', $i, $i);
   }
   $out .= '</select>'.LF;
   return $out;
} // formatDateInput


/** Retrieve a list of available languages.
 * @return An associative array. The key of the array is the ISO language
 *    code, the value is a descriptive name of the language (when available).
 */
function getAvailableLanguages() {
   $localedir = LIBDIR.'/locale';
   if (!is_dir($localedir)) {
      airt_msg(_('Unable to open locale directory.'));
      return array();
   }
   $d = opendir($localedir);
   if ($d == false) {
      airt_msg(_('Unable to open locale directory.'));
      return array();
   }
   $l = array();
   while ($file = readdir($d)) {
      // only turn directories that do not start with a dot.
      if (is_dir($localedir.'/'.$file) && substr($file, 0, 1) != '.') {
         $l[$file] = '';
      }
   }
   closedir($d);
   return $l;
}

/** Format the list of available languages as a HTML selection box.
 * @param [in]  $name - HTML name of the selection box
 * @param [in]  $default - Default value (optional)
 * @param [in]  $extra - Extra values to be added (optional)
 * @return an HTML formatted string containing a <select> element.
 */
function formatAvailableLanguages($name, $default='', $extra=array()) {
   $out = '<select name="'.htmlentities($name).'">'.LF;
   foreach ($extra as $code => $desc) {
      $out .= choice($desc == '' ? $code : $desc, $code, $default).LF;
   }
   foreach (getAvailableLanguages() as $code => $desc) {
      $out .= choice($desc == '' ? $code : $desc, $code, $default).LF;
   }
   $out .= '</select>'.LF;
   return $out;
}

function formatRelativeDate($timestamp) {
   return date('Y-m-d H:i:s', $timestamp);
}
?>
