<?php
/* vim:syntax=php shiftwidth=3 tabstop=3
 * $Id$ 

 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005	Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

///// Init code, executed once at library load time. ////////////////////////

require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/error.plib';

define('LF',"\n");

// Find out whether we run as web server module or as CLI interpreter.
if ($_SERVER['DOCUMENT_ROOT']=='') {
   // We run as CLI.
   define('AIRT_RUN_MODE','CLI');
} else {
   // We run as web server module.
   define('AIRT_RUN_MODE','HTTP');
}

// We already have a database connection here. Check for a match between
// code and database AIRT version.
$q = "SELECT value FROM VERSIONS where key='airtversion'";
$res = db_query($q) or die('Unable to connect to database.');
$row = db_fetch_next($res);
$dbVersion = $row['value'];
$br = (AIRT_RUN_MODE=='CLI') ? '' : '<br/>';
if (AIRT_VERSION != $dbVersion) {
   echo "Expected database version: ".AIRT_VERSION."$br\n";
   echo "Actual database version:   $dbVersion$br\n";
   echo "Cannot continue, needs database update first.\n";
   exit;
}

// Include custom functions if requested.
if (defined('CUSTOM_FUNCTIONS')) {
  require_once CUSTOM_FUNCTIONS;
}

// The next code block is only meant for HTTP runtime environments.
if (AIRT_RUN_MODE=='HTTP') {
   @session_start();
   if (!array_key_exists('BASEURL', $_SESSION)) {
      // see if the sessions has been specified explicitly
      if (defined('BASEURL')) {
         $_SESSION['BASEURL'] = BASEURL;
      } else {
         $_SESSION['BASEURL'] = dirname($_SERVER['PHP_SELF']);
      }
   }
   $BASEURL=$_SESSION['BASEURL'];

   if (!isset($public) || !$public) {
       if (!array_key_exists("username", $_SESSION)) {
           Header("Location: $BASEURL/login.php");
           exit;
       }

       if (!array_key_exists("userid", $_SESSION)) {
           Header("Location: $BASEURL/login.php");
           exit;
       }

       if (!array_key_exists("ip", $_SESSION)) {
           Header("Location: $BASEURL/login.php");
           exit;
       }

       if (!array_key_exists("last", $_SESSION)) {
           Header("Location: $BASEURL/login.php");
           exit;
       }

       // check session ip
       if ($_SERVER["REMOTE_ADDR"] != $_SESSION["ip"]) {
           Header("Location: $BASEURL/login.php");
           exit;
       }

       // check expiration
       $last = $_SESSION["last"];
       $now = time();

       if ($now - $last > SESSION_TIMEOUT) {
         printf("Your session has expired. Please ".
            "<a href=\"$BASEURL/login.php\">log in again</a>.");
           exit;
       }

       // update session timestamp
       $_SESSION["last"] = $now;
   }
} // HTTP runtime environment

///// End init code; remaining file contains only function definitions, ////
///// but these are partially conditional. /////////////////////////////////

/**
 * Display the page header
 * @in title The title of the page
 */
function pageheader($title="", $helptopic="") {
	global $public;

   if (isset($_SESSION['msg'])) {
      printf(t('<I>%msg</I><P/>', array('%msg'=>$_SESSION['msg'])));
      unset($_SESSION['msg']);
   }
	generateEvent("pageHeader", array(
		"title"     => $title,
		"helptopic" => $helptopic
	));

} // pageheader()


/** 
 * Validate input provided by user
 * TODO: make this function do something
 */
function validate_input($input) {
	return $input;
}


/**
 * Display the page footer
 * @in pagefooter The footer of the page
 */
function pagefooter() {
    echo <<<EOF
</td>
</tr>
</table>
</body></html>
EOF;
} // pagefooter()


/**
 * Format an email addres
 */
function email($msg) {
   printf("<a href=\"%s\">%s</a>", $msg, $msg);
}

/**
 */
function encode_incidentid($id) {
    return sprintf("%s%06d", INCIDENTID_PREFIX, $id);
}

function decode_incidentid($id) {
    $x = ereg_replace(INCIDENTID_PREFIX, "", $id);
    $x = ereg_replace("^0*", "", $x);
    return $x;
}

function normalize_incidentid($id) {
    $id = decode_incidentid($id);
    return encode_incidentid($id);
}

function choice($label, $value, $default) {
    if ($value == $default)
        return sprintf("<OPTION value='%s' SELECTED>%s</OPTION>\n",
            $value, $label);
    else
        return sprintf("<OPTION value='%s'>%s</OPTION>\n",
            $value, $label);
}

function registerEventHandler($event, $function) {
	global $glEventHandlers;

	if (!isset($glEventHandlers)) $glEventHandlers = array();

	if (array_key_exists($event, $glEventHandlers))
		array_push($glEventHandlers[$event], $function);
	else
		$glEventHandlers[$event] = array($function);
}

function generateEvent($event, $data=array()) {
	global $glEventHandlers;

	if (isset($glEventHandlers) &&
		 array_key_exists($event, $glEventHandlers)) {
		foreach ($glEventHandlers[$event] as $fun) 
			call_user_func($fun, $data);
	}
}

/* based on Drupal code; format the given string for output, making pattern
 * replacesments when required. This will be the place to implement locale
 * support.
 *
 *   $string A string containing the English string to translate.
 *
 *   $args An associative array of replacements to make after translation.
 *   Incidences of any key in this array are replaced with the corresponding
 *   value.
 */
function t($string, $args = 0) {
   global $locale;
   if (!$args) {
      return utf8_encode($string);
   } else {
      return utf8_encode(strtr($string, $args));
   }
}

/* based on Drupal code; replace patterns in sql string
 *   $string A string containing the English string to translate.
 *
 *   $args An associative array of replacements to make after translation.
 *   Incidences of any key in this array are replaced with the corresponding
 *   value.
 */
function q($string, $args = 0) {
   if (!$args) {
      return $string;
   } else {
      return strtr($string, $args);
   }
}

/* schedule a message to be printed the next time a page is loaded. The
 * optional priority will be used to specify a feedback level
 */
function airt_msg($msg, $prio=0) {
   if (isset($_SESSION['msg'])) {
      $_SESSION['msg'] .= $msg;
   } else {
      $_SESSION['msg'] = $msg;
   }
}


/** Central HTTP parameter and session variable fetcher.
 * Should cater for most standard requests, does not have any known side
 * effects. Is NOT meant to make strings SQL-safe, use the DB-specific
 * library calls for this. Gets and formats data from a GET, POST or COOKIE
 * variable, or from REQUEST (combined GET and POST). Same for SESSION.
 *
 * Is safe to use no matter what register_globals or get_magic_quotes_gpc
 * are set to. The return value is of type string in most cases, unless the
 * requested name has '[]' appended to force it to type array. When a
 * formatting string (such as '%d') is given, this may also lead to return
 * values of type integer or float.
 *
 * If the requested input variable is absent from the PHP input arrays, the
 * returned value is either '' or array(). It won't trigger a PHP warning.
 * 
 * @param $source = One of 'GET', 'POST', 'COOKIE', 'REQUEST', 'SESSION'.
 * @param $name   = The variable to look up in the input arrays.
 * @param $format = Optionally, printf() format specifier for the value.
 * @return The requested input variable, no escaped quotes, various types
 * possible.
 */
function fetchFrom($source,$name,$format='') {

  // Set up the default return value for the requested parameter, used in
  // case it is not available. Basically only two types: string and array.
  if (substr($name,-2,2)=='[]') {
     $value = array();
     // Remove the trailing '[]'.
     $name = substr($name,0,-2);
  } else {
     $value = '';
  }

  // Fetch the data, force empty if not available.
  switch ($source) {
    case 'GET':
      if (isset($_GET[$name])) {
        $value = $_GET[$name];
      }
      break;
    case 'POST':
      if (isset($_POST[$name])) {
        $value = $_POST[$name];
      }
      break;
    case 'COOKIE':
      if (isset($_COOKIE[$name])) {
        $value = $_COOKIE[$name];
      }
      break;
    case 'REQUEST':
      if (isset($_REQUEST[$name])) {
        $value = $_REQUEST[$name];
      }
      break;
    case 'SESSION':
      if (isset($_SESSION[$name])) {
        $value = $_SESSION[$name];
      }
      break;
    default:
      die(sprintf(_(
        "Unknown fetch source type '%s'. Script terminated."),
        $source));
  }

  // If magic quotes is ON, strip all added slashes.
  if (get_magic_quotes_gpc()) {
    if (is_array($value)) {
       foreach($value as $index=>$val) {
          $value[$index] = stripSlashes($val);
       }
    } else {
      $value = stripSlashes($value);
    }
  }

  // If format is given, apply it.
  if ($format!='') {
    if (is_array($value)) {
       foreach($value as $index=>$val) {
          $value[$index] = sprintf($format,$val);
       }
    } else {
      $value = sprintf($format,$value);
    }
  }

  return $value;

}// fetchFrom


/** Uses a default value for a variable if the variable is empty ('').
 * In case the variable does not exist yet, it is silently created with the
 * default value. If the variable is an empty array() it is considered empty
 * and the given default value may be an array.
 * @param[in|out] $variable The variable (reference) which needs to be
 *                          checked and possibly defaulted.
 * @param $default_value    The default value of the variable.
 */
function defaultTo(&$variable, $default_value) {
   if (empty($variable)) {
      $variable = $default_value;
   }
}// defaultTo


/** Directs the browser to reload the current page.
 * Uses a 'Location:' header (so needs to be called before any other output)
 * and directly exits the script.
 * @param $url Optionally, a full URL to jump to instead of to the current
 *             page.
 */
function reload($url='') {
   if ($url=='') {
      header('Location: '.$_SERVER['PHP_SELF']);
   } else {
      header('Location: '.$url);
   }
   exit;      
}// reload

/** Create an HTML fragment for inputing a date. 
 * @param $var Name of the variable containing the date.
 * @param $default Default date in Unix format (Date('U'))
 * The function will create 6 HTML variables:
 * $var_day, $var_month, $var_year, $var_hour, $var_min, $var_sec
 */
function formatDateInput($var='', $default='') {
   $months = array(
      1=>_('Jan'),   7=>_('Jul'),
      2=>_('Feb'),   8=>_('Aug'),
      3=>_('Mar'),    9=>_('Sep'),
      4=>_('Apr'),  10=>_('Oct'),
      5=>_('May'),  11=>_('Nov'),
      6=>_('Jun'),   12=>_('Dec'));
   $var = strip_tags($var);
   $out = '<select name="'.$var.'_day">'.LF;
   if ($default=='') {
      $default = Date('U');
   }
   $today_day=Date('j', $default);
   $today_month=Date('n', $default);
   $today_year=Date('Y', $default);
   $today_hour=Date('H', $default);
   $today_min=(int)Date('i', $default);
   $today_sec=(int)Date('s', $default);
   for ($i=1;$i<32;$i++) {
      $out .= sprintf('<option %s value="%d">%02d</option>'.LF, 
         ($i==$today_day)?'SELECTED':'', $i, $i);
   }
   $out .= '<select name="'.$var.'_month">'.LF;
   for ($i=1;$i<13;$i++) {
      $out .= sprintf('<option %s value="%d">%s</option>'.LF,
         ($i==$today_month)?'SELECTED':'', $i, $months[$i]);
   }
   $out .= '<input type="text" size="4" width="4" name="'.$var.'_year" value="'.$today_year.'">'.LF;

   $out .= '&nbsp;&nbsp;&nbsp;';

   $out .= '<select name="'.$var.'_hour">'.LF;
   for ($i=0;$i<24;$i++) {
      $out .= sprintf('<option %s value="%d">%02d</option>'.LF,
         ($i==$today_hour)?'SELECTED':'', $i, $i);
   }
   $out .= '<select name="'.$var.'_minute">'.LF;
   for ($i=0;$i<60;$i++) {
      $out .= sprintf('<option %s value="%d">%02d</option>'.LF,
         ($i==$today_min)?'SELECTED':'', $i, $i);
   }
   $out .= '<select name="'.$var.'_second">'.LF;
   for ($i=0;$i<60;$i++) {
      $out .= sprintf('<option %s value="%d">%02d</option>'.LF,
         ($i==$today_sec)?'SELECTED':'', $i, $i);
   }
   return $out;
} // formatDateInput
?>
