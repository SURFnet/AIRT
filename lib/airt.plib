<?php
/* vim:syntax=php shiftwidth=3 tabstop=3
 * $Id$ 

 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005	Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

///// Init code, executed once at library load time. ////////////////////////

require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/error.plib';

// Find out whether we run as web server module or as CLI interpreter.
if (array_key_exists('argv',$GLOBALS)) {
   // We run as CLI.
   define('AIRT_RUN_MODE','CLI');
} else {
   // We run as web server module.
   define('AIRT_RUN_MODE','HTTP');
}

// Include custom functions if requested.
if (defined('CUSTOM_FUNCTIONS')) {
  require_once CUSTOM_FUNCTIONS;
}

// The next code block is only meant for HTTP runtime enviroments.
if (AIRT_RUN_MODE=='HTTP') {
   @session_start();
   if (!array_key_exists('BASEURL', $_SESSION))
      $_SESSION['BASEURL'] = dirname($_SERVER['PHP_SELF']);

   if (!isset($public) || !$public) {
       if (!array_key_exists("username", $_SESSION)) {
           Header("Location: login.php");
           exit;
       }

       if (!array_key_exists("userid", $_SESSION)) {
           Header("Location: login.php");
           exit;
       }

       if (!array_key_exists("ip", $_SESSION)) {
           Header("Location: login.php");
           exit;
       }

       if (!array_key_exists("last", $_SESSION)) {
           Header("Location: login.php");
           exit;
       }

       // check session ip
       if ($_SERVER["REMOTE_ADDR"] != $_SESSION["ip"]) {
           Header("Location: login.php");
           exit;
       }

       // check expiration
       $last = $_SESSION["last"];
       $now = time();

       if ($now - $last > SESSION_TIMEOUT) {
         printf("Your session has expired. Please ".
            "<a href=\"login.php\">log in again</a>.");
           exit;
       }

       // update session timestamp
       $_SESSION["last"] = $now;
   }
} // HTTP runtime environment

///// End init code; remaining file contains only function definitions, ////
///// but these are partially conditional. /////////////////////////////////

/**
 * Display the page header
 * @in title The title of the page
 */
function pageheader($title="", $helptopic="") {
	global $public;

   if (isset($_SESSION['msg'])) {
      printf(t('<I>%msg</I><P/>', array('%msg'=>$_SESSION['msg'])));
      unset($_SESSION['msg']);
   }
	generateEvent("pageHeader", array(
		"title"     => $title,
		"helptopic" => $helptopic
	));

} // pageheader()


/** 
 * Validate input provided by user
 * TODO: make this function do something
 */
function validate_input($input) {
	return $input;
}


/**
 * Display the page footer
 * @in pagefooter The footer of the page
 */
function pagefooter() {
    echo <<<EOF
</td>
</tr>
</table>
</body></html>
EOF;
} // pagefooter()


/**
 * Format an email addres
 */
function email($msg) {
   printf("<a href=\"%s\">%s</a>", $msg, $msg);
}

/**
 */
function encode_incidentid($id) {
    return sprintf("%s%06d", INCIDENTID_PREFIX, $id);
}

function decode_incidentid($id) {
    $x = ereg_replace(INCIDENTID_PREFIX, "", $id);
    $x = ereg_replace("^0*", "", $x);
    return $x;
}

function normalize_incidentid($id) {
    $id = decode_incidentid($id);
    return encode_incidentid($id);
}

function choice($label, $value, $default) {
    if ($value == $default)
        return sprintf("<OPTION value='%s' SELECTED>%s</OPTION>\n",
            $value, $label);
    else
        return sprintf("<OPTION value='%s'>%s</OPTION>\n",
            $value, $label);
}

function registerEventHandler($event, $function) {
	global $glEventHandlers;

	if (!isset($glEventHandlers)) $glEventHandlers = array();

	if (array_key_exists($event, $glEventHandlers))
		array_push($glEventHandlers[$event], $function);
	else
		$glEventHandlers[$event] = array($function);
}

function generateEvent($event, $data=array()) {
	global $glEventHandlers;

	if (isset($glEventHandlers) &&
		 array_key_exists($event, $glEventHandlers)) {
		foreach ($glEventHandlers[$event] as $fun) 
			call_user_func($fun, $data);
	}
}

/* based on Drupal code; format the given string for output, making pattern
 * replacesments when required. This will be the place to implement locale
 * support.
 *
 *   $string A string containing the English string to translate.
 *
 *   $args An associative array of replacements to make after translation.
 *   Incidences of any key in this array are replaced with the corresponding
 *   value.
 */
function t($string, $args = 0) {
   global $locale;
   if (!$args) {
      return utf8_encode($string);
   } else {
       return utf8_encode(strtr($string, $args));
   }
}

/* based on Drupal code; replace patterns in sql string
 *   $string A string containing the English string to translate.
 *
 *   $args An associative array of replacements to make after translation.
 *   Incidences of any key in this array are replaced with the corresponding
 *   value.
 */
function q($string, $args = 0) {
   if (!$args) {
      return $string;
   } else {
      return strtr($string, $args);
   }
}

/* schedule a message to be printed the next time a page is loaded. The
 * optional priority will be used to specify a feedback level
 */
function airt_msg($msg, $prio=0) {
   if (isset($_SESSION['msg'])) {
      $_SESSION['msg'] .= $msg;
   } else {
      $_SESSION['msg'] = $msg;
   }
}
?>
