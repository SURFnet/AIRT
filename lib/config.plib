<?php
require_once LIBDIR.'/setup.plib';
require_once LIBDIR.'/airt.plib';
require_once LIBDIR.'/database.plib';

function showConfigScreen() {
   pageHeader(_('Configuration screen'), array(
      'menu'=>'settings'));
   $out = '';
   $out .= t('<form action="%u/config.php" method="post">'.LF, array(
      '%u'=>BASEURL));
   $out .= '<div class="block">'.LF;
   $out .= '<h3>'._('Global options').'</h3>'.LF;

   Setup::getOption('baseurl', $baseurl);
   $out .= '<table class="horizontal">'.LF;
   
   Setup::getOption('session_timeout', $session_timeout, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Maximum number of minutes of idle time before login is required again')));
   $out .= '     <td><select name="session_timeout">';
   $out .= choice(10, 10*60, $session_timeout);
   $out .= choice(15, 15*60, $session_timeout);
   $out .= choice(60, 60*60, $session_timeout);
   $out .= choice(90, 90*60, $session_timeout);
   $out .= choice(120, 120*60, $session_timeout);
   $out .= choice(180, 180*60, $session_timeout);
   $out .= choice(240, 240*60, $session_timeout);
   $out .= choice(300, 300*60, $session_timeout);
   $out .= '</select></td>'.LF;
   $out .= '  </tr>'.LF;

   Setup::getOption('pagesize', $pagesize, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Maximum number of list elements shown on a single page')));
   $out .= '     <td><select name="pagesize">';
   $out .= choice(10, 10, $pagesize);
   $out .= choice(25, 25, $pagesize);
   $out .= choice(50, 50, $pagesize);
   $out .= choice(100, 100, $pagesize);
   $out .= choice(150, 150, $pagesize);
   $out .= choice(250, 250, $pagesize);
   $out .= choice(999, 999, $pagesize);
   $out .= '</select></td>'.LF;
   $out .= '  </tr>'.LF;

   Setup::getOption('archiveage', $archiveage, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Number of days afters receiving email when it is automatically archived')));
   $out .= '     <td><select name="archiveage">';
   $out .= choice(5, 5*24*60*60, $archiveage);
   $out .= choice(10, 10*24*60*60, $archiveage);
   $out .= choice(15, 15*24*60*60, $archiveage);
   $out .= choice(20, 20*24*60*60, $archiveage);
   $out .= choice(25, 25*24*60*60, $archiveage);
   $out .= choice(30, 30*24*60*60, $archiveage);
   $out .= choice(60, 60*24*60*60, $archiveage);
   $out .= choice(90, 90*24*60*60, $archiveage);
   $out .= '</select></td>'.LF;
   $out .= '  </tr>'.LF;
   
   Setup::getOption('correlationage', $correlationage, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Number of days used to calculate the correlation between import queue elements and recently closed incidents')));
   $out .= '     <td><select name="correlationage">';
   $out .= choice(2, 2*24*60*60, $correlationage);
   $out .= choice(5, 5*24*60*60, $correlationage);
   $out .= choice(7, 7*24*60*60, $correlationage);
   $out .= choice(10, 10*24*60*60, $correlationage);
   $out .= choice(15, 15*24*60*60, $correlationage);
   $out .= choice(20, 20*24*60*60, $correlationage);
   $out .= choice(25, 25*24*60*60, $correlationage);
   $out .= choice(30, 30*24*60*60, $correlationage);
   $out .= choice(60, 60*24*60*60, $correlationage);
   $out .= choice(90, 90*24*60*60, $correlationage);
   $out .= '</select></td>'.LF;
   $out .= '  </tr>'.LF;


   Setup::getOption('instancename', $instancename, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('The name of the current AIRT instance')));
   $out .= t('     <td><input type="string" value="%v" name="instancename" size="45"></td>'.LF, array('%v'=>htmlentities($instancename)));
   $out .= '  </tr>'.LF;

   Setup::getOption('x509client', $x509client, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Allow logon using an X509 cient certificate')));
   $out .= '    <td>';
   $out .= t('%l <input type="radio" %check value="on" name="x509client">', array(
      '%l'=>_('Yes'),
      '%check'=>($x509client == 1) ? 'CHECKED' : ''));
   $out .= '  ';
   $out .= t('%l <input type="radio" %check value="off" name="x509client">', array(
      '%l'=>_('No'),
      '%check'=>($x509client == 0) ? 'CHECKED' : ''));
   $out .= '    </td>'.LF;
   $out .= '  </tr>'.LF;

   Setup::getOption('defaultlanguage', $defaultlanguage, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Default language for interface')));
   $out .= t('     <td><input type="string" value="%v" name="defaultlanguage" size="45"></td>'.LF, array('%v'=>htmlentities($defaultlanguage)));
   $out .= '  </tr>'.LF;
   $out .= '</table>'.LF;
   $out .= '</div>'.LF;



   $out .= '<div class="block">'.LF;
   $out .= '<h3>'._('Email settings').'</h3>'.LF;
   $out .= '<table class="horizontal">'.LF;
   
   Setup::getOption('mailfrom', $mailfrom, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('"From" address on outgoing email')));
   $out .= t('     <td><input type="string" value="%v" name="mailfrom" size="45"></td>'.LF, array('%v'=>htmlentities($mailfrom)));
   $out .= '  </tr>'.LF;

   Setup::getOption('mailenvfrom', $mailenvfrom, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Email address of the sender of outgoing email')));
   $out .= t('     <td><input type="string" value="%v" name="mailenvfrom" size="45"></td>'.LF, array('%v'=>htmlentities($mailenvfrom)));
   $out .= '  </tr>'.LF;
   
   Setup::getOption('mailcc', $mailcc, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Email address to which all email will be copied').'<br/><em>'._('Leave blank to disable').'</em>'));
   $out .= t('     <td><input type="string" value="%v" name="mailcc" size="45"></td>'.LF, array('%v'=>htmlentities($mailcc)));
   $out .= '  </tr>'.LF;

   Setup::getOption('replyto', $replyto, true);
   $out .= '  <tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>_('Reply-To address set on outgoing email').'<br/><em>'._('Leave blank to disable').'</em>'));
   $out .= t('     <td><input type="string" value="%v" name="replyto" size="45"></td>'.LF, array('%v'=>htmlentities($replyto)));
   $out .= '  </tr>'.LF;

   $out .= '</table>'.LF;
   $out .= '</div>'.LF;




   $out .= '<div class="block">'.LF;
   $out .= '<h3>'._('Import queue settings').'</h3>'.LF;
   $out .= '<table class="horizontal">'.LF;
   
   Setup::getOption('inqueuesep', $inqueuesep, true);
   $out .= '<tr>'.LF;
   $out .= t('     <td>%l</td>'.LF, array('%l'=>
      _('Import queue separator').'<br/><em>'.
      t(_('Use "\n" for newline. Separator will be parsed using <a href="%u">date</a> function.'),
         array('%u'=>'http://php.net/manual/en/function.date.php')).' '.
      _('Leave blank to disable.').'</em>'));
   $out .= t('     <td><input type="string" value="%v" name="inqueuesep" size="45"></td>'.LF, array('%v'=>htmlentities($inqueuesep)));
   $out .= '  </tr>'.LF;

   $out .= '</table>'.LF;
   $out .= '</div>'.LF;

   $out .= t('<input type="submit" value="%v">', array(
      '%v'=>_('Save changes')));
   $out .= '<input type="hidden" name="action" value="save"/>'.LF;
   $out .= '</form>'.LF;

   print $out;
   pageFooter();
}

function saveConfig() {
   $pagesize = fetchFrom('REQUEST', 'pagesize', '%d');
   $archiveage = fetchFrom('REQUEST', 'archiveage', '%d');
   $correlationage = fetchFrom('REQUEST', 'correlationage', '%d');
   $instancename = fetchFrom('REQUEST', 'instancename');
   $x509client = fetchFrom('REQUEST', 'x509client');
   $defaultlanguage = fetchFrom('REQUEST', 'defaultlanguage');
   $mailfrom = fetchFrom('REQUEST', 'mailfrom');
   $mailenvfrom = fetchFrom('REQUEST', 'mailenvfrom');
   $mailcc = fetchFrom('REQUEST', 'mailcc');
   $replyto = fetchFrom('REQUEST', 'replyto');
   $inqueuesep = fetchFrom('REQUEST', 'inqueuesep');
   $session_timeout = fetchFrom('REQUEST', 'session_timeout', '%d');

   if (!empty($pagesize)) {
      Setup::setOption('pagesize', $pagesize);
   }
   if (!empty($session_timeout)) {
      Setup::setOption('session_timeout', $session_timeout);
   }
   if (!empty($archiveage)) {
      Setup::setOption('archiveage', $archiveage);
   }
   if (!empty($correlationage)) {
      Setup::setOption('correlationage', $correlationage);
   }
   if (!empty($instancename)) {
      Setup::setOption('instancename', $instancename);
   }
   if (!empty($defaultlanguage)) {
      Setup::setOption('defaultlanguage', $defaultlanguage);
   }
   if (!empty($mailfrom)) {
      Setup::setOption('mailfrom', $mailfrom);
   }
   if (!empty($mailenvfrom)) {
      Setup::setOption('mailenvfrom', $mailenvfrom);
   }
   $x509client = ($x509client == 'on') ? 1 : 0;

   Setup::setOption('mailcc', $mailcc);
   Setup::setOption('replyto', $replyto);
   Setup::setOption('x509client', $x509client);
   Setup::setOption('inqueuesep', $inqueuesep);

   if (Setup::saveOptions($error) === false) {
      airt_msg($error);
   } else {
      airt_msg(_('Settings saved'));
   }
}
?>
