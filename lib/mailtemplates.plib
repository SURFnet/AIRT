<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 * $Id$ 
 * mailtemplates.plib - Standard message library
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

require_once LIBDIR."/airt.plib";
require_once LIBDIR."/user.plib";
require_once LIBDIR."/history.plib";
require_once LIBDIR."/incident.plib";
require_once LIBDIR."/export.plib";
require_once LIBDIR."/config.plib";
require_once 'Mail.php';
require_once 'Mail/mimePart.php';

define('AIRT_MAIL_CAPABILITY_IODEF', 'iodef');
$AIRT_MAIL_CAPABILITIES = Array(
   AIRT_MAIL_CAPABILITY_IODEF
);

/** Retrieve the mail template actions.
 * \param [in] $template identifier of the template
 * \param [out] $actions associative array with keys: type, state, status
 * \return true on success, false on failure
 */
function get_template_actions($template, &$actions) {
   $res = db_query(q("select action_type as type, action_state as state, action_status as status from mailtemplates where name='%name'", array('%name'=>db_escape_string($template))));
   if (!$res) {
      return false;
   }
   if (db_num_rows($res) == 0) {
      return false;
   }
   $actions = db_fetch_next($res);
   if ($actions['type'] == '') { $actions['type'] = -1; }
   if ($actions['status'] == '') { $actions['status'] = -1; }
   if ($actions['state'] == '') { $actions['state'] = -1; }
   db_free_result($res);
   return true;
}


/** 
 * Retrieve a message template.
 * @param string $template the name of the template to be read
 *
 * @return Returns the file as one large buffer on success, or false on
 * failure.
 *
 * Note: retrieving a non-existing template is not considered to be an error.
 * Instead, the function will return an empty body.
 */
function get_template($template) {
   $res = db_query(q('SELECT body FROM mailtemplates WHERE name=\'%name\'',
      array('%name'=>$template)));
   if (!$res) {
      airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
      return false;
   }
   if (db_num_rows($res) > 0) {
      $row = db_fetch_next($res);
      return $row['body'];
   } else {
      return '';
   }
} // read_standard_message


/** 
 * Update the definition of a template.
 * @param $name the name of the template
 * @param $body the body of the template
 * @param $update an associate array contain key/vallue pairs to update
 * @return 0 on success, 1 on failure.
 */
function save_template($name='', $body='', $update) {
   if ($name == '' || $body == '') {
      return 1;
   }
   if (!array_key_exists('type', $update) || !is_numeric($update['type'])) {
      return 1;
   }
   if (!array_key_exists('state', $update) || !is_numeric($update['state'])) {
      return 1;
   }
   if (!array_key_exists('status', $update) || !is_numeric($update['status'])) {
      return 1;
   }
   if ($update['type'] == -1) { $update['type'] = 'NULL'; }
   if ($update['status'] == -1) { $update['status'] = 'NULL'; }
   if ($update['state'] == -1) { $update['state'] = 'NULL'; }

   $template = get_template($name);
   if ($template == '') {
      // new template
      $res = db_query(q('INSERT INTO mailtemplates (name, body, created, createdby, action_type, action_state, action_status) VALUES (\'%name\', \'%body\', CURRENT_TIMESTAMP, %uid, %type, %state, %status)', array(
         '%name'=>db_escape_string($name),
         '%body'=>db_escape_string($body),
         '%uid'=>$_SESSION['userid'],
         '%type'=>$update['type'],
         '%state'=>$update['state'],
         '%status'=>$update['status'])));
      if (!$res) {
         airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
         return 1;
      }
   } else {
      // existing template
      $res = db_query(q('UPDATE mailtemplates SET body=\'%body\', updated=CURRENT_TIMESTAMP, updatedby=%uid, action_state=%state, action_status=%status, action_type=%type WHERE name=\'%name\'', array(
         '%name'=>db_escape_string($name),
         '%body'=>db_escape_string($body),
         '%type'=>$update['type'],
         '%state'=>$update['state'],
         '%status'=>$update['status'],
         '%uid'=>$_SESSION['userid'])));
      if (!$res) {
         airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
         return 1;
      }
   }
   
   /* does this mail template provide any capabilities? */
   if (array_key_exists('capability', $update)) {
      if (array_key_exists(AIRT_MAIL_CAPABILITY_IODEF,
         $update['capability'])) {
         $err = '';
         if ($update['capability'][AIRT_MAIL_CAPABILITY_IODEF] == 'on') {
            // toggle the capability 'on' if selected
            toggleMailCapabilityIODEF($name, true, $err);
         } else {
            // this should not happen, but toggle off nevertheless
            toggleMailCapabilityIODEF($name, false, $err);
         }
      } else {
         // not present => toggle off
         toggleMailCapabilityIODEF($name, false, $err);
      }
   }
   return 0;
}


/** Remove the named template
 * \return 0 on success, 1 on failure
 */
function delete_template($name='') {
   if ($name=='') {
      return 1;
   }
   db_query('begin transaction');
   if (db_query(q('DELETE FROM mailtemplate_capabilities WHERE template=\'%name\'', array(
      '%name'=>db_escape_string($name)))) === false) {
      db_query('rollback');
      airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
      return 1;
   }
   if (db_query(q('DELETE FROM importqueue_templates WHERE mailtemplate=\'%name\'', array(
      '%name'=>db_escape_string($name)))) === false) {
      db_query('rollback');
      airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
      return 1;
   }
   if (db_query(q('DELETE FROM mailtemplates WHERE name=\'%name\'', array(
      '%name'=>db_escape_string($name)))) === false) {
      db_query('rollback');
      airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
      return 1;
   }
   db_query('commit');

   return 0;
}


/**
 * Create a new template if it does not exists, or update the current one if it does.
/**
 * Retrieve the subject line from a message
 * $msg = the buffer containing the message
 * return false on failure, or the subject line on success
 */
function get_subject($msg) {
   $match = ereg("@SUBJECT@(.*)@ENDSUBJECT@", $msg, $regs);
   if (!$match) {
      return false;
   }

   return $regs[1];
} // get_subject


/**
 * Get all standard messages. 
 * Returns an associative array in which the key is the name of the 
 * template and the value the body or false on failure.
 */
function get_templates($extras=array()) {
   $res = db_query(q('SELECT name,body FROM mailtemplates ORDER BY name'));
   if (!$res) {
      airt_error('ERR_FUNC', 'mailtemplates.plib:'.__LINE__);
      return false;
   }
   $out = $extras;
   if (db_num_rows($res) > 0) {
      while ($row = db_fetch_next($res)) {
         $out[$row['name']] = $row['body'];
      }
   }

   return $out;
}


/**
 * Get a SELECTION dialog with mail templates
 */
function getMailtemplateSelection($name, $default='', $extras=array()) {
   $o = array();
   $output = sprintf("<select name=\"%s\">\n", htmlentities($name));
   $templates = get_templates();
   foreach ($templates as $label=>$body) {
      $o[$label] = $label;
   }
   $o = $extras + $o;
   foreach ($o as $key=>$label) {
      $output .= sprintf("<option value=\"%s\" %s>%s</option>\n", 
         htmlentities($key), ($key == $default) ? "SELECTED" : "", 
         htmlentities($label));
   }
   $output .= "</select>";

   return $output;
}


/** Retrieve a formatted overview of mail templates.
 * \return A string containing a HTML-formatted overview of available templates.
 */
function format_templates($recipients=array(), $incidentids=array(), $edit=false) {
   $out = '<table class="horizontal">'.LF;
   $out .= '<tr>'.LF;
   if ($edit == false) {
       $out .= '<th>&nbsp;</th>'.LF;
   }
   $out .= '<th>'._('Label').'</th>'.LF;
   $out .= '<th>'._('Subject').'</th>'.LF;
   if ($edit == true) {
      $out .= '<th>&nbsp;</th>'.LF;
   }
   $out .= '</tr>'.LF;
   $count=0;
   $templates = get_templates();
   if (sizeof($templates) == 0) {
      return _('No templates available.');
   }
   foreach ($templates as $name=>$body) {
      $subject = get_subject($body);
      $out .= '<tr>'.LF;
      if ($edit == false) {
         $querystr = '&to='.urlencode(implode(',', $recipients)).
            '&incidentids='.urlencode(implode(',', $incidentids));
         $out .= t('<td><a href="%url/mailtemplates.php?action=prepare&template=%name%query">'._('compose').'</a></td>'.LF, array(
            '%url'=>BASEURL,
            '%name'=>$name,
            '%query'=>$querystr));
      }
      $out .= t("<td>%name</td>".LF, array('%name'=>$name));
      $out .= t("<td>%subject</td>".LF, array('%subject'=>$subject));
      if ($edit == true) {
         $out .= t('<td><a href="%url?action=edit&template=%name">'._('edit').'</a>'.LF, array(
            '%url'=>$_SERVER['PHP_SELF'],
            '%name'=>urlencode($name)));
          $out .= t(' <a onclick="return confirm(\''.
            _('Are you sure that you want to delete this message?').'\')" href="%url?action=delete&template=%name">'._('delete').'</a></td>'.LF, array(
            '%url'=>$_SERVER['PHP_SELF'],
            '%name'=>urlencode($name)));
      }
      $out .= t("</tr>\n");
    }
    $out .= "</table>";

    return $out;
} // format_templates();


/**
 * Show a message, without processing it.
 */
function show_message($name) {
    if (($message = read_standard_message($name)) == false) {
        printf(_('Unable to read message.'));
        return false;
    }
    printf("%s", replace_vars($message));
} // show_message


/** Expand a mail template. Use the information contained in $current to
 * expand mail template $template.
 *
 * \param [in] $template  The template to be expanded
 * \param [in] $current   An associative arrow with key-value pairs
 *
 * \return An associative array with the following keys
 *     $output['sender']       message sender
 *     $output['receiver']     message receiver
 *     $output['replyto']      replyto header
 *     $output['subject']      subject header
 *     $output['body']         message body
 */
function expand_template($template, $current) {
   $output = array();

   // message sender
   $cert = getUserByUserId($_SESSION['userid']);
   Setup::getOption('mailfrom', $mailfrom, true);
   if (empty($mailfrom)) {
      $output['sender'] = $cert['email'];
   } else {
      $output['sender'] = replace_vars($mailfrom, $current);
   }

   // message receiver
   if (array_key_exists('email', $current)) {
      if (is_array($current['email'])) {
         $receivers = array();
         foreach($current['email'] as $email) {
            $receivers[]=$email;
         }
         $output['receiver'] = implode(',',$receivers);
      } else {
         $output['receiver'] = $current['email'];
      }
   } else {
      $output['receiver'] = '';
   }

   // reply to (if set)
   Setup::getOption('replyto', $replyto, true);
   if (!empty($replyto)) {
      $output['replyto'] = replace_vars($replyto, $current);
   } else {
      $output['replyto'] = '';
   }

   // load message and replace all standard variables
   $output['body'] = replace_vars(get_template($template), $current);

   // extract subject
   $output['subject'] = get_subject($output['body']);

   // remove first line from standard message (which is the subject)
   $m = explode("\n", $output['body']);
   unset($m[0]);
   $output['body'] = implode("\n", $m);

   return $output;
}

/** 
 * Obtain buttons for the 'prepare message' screen
 * @param string $incidentids comma-separated agenda of actions to take
 * @param string containing HTML
 */
function template_buttons($incidentids, $override='') {
   $out = '';
   $out .= '<input type="reset"  value="'._('Reset').'">'.LF;
   $out .= '<input type="submit" name="action" value="'._('Send').'">'.LF;
   if (empty($override) || $override === false) {
      $override = 0;
   } else {
      $override = 1;
   }
   $out .= '<input type="hidden" name="override" value="'.
         htmlentities($override).'"/>'.LF;

   if (sizeof($incidentids) > 0) {
      $out .= '<input type="submit" name="action" value="'._('Send and prepare next').'">'.LF;
      $out .= '<input type="submit" name="action" value="'._('Skip and prepare next').'">'.LF;
   }
   return $out;
}


/* prepare a message for sending.
 * \param $template [in] Mail template to expand
 * \param $incidentids [in] Array containing incidentids for which to send mail
 * \param $to [in] List containing a subset of email addresses associate with
 * the current incident. If set, only these addresses will be mailed
 *
 * Note: this function will also inspect $_SESSION['current_email'] for 
 * additional email recipients
 *
 * \return nothing
 */
function prepare_message($template, $override_now=0, $incidentids=array(), 
   $to=array()) 
{
   pageHeader(_('Send message from template.'), array(
      'menu'=>'mail',
      'submenu'=>'templates'));
   $current = array(
      'user'=>'',
      'name'=>'',
      'email'=>'',
      'ip'=>'',
      'hostname'=>'');

   $override_next = false;

   /* use the incidentid from the session if none specified
    */
   if (sizeof($incidentids) == 0) {
      $sess = fetchFrom('SESSION', 'incidentid');
      if (empty($sess)) {
         die(_('Cannot prepare message without incident in ').__LINE__);
      } else {
         $incidentids = array($sess);
      }
   }

   $current['incidentid'] = $incidentids[0];
   unset($incidentids[0]);

   $incident = getIncident($current['incidentid']);
   if (empty($incident['template'])) {
      if ($template != _('Use preferred template')) {
         $incident['template'] = $template;
      }
   }

   /* if override is set, only email the users who have an override. If it
    * is not set, figure out if there will be any. If so, add only  users
    * who do will not have an override. $override_template will contain the name
    * of the first template that was used in an override (or '' if none)
    */
   $override_template='';
   if ($override_now == 1) {
      $to = array();
      foreach ($incident['users'] as $uid) {
         $o = getMailTemplateOverride($current['incidentid'], $uid);
         if ($o != null && $o != $template && 
              $o != $incident['template']) {
            if ($override_template=='') {
               $override_template = $o;
            }
            $to[] = $uid;
         }
      }
      /* at this point we know if during the next pass we will have an 
       * override ($override_template contains the name of the template 
       * to use and $to contains the uids of the users who will receive
       * the message based on that template 
       */
   } else {
      /* do we have any overrides that need to be addressed later?
       * $override_next will be true if so, else it will be false
       */
      $override_next_uids = array();
      foreach ($incident['users'] as $uid) {
         $o = getMailTemplateOverride($current['incidentid'], $uid);
         if ($o != null && $o != $template && 
             $o != $incident['template']) {
            $override_next_uids[] = $uid;
            $override_next = true;
         } 
      }

      /* If $to is already set, leave it alone; else
       * Add all users to $to-list who are not already on it
       */
      if (sizeof($to) == 0) {
         foreach ($incident['users'] as $uid) {
            if (!in_array($uid, $override_next_uids)) {
               $to[] = $uid;
            }
         }
      }

      /* Remove all users from $to who have an override
       */
      if ($override_next === true) {
         /* We will have to process the current incidentid again;
          * put the current incidentid back on the agenda
          */
         $incidentids = array_merge(array($current['incidentid']), 
            $incidentids);
         foreach ($override_next_uids as $uid) {
            $key = array_search($uid, $to);
            if ($key !== false) {
               unset($to[$key]);
            }
         }
      }
   }

   /* At this point, the $to[] array should contain all the email addresses
    * of users who are supposed to receive mail
    */

   /* allow for sending mail to a subset of the users associated with the
    * incident
    */
   if (sizeof($incident['users']) > 0) {
      foreach ($incident['users'] as $uid) {
         $user = getUserByUserID($uid);
         if (sizeof($to) == 0 || in_array($uid, $to)) {
            $current['name'][] = $user['lastname'];
            $current['email'][] = $user['email'];
         }
      }
   }

   /* Finish setting up the 'current' array */
   if (sizeof($incident['ips']) > 0) {
      $current['ip'] = $incident['ips'][0]['ip'];
      $current['hostname'] = $incident['ips'][0]['hostname'];
   }
   $usepref = false;
   $usetemplate = $template;
   if ($template == _('Use preferred template')) {
      $usepref = true;
      $usetemplate = getPreferredMailTemplateName($current['incidentid']);
   }

   if ($override_now == 1) {
      $usetemplate = $override_template;
   } 

   if ($usetemplate == '') {
      print _('NOTE: Preferred mail template requested, but not set.').'<p/>';
   }
   print _('Using mail template <em>').htmlentities($usetemplate).
      '</em> for incident <em>'.normalize_incidentid($current['incidentid']).
      '</em>.<br/>'.LF;
   $msgdata = expand_template($usetemplate, $current);

   /* look for receiver override */
   if (preg_match('/@TO@(.*)@ENDTO@/', $msgdata['body'], $matches) > 0) {
      $msgdata['receiver'] = $matches[1];
      $msgdata['body'] = preg_replace('/@TO@(.*)@ENDTO@/', '', $msgdata['body']);
   }

   generateEvent('premailtemplate', array(
    'to'=>$msgdata['receiver'],
    'subject'=>$msgdata['subject'],
    'from'=>$msgdata['sender'],
    'replyto'=>$msgdata['replyto'],
    'message'=>$msgdata['body']));

   $agendaval=implode(',', $incidentids);
   $out = '<FORM method="POST">'.LF;
   $out .= '<TABLE WIDTH="80">'.LF;
   $out .= '<TR>'.LF;
   $out .= '<TD>'._('To:').'</TD>'.LF;
   $out .= '<TD><INPUT TYPE="text" size="50" name="to" value="'.$msgdata['receiver'].'"></TD>'.LF;
   $out .= '<TD rowspan="4" VALIGN="top">'.LF;
   $out .= template_buttons($incidentids, ($override_next === true) ? 1 : 0);
   $out .= '</TD>'.LF;
   $out .= '</TR>'.LF;
   $out .= '<TR>'.LF;
   $out .= '<TD>'._('Subject:').'</TD>'.LF;
   $out .= '<TD><INPUT TYPE="text" size="50" name="subject" value="'.$msgdata['subject'].'"></TD>'.LF;
   $out .= '</TR>'.LF;
   $out .= '<TR>'.LF;
   $out .= '<TD>'._('From:').'</TD>'.LF;
   $out .= '<TD><INPUT TYPE="text" size="50" name="from" value="'.$msgdata['sender'].'"></TD>'.LF;
   $out .= '</TR>';
   $out .= '<TR>';
   $out .= '<TD>'._('Reply-To:').'</TD>'.LF;
   $out .= '<TD><INPUT TYPE="text" size="50" name="replyto" value="'.$msgdata['replyto'].'"></TD>'.LF;
   $out .= '</TR>'.LF;
   $out .= '</TABLE>'.LF;
   $out .= '<TEXTAREA name="msg" cols="80" rows="25">'.$msgdata['body'].'</TEXTAREA>'.LF;
   $out .= '<P>'.LF;
# XXX because of this, I cannot do an override on the last incident in 
# the queue
   $out .= '<input type="hidden" name="incidentids" value="'.$agendaval.'">'.LF;
   if ($usepref) {
      $out .= '<input type="hidden" name="template" value="'.
         _('Use preferred template').'">'.LF;
   } else {
      $out .= '<input type="hidden" name="template" value="'.$template.'">'.LF;
   }
   $out .= '<input type="hidden" name="incidentid" value="'.$current['incidentid'].'">'.LF;
   $out .= template_buttons($incidentids, ($override_next === true) ? 1 : 0);
   print $out;
   if (defined('GPG_KEYID')) {
      print '<input type="checkbox" name="sign" checked> '._('Sign').LF;
   }
   print '</form>'.LF;

   generateEvent('postmailtemplate', array(
    'to'=>$msgdata['receiver'],
    'subject'=>$msgdata['subject'],
    'from'=>$msgdata['sender'],
    'replyto'=>$msgdata['replyto'],
    'message'=>$msgdata['body']));
   pageFooter();
} // prepare_message


function print_variables_info() {
   $out = '<table class="horizontal">'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@HOSTNAME@</td>'.LF;
   $out .= '<td>'._('Will be replaced with the currently active hostname').
      '</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@INCIDENTID@</td>'.LF;
   $out .= '<td>'._('Will be replaced with the current incident id').
      '</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@IPADDRESS@</td>'.LF;
   $out .= '<td>'._('Will be replaced with the currently active IP address').
      '</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@LOGGING@</td>'.LF;
   $out .= '<td>'._('Will be replaced with the available logging information').
      '</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@PREVIOUS@</td>'.LF;
   $out .= '<td>'._('Will be replaced with previous incidents').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@OTHER_OPEN@</td>'.LF;
   $out .= '<td>'._('Will be replaced with still open previous incidents in the same constituency as the current incident.').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td nowrap>@SUBJECT@ .. @ENDSUBJECT@</td>'.LF;
   $out .= '<td>'._('Delimits the subject line of the message').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@USEREMAIL@</td>'.LF;
   $out .= '<td>'._('Will be replaced with the email address of the current user').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@USERINFO@</td>'.LF;
   $out .= '<td>'._('Will be replaced with detailed information about the user, if that
   information is available.').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '<td>@USERNAME@</td>'.LF;
   $out .= '<td>'._('Will be replaced with the name of the current user').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '    <td>@XMLDATA@</td>'.LF;
   $out .= '    <td>'._('Will be replaced with the incident data in XML format').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '    <td>@EXTIDS@</td>'.LF;
   $out .= '    <td>'._('External incident identifiers (if any)').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '    <td>@YOURFIRSTNAME@</td>'.LF;
   $out .= '    <td>'._('Will be replaced with the first name of the logged in incident handler').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '    <td>@YOURNAME@</td>'.LF;
   $out .= '    <td>'._('Will be replaced with the full name of the logged in incident handler').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '    <td>@TO@..@ENDTO@</td>'.LF;
   $out .= '    <td>'._('Will override the To: header with the given value').'</td>'.LF;
   $out .= '</tr>'.LF;
   $out .= '<tr>'.LF;
   $out .= '   <td>@IODEF@</td>'.LF;
   $out .= '   <td>'._('Incident data in IODEF-format').'</td>'.LF;
   $out .= '</tr>'.LF;

   $out .= '</table>'.LF;
   print $out;
}

/** Replace @..@ macros in mail templates.
 * \param [in] $msg the mail template to expand
 * \param [in] $current an associative array containing information on the
 * current incident. keys:
 *   user, name, email, ip, hostname, incidentid 
 *
 * \return The expanded template.
 */
function replace_vars($msg, $current=array()) {
   $out = $msg;

   if (array_key_exists('incidentid', $current)) {
      $incidentid = $current['incidentid'];
   } elseif (array_key_exists('incidentid', $_SESSION)) {
      $incidentid = $_SESSION['incidentid'];
   }
   if (!is_numeric($incidentid)) return;

   // IP address stuff.
   if (array_key_exists('ip', $current)) {
      $ipaddress = $current['ip'];
   } elseif (array_key_exists('active_ip', $_SESSION)) {
      $ipaddress = $_SESSION['active_ip'];
   }

   if (array_key_exists('name', $current)) {
      if (is_array($current['name'])) {
         $name = implode(', ', $current['name']);
      } else {
         $name = $current['name'];
      }
   } elseif ($array_key_exists('current_name', $_SESSION)) {
      $name = $_SESSION['name'];
   }

   if (array_key_exists('email', $current)) {
      if (is_array($current['email'])) {
         $email = implode(',', $current['email']);
      } else {
         $email = $current['email'];
      }
   } else {
      $email = '';
   }

   if (isset($ipaddress)) {
      $out = ereg_replace("@IPADDRESS@", $ipaddress, $out);
      $out = ereg_replace("@HOSTNAME@", $current['hostname'], $out);

      if (strpos($out, '@PREVIOUS@') !== FALSE) {
         // Fetch previous incidents associated with this IP address.
         $incidents = getIncidentsByIP($ipaddress);

         // Notice that this list always includes the current incident!
         if (count($incidents)>1) {
            $previous = '';
            foreach ($incidents as $i=>$summary) {
               if ($i != $incidentid) {
                  $previous .= "$summary\n";
               }
            }
            $previous = trim($previous);
         } else {
            $previous = '--';
         }
         $out = ereg_replace('@PREVIOUS@',$previous,$out);
      }
   }

   if (strpos($out, '@OTHER_OPEN_LIST@') !== FALSE) {
      $open = array();
      foreach (getAddressesForIncident($incidentid) as $key=>$data) {
	 $c = $data['constituency'];
	 if (!array_key_exists($c, $open)) {
	    $open[$c] = array();
	 }
      }
      foreach (getOpenIncidentsByConstituency($c) as $k=>$d) {
         if (!in_array($d, $open[$c])) {
            $open[$c][] = $d;
         }
      }
      // $open[] now contains one array per constituency. Each subarray 
      // contains incidentids
      $oo = '';
      foreach ($open as $c) {
         foreach ($c as $i) {
            if ($i == $incidentid) continue; // skip current incident

            $incident = getIncident($i);
            $ips = array();
            foreach ($incident['ips'] as $incidentip) {
                $ips[] = $incidentip['ip'];
            }
            $oo .= sprintf('%s %s %s %s %s %s'.LF, 
	           normalize_incidentid($incident['incidentid']),
               htmlentities(getIncidentTypeLabelById($incident['type'])),
               htmlentities(getIncidentStateLabelById($incident['state'])),
	           Date('Y/m/d', $incident['created']),
	           Date('Y/m/d', $incident['updated']),
               implode(', ', $ips)
            );
         }
      }
      if ($oo == '') {
         $oo = '--';
      }
      $out = ereg_replace('@OTHER_OPEN_LIST@', $oo, $out);
   } // @OTHER_OPEN_LIST@


   if (strpos($out, '@OTHER_OPEN@') !== FALSE) {
      // Expand @OTHER_OPEN@
      $open = array();
      foreach (getAddressesForIncident($incidentid) as $key=>$data) {
         $c = $data['constituency'];
         if (!array_key_exists($c, $open)) {
            $open[$c] = array();
         }
         foreach (getOpenIncidentsByConstituency($c) as $k=>$d) {
            if (!in_array($d, $open[$c])) {
               $open[$c][] = $d;
            }
         }
      }
      // $open[] now contains one array per constituency. Each subarray 
      // contains incidentids
      $oo = '';
      foreach ($open as $c) {
         foreach ($c as $i) {
            if ($i == $incidentid) continue; // skip current incident

            $incident = getIncident($i);
            $oo .= sprintf('%15s %s'.LF, normalize_incidentid($incident['incidentid']),
               getIncidentTypeLabelById($incident['type']));
         }
      }
      if ($oo == '') {
         $oo = '--';
      }
      $out = ereg_replace('@OTHER_OPEN@', $oo, $out);
   }

   if (isset($name) && strpos($out, '@USERNAME@') !== FALSE) {
      $out = ereg_replace("@USERNAME@", $name, $out);
   }

   if (isset($email) && strpos($out, '@USEREMAIL@') !== FALSE) {
      $out = ereg_replace("@USEREMAIL@", $email, $out);
   }

   if (array_key_exists('current_info', $_SESSION) &&
       strpos($out, '@USERINFO@') !== FALSE) {
      $out = ereg_replace("@USERINFO@", $_SESSION["current_info"], $out);
   }

   $u = getUserByUserId($_SESSION["userid"]);
   if (strpos($out, '@YOURNAME@') !== FALSE) {
      $name = sprintf("%s %s", $u["firstname"], $u["lastname"]);

      $out = ereg_replace("@YOURNAME@", $name, $out);
   }

   if (strpos($out, '@YOURFIRSTNAME@') !== FALSE) {
      $out = ereg_replace("@YOURFIRSTNAME@", $u["firstname"], $out);
   }

   // Incident stuff.
   if (isset($incidentid)) {
      $out = ereg_replace("@INCIDENTID@",
         normalize_incidentid($incidentid), $out);

     // Fetch logging info from basic incident data.
     $incident = getIncident(decode_incidentid($incidentid));
     $logging = trim($incident['logging']);
     if ($logging=='') {
        $logging = '--';
     }

     if (strpos($out, '@LOGGING@') !== FALSE) {
        $out = ereg_replace('@LOGGING@',$logging,$out);
     }

     $extids = array();
     foreach (getExternalIncidentIDs($incidentid) as $e) {
        if (preg_match('/^_(.*)/', $e, $mm) == 0) {
           $extids[] = $e;
        } 
     }

     if (strpos($out, '@EXTIDS@') !== FALSE) {
        $out = ereg_replace('@EXTIDS@', implode(',',$extids),$out);
     }

     // Basic incident data in XML format.

     if (strpos($out, '@XMLDATA@') !== FALSE) {
        $xmlData = trim(exportIncident(
                      array(0=>decode_incidentid($incidentid))));
        $out = ereg_replace('@XMLDATA@',$xmlData,$out);
     }

     $iodef = $status ='';
     if (strpos($out, '@IODEF@') !== FALSE) {
        if (exportIODEF(decode_incidentid($incidentid), $iodef, $status)) {
           $out = ereg_replace('@IODEF@', $iodef, $out);
        } else {
           $out = $status;
        }
     }
   }

  return $out ;
} // replace_vars

/** Check if a mail template with the given name exists in the database.
 * @param $template Name of the template
 * @return true if the incident exists; false if it does not
 */
function templateExists($template) {
   $q = q('SELECT name FROM mailtemplates WHERE name=\'%template\'',
      array('%template'=>db_escape_string($template)));
   $res = db_query($q); 
   if ($res == false) {
      airt_error('DB_QUERY', 'incidents.plib:'.__LINE__);
      reload('');
      return false;
   }
   if (db_num_rows($res) == 0) {
      return false;
   } else {
      return true;
   }
}


/**
 * Get all mail templates with a specific capability set.
 * 
 * @capability string
 * @templates array of template names
 * @error string
 *
 * @return true on success, false on failure
 */
function getCapabilityMailtemplates($capability, &$templates, &$error) {
   global $AIRT_MAIL_CAPABILITIES;
   $error = '';
   if (!in_array($capability, $AIRT_MAIL_CAPABILITIES)) {
      $error = _('Invalid mail template capability');
      return false;
   }
   $templates = array();
   $res = db_query(q('select distinct template '.
      'from mailtemplate_capabilities '.
      'where captype=\'%type\' and capvalue=1', array(
      '%type'=>AIRT_MAIL_CAPABILITY_IODEF)));
   if ($res === false) {
      $error = _('Error querying database in mailtemplates.plib:').__LINE__;
      return false;
   }
   while ($row = db_fetch_next($res)) {
      $templates[] = $row['template'];
   }
   return true;
}
 
/* Get a template's capabilities.
 * $template  template name to retrieve
 * &$capabilities associative array of capabilities
 * $error   error (if any)
 *
 * returns true on success, false on failure
 */
function getMailtemplateCapabilities($template, &$capabilities=array(), 
   &$error='') 
{
   global $AIRT_MAIL_CAPABILITIES;
   foreach ($AIRT_MAIL_CAPABILITIES as $key=>$value) {
      $capabilities[$key] = $value;
   }
   $res = db_query(q("select captype, capvalue from ".
      "mailtemplate_capabilities where template='%template'", array(
      '%template'=>db_escape_string($template))));
   if (!$res) {
      $error = _('Unable to query database in mailtemplates.plib:').__LINE__;
      return false;
   }
   while ($row = db_fetch_next($res)) {
      $capabilities[$row['captype']] = $row['capvalue'];
   }
   return true;
}

/* Set the templates's capabilities.
 *
 * $template = userid to set capabilities for
 * $capabilties = associative array containing capabilities and value
 * $error = descriptive error message, if any
 *
 * returns true on success, false on failure
 */
function setMailtemplateCapabilities($template, $capabilities, &$error='') 
{
   $res = db_query(q('select distinct captype from '.
      'mailtemplate_capabilities where template=\'%template\'', array(
      '%template'=>db_escape_string($template))));
   if (!$res) {
      $error = _('Database error in mailtemplates.plib:').__LINE__;
      return false;
   }
   $caps=array();
   while ($row = db_fetch_next($res)) {
      $caps[] = $row['captype'];
   }
   $inserts = array();
   $updates = array();
   foreach ($capabilities as $key=>$value) {
      if (array_search($key, $caps) !== false) {
         $updates[] = q('update mailtemplate_capabilities set captype=\'%key\',
         capvalue=%value where template=\'%template\' and captype=\'%key\'', 
         array(
            '%key'=>db_escape_string($key),
            '%value'=>$value,
            '%template'=>db_escape_string($template)));
      } else {
         $inserts[] = q('insert into mailtemplate_capabilities (id, template, captype,
         capvalue) values (nextval(\'generic_sequence\'), \'%template\',
         \'%captype\', %capvalue)', array(
            '%template'=>db_escape_string($template),
            '%captype'=>db_escape_string($key),
            '%capvalue'=>$value));
      }
   }
   $query = "begin transaction;";
   if (sizeof($updates) > 0) {
      $query .= implode(';', $updates).';';
   }
   if (sizeof($inserts) > 0) {
      $query .= implode(';', $inserts).';';
   }
   $query .= "commit;";

   $res = db_query($query);
   if (!$res) {
      $error = _('Database error in mailtemplates.plib:').__LINE__;
      return false;
   }
   return true;
}

/**
 * Toggle the IODEF capability
 *
 * @param $template string 
 * @param $toggle bool
 * @param $err string
 * @return true on success, false on failure
 */
function toggleMailCapabilityIODEF($template, $toggle, &$err) 
{
   $err='';
   if (!templateExists($template)) {
      $err = _('No such template in mailtemplates.plib:').__LINE__;
      return false;
   }
   if ($toggle === false) {
      if (setMailtemplateCapabilities($template, array(
         AIRT_MAIL_CAPABILITY_IODEF => 0), $err) === false) {
         return false;
      }
   } else {
      /* reset the IODEF capability for all templates that have it set */
       $res = db_query(q('select distinct template from '.
         'mailtemplate_capabilities where '.  
         'captype=\'%type\' and capvalue=1', array(
            '%type'=>AIRT_MAIL_CAPABILITY_IODEF)));
      if ($res == false) {
         $err = _('Unable to select capabilities in mailtemplates.plib:').
            __LINE__;
         return false;
      }
      while ($row = db_fetch_next($res)) {
         if (setMailtemplateCapabilities($row['template'], array(
            AIRT_MAIL_CAPABILITY_IODEF => 0), $err) === false) {
            return false;
         }
      }
      /* set it for the current one */
      if (setMailtemplateCapabilities($template, array(
         AIRT_MAIL_CAPABILITY_IODEF => 1), $err) === false) {
         return false;
      }
   }
   return true;
}


function listTemplates($edit=false) {
   /* $to is a comma-separated list of recipient email addresses, or
    * an array contain email addresses
    */
   $recipients = fetchFrom('REQUEST', 'to');
   if (empty($recipients)) {
      $recipients = array();
   }
   if (!is_array($recipients)) {
      $recipients = explode(',', $recipients);
   }

   /* $incidentids is a comma-separated list of incident ids, or
    * an array contain incident ids
    */
   $incidentids = fetchFrom('REQUEST', 'incidentids');
   if (empty($incidentids)) {
      $incidentid = fetchFrom('REQUEST', 'incidentid', '%d');
      if (empty($incidentid)) {
         $sess = fetchFrom('SESSION', 'incidentid');
         if (empty($sess)) {
             $incidentids = array();
         } else {
             $incidentids = array($sess);
         }
      } else {
         $incidentids = array($incidentid);
      }
   }
   if (!is_array($incidentids)) {
      $incidentids = explode(',', $incidentids);
   }
   foreach ($incidentids as $ikey => $ivalue) {
       if (!is_numeric($ivalue)) {
           unset($incidentids[$ikey]);
       }
   }
   templateList($recipients, $incidentids, $edit);
}

function templateList($recipients=array(), $incidentids=array(), $edit=false) {
  pageHeader(_('Mail templates'), array(
     'menu'=>'mail', 'submenu'=>'templates'));
  $show_prepare = true;
  if ($edit === true) {
      print t('<P><a href="%url?action=new">'.
          _('Create a new message').'</a></P>'.LF,
          array('%url'=>$_SERVER['PHP_SELF']));
  }
  print format_templates($recipients, $incidentids, $edit);

  pageFooter();
}

?>
