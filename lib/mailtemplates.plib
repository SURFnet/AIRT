<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 * $Id$ 
 * mailtemplates.plib - Standard message library
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

require_once LIBDIR."/airt.plib";
require_once LIBDIR."/user.plib";
require_once LIBDIR."/history.plib";
require_once LIBDIR."/incident.plib";
require_once LIBDIR."/export.plib";
require_once 'Mail.php';
require_once 'Mail/mimePart.php';


/**
 * Read a standard message from the filesystem
 * $str = the name of the template to be read
 * Returns the file as one large buffer on success, or false on failure.
 * Note: retrieving a non-existing template is not considered to be an error. Instead, the function will return an empty body.
 */
function get_template($template) {
   $res = db_query(q('SELECT body FROM mailtemplates WHERE name=\'%name\'',
      array('%name'=>$template)));
   if (!$res) {
      airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
      return false;
   }
   if (db_num_rows($res) > 0) {
      $row = db_fetch_next($res);
      return $row['body'];
   } else {
      return '';
   }
} // read_standard_message


/** Update the definition of a template
 * $name = the name of the template
 * $body = the body of the template
 * Returns 0 on success, 1 on failure.
 */
function save_template($name='', $body='') {
   if ($name == '' || $body == '') {
      return 1;
   }
   $template = get_template($name);
   if ($template == '') {
      $res = db_query(q('INSERT INTO mailtemplates (name, body, created, createdby) VALUES (\'%name\', \'%body\', CURRENT_TIMESTAMP, %uid)', array(
         '%name'=>db_escape_string($name),
         '%body'=>db_escape_string($body),
         '%uid'=>$_SESSION['userid'])));
      if (!$res) {
         airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
         return 1;
      }
      // new template
   } else {
      $res = db_query(q('UPDATE mailtemplates SET body=\'%body\', updated=CURRENT_TIMESTAMP, updatedby=%uid WHERE name=\'%name\'', array(
         '%name'=>db_escape_string($name),
         '%body'=>db_escape_string($body),
         '%uid'=>$_SESSION['userid'])));
      if (!$res) {
         airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
         return 1;
      }
      // existing template
   }
   return 0;
}

/** Remove the named template
 * return 0 on success, 1 on failure
 */
function delete_template($name='') {
   if ($name=='') {
      return 1;
   }
   $res = db_query(q('DELETE FROM mailtemplates WHERE name=\'%name\'', array(
      '%name'=>$name)));
   if (!$res) {
      airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
      return 1;
   }
   return 0;
}

/**
 * Create a new template if it does not exists, or update the current one if it does.
/**
 * Retrieve the subject line from a message
 * $msg = the buffer containing the message
 * return false on failure, or the subject line on success
 */
function get_subject($msg) {
   $match = ereg("@SUBJECT@(.*)@ENDSUBJECT@", $msg, $regs);
   if (!$match) {
      return false;
   }
   return $regs[1];
} // get_subject

/**
 * Get all standard messages. 
 * Returns an associative array in which the key is the name of the 
 * template and the value the body or false on failure.
 */
function get_templates() {
   $out = array();
   $res = db_query(q('SELECT name,body FROM mailtemplates ORDER BY name'));
   if (!$res) {
      airt_error('ERR_FUNC', 'mailtemplates.plib:'.__LINE__);
      return false;
   }
   if (db_num_rows($res) > 0) {
      while ($row = db_fetch_next($res)) {
         $out[$row['name']] = $row['body'];
      }
   }
   return $out;
}

/**
 * Retrieve a formatted overview of mail templates
 */
function format_templates() {
   $out = "<table>";
   $count=0;
   $templates = get_templates();
   if (sizeof($templates) == 0) {
      return "No templates available.";
   }
   foreach ($templates as $name=>$body) {
      $subject = get_subject($body);
      $out .= t("<tr bgcolor=\"%color\">", array(
         '%color'=>($count++%2==0?"#DDDDDD":"#FFFFFF")));
      $out .= t("<td><a href=\"%url?action=prepare&template=%name\">prepare</a></td>", array(
         '%url'=>$_SERVER['PHP_SELF'],
         '%name'=>$name));
      $out .= t("<td>%name</td>\n", array('%name'=>$name));
      $out .= t("<td>%subject</td>\n", array('%subject'=>$subject));
      $out .= t("<td><a href=\"%url?action=edit&template=%name\">edit</a></td>\n", array(
         '%url'=>$_SERVER['PHP_SELF'],
         '%name'=>$name));
      $out .= t("<td><a onclick=\"return confirm('Are you sure that you want to delete this message?')\" href=\"%url?action=delete&template=%name\">delete</a></td>\n", array(
         '%url'=>$_SERVER['PHP_SELF'],
         '%name'=>$name));
      $out .= t("</tr>\n");
    }
    $out .= "</table>";

    return $out;
} // format_templates();


/**
 * Show a message, without processing it.
 */
function show_message($name) {
    if (($message = read_standard_message($name)) == false) {
        printf("Unable to read message.");
        return false;
    }
    printf("%s", replace_vars($message));
} // show_message

function prepare_message($template) {
   pageHeader("Send message from template.");

   // get vars
   $cert = getUserByUserId($_SESSION["userid"]);
   if (MAILFROM == '') {
      $from = $cert["email"];
   } else {
      $from = replace_vars(MAILFROM);
   }

   if (defined(REPLYTO) && REPLYTO != '') {
      $replyto = replace_vars(REPLYTO);
   } else {
      $replyto = '';
   }

   // load message and replace all standard variables
   $msg = replace_vars(get_template($template));
   // extract subject
   $subject = get_subject($msg);

   // remove first line from standard message (which is the subject)
   $m = explode("\n", $msg);
   unset($m[0]);
   $msg = implode("\n", $m);

   // to
   if (array_key_exists('current_email', $_SESSION)) {
      $to = $_SESSION['current_email'];
   } else {
      $to = '';
   }

   generateEvent('premailtemplate', array(
    'to'=>$to,
    'subject'=>$subject,
    'from'=>$from,
    'replyto'=>$replyto,
    'message'=>$msg));

   echo <<<EOF
<FORM method="POST">
<TABLE WIDTH="80">
<TR>
   <TD>To:</TD>
   <TD><INPUT TYPE="text" size="50" name="to" value="$to"></TD>
</TR>
<TR>
   <TD>Subject:</TD>
   <TD><INPUT TYPE="text" size="50" name="subject" value="$subject"></TD>
</TR>
<TR>
   <TD>From:</TD>
   <TD><INPUT TYPE="text" size="50" name="from" value="$from"></TD>
</TR>
<TR>
   <TD>Reply-To:</TD>
   <TD><INPUT TYPE="text" size="50" name="replyto" value="$replyto"></TD>
</TR>
</TABLE>
<TEXTAREA name="msg" cols="80" rows="30">$msg</TEXTAREA>
<P>
<input type="hidden" name="action" value="send">
<input type="reset"  value="Reset">
<input type="submit" value="Send">
EOF;
      if (defined('GPG_KEYID')) {
         echo '<input type="checkbox" name="sign" checked> Sign';
      }
      echo <<<EOF
</FORM>
EOF;

   generateEvent('postmailtemplate', array(
    'to'=>$to, 
    'subject'=>$subject, 
    'from'=>$from, 
    'replyto'=>$replyto, 
    'message'=>$msg));
   pageFooter();
} // prepare_message


function print_variables_info() {
    echo <<<EOF
<table cellpadding="2">
<tr>
    <td>@HOSTNAME@</td>
    <td>Will be replaced with the currently active hostname</td>
</tr>
<tr>
    <td>@INCIDENTID@</td>
    <td>Will be replaced with the current incident id</td>
</tr>
<tr>
    <td>@IPADDRESS@</td>
    <td>Will be replaced with the currently active IP address</td>
</tr>
<tr>
    <td>@LOGGING@</td>
    <td>Will be replaced with the available logging information</td>
</tr>
<tr>
    <td>@PREVIOUS@</td>
    <td>Will be replaced with previous incidents</td>
</tr>
<tr>
    <td nowrap>@SUBJECT@ .. @ENDSUBJECT@</td>
    <td>Delimits the subject line of the message</td>
</tr>
<tr>
   <td>@USEREMAIL@</td>
   <td>Will be replaced with the email address of the current user</td>
</tr>
<tr>
   <td>@USERINFO@</td>
   <td>Will be replaced with detailed information about the user, if that
   information is available.</td>
</tr>
<tr>
    <td>@USERNAME@</td>
    <td>Will be replaced with the name of the current user</td>
</tr>
<tr>
    <td>@XMLDATA@</td>
    <td>Will be replaced with the incident data in XML format</td>
</tr>
<tr>
    <td>@YOURFIRSTNAME@</td>
    <td>Will be replaced with the first name of the logged in incident
    handler</td>
</tr>
<tr>
    <td>@YOURNAME@</td>
    <td>Will be replaced with the full name of the logged in incident
    handler</td>
</tr>
</table>
EOF;
}

function replace_vars($msg) {
   $out = $msg;

   // IP address stuff.
   if (array_key_exists('active_ip', $_SESSION)) {
      $out = ereg_replace("@IPADDRESS@", $_SESSION["active_ip"], $out);
      $out = ereg_replace("@HOSTNAME@",
         @gethostbyaddr($_SESSION["active_ip"]), $out);
      // Fetch previous incidents associated with this IP address.
      $incidents = getIncidentsByIP($_SESSION['active_ip']);
      // Notice that this list always includes the current incident!
      if (count($incidents)>1) {
         $previous = '';
         foreach ($incidents as $incidentID=>$summary) {
            if ($incidentID != $_SESSION['incidentid']) {
               $previous .= "$summary\n";
            }
         }
         $previous = trim($previous);
      } else {
         $previous = '--';
      }
      $out = ereg_replace('@PREVIOUS@',$previous,$out);
   }

   if (array_key_exists('current_name', $_SESSION)) {
      $out = ereg_replace("@USERNAME@", $_SESSION["current_name"], $out);
   }

   if (array_key_exists('current_email', $_SESSION)) {
      $out = ereg_replace("@USEREMAIL@", $_SESSION["current_email"], $out);
   }

   if (array_key_exists('current_info', $_SESSION)) {
      $out = ereg_replace("@USERINFO@", $_SESSION["current_info"], $out);
   }

   $u = getUserByUserId($_SESSION["userid"]);
   $name = sprintf("%s %s", $u["firstname"], $u["lastname"]);
   $out = ereg_replace("@YOURNAME@", $name, $out);
   $out = ereg_replace("@YOURFIRSTNAME@", $u["firstname"], $out);

   // Incident stuff.
   if (array_key_exists('incidentid', $_SESSION)) {
      $out = ereg_replace("@INCIDENTID@",
         normalize_incidentid($_SESSION['incidentid']), $out);

     // Fetch logging info from basic incident data.
     $incident = getIncident(decode_incidentid($_SESSION['incidentid']));
     $logging = trim($incident['logging']);
     if ($logging=='') {
        $logging = '--';
     }
     $out = ereg_replace('@LOGGING@',$logging,$out);

     // Basic incident data in XML format.
     $xmlData = trim(exportIncident(
                   array(0=>decode_incidentid($_SESSION['incidentid']))));
     $out = ereg_replace('@XMLDATA@',$xmlData,$out);
   }

  return $out ;
} // replace_vars

?>
