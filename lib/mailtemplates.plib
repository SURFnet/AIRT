<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 * $Id$ 
 * mailtemplates.plib - Standard message library
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

require_once LIBDIR."/airt.plib";
require_once LIBDIR."/user.plib";
require_once LIBDIR."/history.plib";
require_once LIBDIR."/incident.plib";
require_once LIBDIR."/export.plib";
require_once 'Mail.php';
require_once 'Mail/mimePart.php';



/** Retrieve the mail template actions.
 * \param [in] $template identifier of the template
 * \param [out] $actions associative array with keys: type, state, status
 * \return true on success, false on failure
 */
function get_template_actions($template, &$actions) {
   $res = db_query(q("select action_type as type, action_state as state, action_status as status from mailtemplates where name='%name'", array('%name'=>db_escape_string($template))));
   if (!$res) {
      return false;
   }
   if (db_num_rows($res) == 0) {
      return false;
   }
   $actions = db_fetch_next($res);
   if ($actions['type'] == '') { $actions['type'] = -1; }
   if ($actions['status'] == '') { $actions['status'] = -1; }
   if ($actions['state'] == '') { $actions['state'] = -1; }
   db_free_result($res);
   return true;
}


/** Retrieve a message template.
 * \param [in] $template the name of the template to be read
 *
 * \return Returns the file as one large buffer on success, or false on
 * failure.
 *
 * Note: retrieving a non-existing template is not considered to be an error.
 * Instead, the function will return an empty body.
 */
function get_template($template) {
   $res = db_query(q('SELECT body FROM mailtemplates WHERE name=\'%name\'',
      array('%name'=>$template)));
   if (!$res) {
      airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
      return false;
   }
   if (db_num_rows($res) > 0) {
      $row = db_fetch_next($res);
      return $row['body'];
   } else {
      return '';
   }
} // read_standard_message


/** Update the definition of a template.
 * \param $name [in] the name of the template
 * \param $body [in] the body of the template
 * \return Returns 0 on success, 1 on failure.
 */
function save_template($name='', $body='', $update) {
   if ($name == '' || $body == '') {
      return 1;
   }
   if (!array_key_exists('type', $update) || !is_numeric($update['type'])) {
      return 1;
   } 
   if (!array_key_exists('state', $update) || !is_numeric($update['state'])) {
      return 1;
   }
   if (!array_key_exists('status', $update) || !is_numeric($update['status'])) {
      return 1;
   }
   if ($update['type'] == -1) { $update['type'] = 'NULL'; }
   if ($update['status'] == -1) { $update['status'] = 'NULL'; }
   if ($update['state'] == -1) { $update['state'] = 'NULL'; }

   $template = get_template($name);
   if ($template == '') {
      $res = db_query(q('INSERT INTO mailtemplates (name, body, created, createdby, action_type, action_state, action_status) VALUES (\'%name\', \'%body\', CURRENT_TIMESTAMP, %uid, %type, %state, %status)', array(
         '%name'=>db_escape_string($name),
         '%body'=>db_escape_string($body),
         '%uid'=>$_SESSION['userid'],
         '%type'=>$update['type'],
         '%state'=>$update['state'],
         '%status'=>$update['status'])));
      if (!$res) {
         airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
         return 1;
      }
      // new template
   } else {
      $res = db_query(q('UPDATE mailtemplates SET body=\'%body\', updated=CURRENT_TIMESTAMP, updatedby=%uid, action_state=%state, action_status=%status, action_type=%type WHERE name=\'%name\'', array(
         '%name'=>db_escape_string($name),
         '%body'=>db_escape_string($body),
         '%type'=>$update['type'],
         '%state'=>$update['state'],
         '%status'=>$update['status'],
         '%uid'=>$_SESSION['userid'])));
      if (!$res) {
         airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
         return 1;
      }
      // existing template
   }
   return 0;
}

/** Remove the named template
 * \return 0 on success, 1 on failure
 */
function delete_template($name='') {
   if ($name=='') {
      return 1;
   }
   $res = db_query(q('DELETE FROM mailtemplates WHERE name=\'%name\'', array(
      '%name'=>$name)));
   if (!$res) {
      airt_error('DB_QUERY', 'mailtemplates.plib:'.__LINE__);
      return 1;
   }
   return 0;
}

/**
 * Create a new template if it does not exists, or update the current one if it does.
/**
 * Retrieve the subject line from a message
 * $msg = the buffer containing the message
 * return false on failure, or the subject line on success
 */
function get_subject($msg) {
   $match = ereg("@SUBJECT@(.*)@ENDSUBJECT@", $msg, $regs);
   if (!$match) {
      return false;
   }
   return $regs[1];
} // get_subject

/**
 * Get all standard messages. 
 * Returns an associative array in which the key is the name of the 
 * template and the value the body or false on failure.
 */
function get_templates($extras=array()) {
   $res = db_query(q('SELECT name,body FROM mailtemplates ORDER BY name'));
   if (!$res) {
      airt_error('ERR_FUNC', 'mailtemplates.plib:'.__LINE__);
      return false;
   }
   $out = $extras;
   if (db_num_rows($res) > 0) {
      while ($row = db_fetch_next($res)) {
         $out[$row['name']] = $row['body'];
      }
   }
   return $out;
}

/**
 * Get a SELECTION dialog with mail templates
 */
function getMailtemplateSelection($name, $default='', $extras=array()) {
   $output = sprintf("<select name=\"%s\">\n", htmlentities($name));
   $templates = get_templates($extras);
   foreach ($templates as $i=>$l) {
      $output .= sprintf("<option value=\"%s\" %s>%s</option>\n", htmlentities($i), ($i == $default) ? "SELECTED" : "", htmlentities($i));
   }
   $output .= "</select>";
   return $output;
}

/** Retrieve a formatted overview of mail templates.
 * \return A string containing a HTML-formatted overview of available templates.
 */
function format_templates() {
   if (array_key_exists('to', $_REQUEST)) {
      $to = "&to=".urlencode($_REQUEST['to']);
   } else {
      $to = '';
   }
   $out = "<table>";
   $count=0;
   $templates = get_templates();
   if (sizeof($templates) == 0) {
      return "No templates available.";
   }
   foreach ($templates as $name=>$body) {
      $subject = get_subject($body);
      $out .= t("<tr bgcolor=\"%color\">", array(
         '%color'=>($count++%2==0?"#DDDDDD":"#FFFFFF")));
      $out .= t("<td><a href=\"%url?action=prepare&template=%name%to\">prepare</a></td>", array(
         '%url'=>$_SERVER['PHP_SELF'],
         '%name'=>$name,
         '%to'=>$to));
      $out .= t("<td>%name</td>\n", array('%name'=>$name));
      $out .= t("<td>%subject</td>\n", array('%subject'=>$subject));
      $out .= t("<td><a href=\"%url?action=edit&template=%name\">edit</a></td>\n", array(
         '%url'=>$_SERVER['PHP_SELF'],
         '%name'=>$name));
      $out .= t("<td><a onclick=\"return confirm('Are you sure that you want to delete this message?')\" href=\"%url?action=delete&template=%name\">delete</a></td>\n", array(
         '%url'=>$_SERVER['PHP_SELF'],
         '%name'=>$name));
      $out .= t("</tr>\n");
    }
    $out .= "</table>";

    return $out;
} // format_templates();


/**
 * Show a message, without processing it.
 */
function show_message($name) {
    if (($message = read_standard_message($name)) == false) {
        printf("Unable to read message.");
        return false;
    }
    printf("%s", replace_vars($message));
} // show_message


/** Expand a mail template. Use the information contained in $current to
 * expand mail template $template.
 *
 * \param [in] $template  The template to be expanded
 * \param [in] $current   An associative arrow with key-value pairs
 *
 * \return An associative array with the following keys
 *     $output['sender']       message sender
 *     $output['receiver']     message receiver
 *     $output['replyto']      replyto header
 *     $output['subject']      subject header
 *     $output['body']         message body
 */
function expand_template($template, $current) {
   $output = array();

   // message sender
   $cert = getUserByUserId($_SESSION['userid']);
   if (MAILFROM == '') {
      $output['sender'] = $cert['email'];
   } else {
      $output['sender'] = replace_vars(MAILFROM, $current);
   }

   // message receiver
   if (array_key_exists('email', $current)) {
      if (is_array($current['email'])) {
         $receivers = array();
         foreach($current['email'] as $email) {
            $receivers[]=$email;
         }
         $output['receiver'] = implode(',',$receivers);
      } else {
         $output['receiver'] = $current['email'];
      }
   } elseif (array_key_exists('current_email', $_SESSION)) {
      $output['receiver'] = $current['current_email'];
   } else {
      $output['receiver'] = '';
   }

   // reply to (if set)
   if (defined(REPLYTO) && REPLYTO != '') {
      $output['replyto'] = replace_vars(REPLYTO, $current);
   } else {
      $output['replyto'] = '';
   }

   // load message and replace all standard variables
   $output['body'] = replace_vars(get_template($template), $current);

   // extract subject
   $output['subject'] = get_subject($output['body']);

   // remove first line from standard message (which is the subject)
   $m = explode("\n", $output['body']);
   unset($m[0]);
   $output['body'] = implode("\n", $m);

   return $output;
}

/* Expand a message, based on a template.
 */
function prepare_message($template, $agenda=array(), $to=array()) {
	$current = array('user'=>'', 'name'=>'', 'email'=>'', 
      'ip'=>'', 'hostname'=>'');

   pageHeader("Send message from template.");
	$current['incidentid'] = $agenda[0];
	unset($agenda[0]);
	$incident = getIncident($current['incidentid']);
	if (sizeof($incident['users']) > 0) {
      foreach ($incident['users'] as $uid) {
         $user = getUserByUserID($uid);
         if (sizeof($to) == 0 || in_array($uid, $to)) {
            $current['name'][] = $user['lastname'];
            $current['email'][] = $user['email'];
         }
      }
	}
   if (sizeof($incident['ips']) > 0) {
      $current['ip'] = $incident['ips'][0]['ip'];
      $current['hostname'] = $incident['ips'][0]['hostname'];
   }

   $msgdata = expand_template($template, $current);

   generateEvent('premailtemplate', array(
    'to'=>$msgdata['receiver'],
    'subject'=>$msgdata['subject'],
    'from'=>$msgdata['sender'],
    'replyto'=>$msgdata['replyto'],
    'message'=>$msgdata['body']));

   $agendaval=implode(',', $agenda);
   echo <<<EOF
<FORM method="POST">
<TABLE WIDTH="80">
<TR>
   <TD>To:</TD>
   <TD><INPUT TYPE="text" size="50" name="to" value="$msgdata[receiver]"></TD>
</TR>
<TR>
   <TD>Subject:</TD>
   <TD><INPUT TYPE="text" size="50" name="subject" value="$msgdata[subject]"></TD>
</TR>
<TR>
   <TD>From:</TD>
   <TD><INPUT TYPE="text" size="50" name="from" value="$msgdata[sender]"></TD>
</TR>
<TR>
   <TD>Reply-To:</TD>
   <TD><INPUT TYPE="text" size="50" name="replyto" value="$msgdata[replyto]"></TD>
</TR>
</TABLE>
<TEXTAREA name="msg" cols="80" rows="30">$msgdata[body]</TEXTAREA>
<P>
<input type="hidden" name="agenda" value="$agendaval">
<input type="hidden" name="template" value="$template">
<input type="hidden" name="incidentid" value="$current[incidentid]">
<input type="reset"  value="Reset">
<input type="submit" name="action" value="Send">
EOF;
      if (sizeof($agenda) > 0) {
         print t('<input type="submit" name="action" value="Send and prepare next">');
      }
      if (defined('GPG_KEYID')) {
         echo '<input type="checkbox" name="sign" checked> Sign';
      }
      echo <<<EOF
</FORM>
EOF;

   generateEvent('postmailtemplate', array(
    'to'=>$msgdata['receiver'],
    'subject'=>$msgdata['subject'],
    'from'=>$msgdata['sender'],
    'replyto'=>$msgdata['replyto'],
    'message'=>$msgdata['body']));
   pageFooter();
} // prepare_message


function print_variables_info() {
    echo <<<EOF
<table cellpadding="2">
<tr>
    <td>@HOSTNAME@</td>
    <td>Will be replaced with the currently active hostname</td>
</tr>
<tr>
    <td>@INCIDENTID@</td>
    <td>Will be replaced with the current incident id</td>
</tr>
<tr>
    <td>@IPADDRESS@</td>
    <td>Will be replaced with the currently active IP address</td>
</tr>
<tr>
    <td>@LOGGING@</td>
    <td>Will be replaced with the available logging information</td>
</tr>
<tr>
    <td>@PREVIOUS@</td>
    <td>Will be replaced with previous incidents</td>
</tr>
<tr>
    <td nowrap>@SUBJECT@ .. @ENDSUBJECT@</td>
    <td>Delimits the subject line of the message</td>
</tr>
<tr>
   <td>@USEREMAIL@</td>
   <td>Will be replaced with the email address of the current user</td>
</tr>
<tr>
   <td>@USERINFO@</td>
   <td>Will be replaced with detailed information about the user, if that
   information is available.</td>
</tr>
<tr>
    <td>@USERNAME@</td>
    <td>Will be replaced with the name of the current user</td>
</tr>
<tr>
    <td>@XMLDATA@</td>
    <td>Will be replaced with the incident data in XML format</td>
</tr>
<tr>
    <td>@EXTIDS@</td>
	 <td>External incident identifiers (if any)</td>
</tr>
<tr>
    <td>@YOURFIRSTNAME@</td>
    <td>Will be replaced with the first name of the logged in incident
    handler</td>
</tr>
<tr>
    <td>@YOURNAME@</td>
    <td>Will be replaced with the full name of the logged in incident
    handler</td>
</tr>
</table>
EOF;
}

/** Replace @..@ macros in mail templates.
 * \param [in] $msg the mail template to expand
 * \param [in] $current an associative array containing information on the
 * current incident.
 *
 * \return The expanded template.
 */
function replace_vars($msg, $current=array()) {
   $out = $msg;

   if (array_key_exists('incidentid', $current)) {
      $incidentid = $current['incidentid'];
   } elseif (array_key_exists('incidentid', $_SESSION)) {
      $incidentid = $_SESSION['incidentid'];
   }
   if (!is_numeric($incidentid)) return;

   // IP address stuff.
   if (array_key_exists('ip', $current)) {
      $ipaddress = $current['ip'];
   } elseif (array_key_exists('active_ip', $_SESSION)) {
      $ipaddress = $_SESSION['active_ip'];
   }

   if (array_key_exists('name', $current)) {
      if (is_array($current['name'])) {
         $name = implode(', ', $current['name']);
      } else {
         $name = $current['name'];
      }
   } elseif ($array_key_exists('current_name', $_SESSION)) {
      $name = $_SESSION['name'];
   }

   if (array_key_exists('email', $current)) {
      $email = $current['email'];
   } elseif ($array_key_exists('current_email', $_SESSION)) {
      $email = $_SESSION['current_email'];
   }

   if (isset($ipaddress)) {
      $hostname = @gethostbyaddr($ipaddress);
      $out = ereg_replace("@IPADDRESS@", $ipaddress, $out);
      $out = ereg_replace("@HOSTNAME@", $hostname, $out);

      // Fetch previous incidents associated with this IP address.
      $incidents = getIncidentsByIP($ipaddress);

      // Notice that this list always includes the current incident!
      if (count($incidents)>1) {
         $previous = '';
         foreach ($incidents as $i=>$summary) {
            if ($i != $incidentid) {
               $previous .= "$summary\n";
            }
         }
         $previous = trim($previous);
      } else {
         $previous = '--';
      }
      $out = ereg_replace('@PREVIOUS@',$previous,$out);
   }

   if (isset($name)) {
      $out = ereg_replace("@USERNAME@", $name, $out);
   }

   if (isset($email)) {
      $out = ereg_replace("@USEREMAIL@", $email, $out);
   }

   if (array_key_exists('current_info', $_SESSION)) {
      $out = ereg_replace("@USERINFO@", $_SESSION["current_info"], $out);
   }

   $u = getUserByUserId($_SESSION["userid"]);
   $name = sprintf("%s %s", $u["firstname"], $u["lastname"]);
   $out = ereg_replace("@YOURNAME@", $name, $out);
   $out = ereg_replace("@YOURFIRSTNAME@", $u["firstname"], $out);

   // Incident stuff.
   if (isset($incidentid)) {
      $out = ereg_replace("@INCIDENTID@",
         normalize_incidentid($incidentid), $out);

     // Fetch logging info from basic incident data.
     $incident = getIncident(decode_incidentid($incidentid));
     $logging = trim($incident['logging']);
     if ($logging=='') {
        $logging = '--';
     }
     $out = ereg_replace('@LOGGING@',$logging,$out);

	  $out = ereg_replace('@EXTIDS@',
	  implode(',',getExternalIncidentIDs($incidentid)),$out);
     // Basic incident data in XML format.
     $xmlData = trim(exportIncident(
                   array(0=>decode_incidentid($incidentid))));
     $out = ereg_replace('@XMLDATA@',$xmlData,$out);
   }

  return $out ;
} // replace_vars

?>
