<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 * $Id$ 
 * mailtemplates.plib - Standard message library
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

require_once LIBDIR."/airt.plib";
require_once LIBDIR."/user.plib";
require_once LIBDIR."/history.plib";
require_once LIBDIR."/incident.plib";
require_once LIBDIR."/export.plib";
require_once 'Mail.php';
require_once 'Mail/mimePart.php';

function loadAllowedFiles() {
   $f = array();
   $dh = @opendir(STATEDIR.'/templates')
   or die ("Unable to open directory with standard messages.");

   while ($file = readdir($dh)) {
      // skip dot files
      if (ereg("^[.]", $file)) {
         continue;
      }
      array_push($f, $file);
   }
   closedir($dh);

   return $f;
}


/* a filename is allowed if it exists in the $FILES global array. Note that we
 * use a global here, but consider it to be a read-only datastructure. If the
 * $FILES array has not been initialized, access will be refused.
 *
 * Returns: true is the file may be read;
 * Returns: false when it may not be read;
 */
function valid_read($name) {
   global $FILES;

   if (!isset($FILES)) {
      return false;
   }
   if (!in_array($name, $FILES)) {
      return false;
   }

   return true;
}


/* A filename may be written if it only consists of [a-zA-Z_-].
 * NOTE: do not include period or any kind of directory limiters (i.e. / on
 * real OSses)
 */
function valid_write($name) {
   if (ereg('^[a-zA-Z0-9_-]+$', $name)) {
      return true;
   } else {
      return false;
   }
}


/**
 * Read a standard message from the filesystem
 * $str = the name of the file to be read
 * Returns the file as one large buffer on success, or false on failure.
 */
function read_standard_message($str) {
   if (!valid_read($str)) {
      return false;
   }

   $filename = STATEDIR."/templates/$str";
   if (($f = fopen($filename, "r")) == false) {
      return false;
   }

   set_magic_quotes_runtime(0);
   $msg = fread($f, filesize($filename));
   fclose($f);

   return $msg;
} // read_standard_message


/**
 * Retrieve the subject line from a message
 * $msg = the buffer containing the message
 * return false on failure, or the subject line on success
 */
function get_subject($msg) {
    $match = ereg("@SUBJECT@(.*)@ENDSUBJECT@", $msg, $regs);
    if (!$match) {
         return false;
      }

    return $regs[1];
} // get_subject


/**
 * List all standard messages. Returns the number of messages
 */
function list_standard_messages() {
    $dir = STATEDIR."/templates";
    $dh = @opendir($dir)
    or die ("Unable to open directory with standard messages.");

    echo "<table>";
    $count=0;
    while ($file = readdir($dh)) {
         if (!valid_read($file)) {
            continue;
         }
         $msg = read_standard_message($file);
         $subject = get_subject($msg);
         printf("<tr bgcolor=%s>
            <td><a href=\"%s?action=prepare&filename=%s\">prepare</a></td>
            <td>%s</td>
            <td>%s</td>
            <td><a href=\"%s?action=edit&filename=%s\">edit</a></td>
            <td><a onclick=\"return confirm('Are you sure that you want ".
            "to delete this message?')\"
            href=\"%s?action=delete&filename=%s\">delete</a></td>
         </tr>",
               $count++%2==0?"#DDDDDD":"#FFFFFF",
               $_SERVER['PHP_SELF'], urlencode($file),
               $file, $subject,
               $_SERVER['PHP_SELF'], urlencode($file),
               $_SERVER['PHP_SELF'], urlencode($file)
            );
    }
    echo "</table>";

    closedir($dh);
    return $count;
} // list_standard_messages


/**
 * Show a message, without processing it.
 */
function show_message($name) {
    if (($message = read_standard_message($name)) == false) {
        printf("Unable to read message.");
        return false;
    }
    printf("%s", replace_vars($message));
} // show_message


function save_standard_message($filename, $msg) {
   if ($filename == "" || $msg == "" || !valid_write($filename)) {
      return false;
   }

   $filename = STATEDIR."/templates/$filename";
   if (($f = fopen($filename, "w")) == false) {
      return false;
   }

   set_magic_quotes_runtime(0);
   fwrite($f, $msg);
   fclose($f);

   return true;
} // save_standard_message


function prepare_message($filename) {
   pageHeader("Send standard message.");
   if (!valid_read($filename)) {
      echo "Invalid message template.";
      return;
   }

   // get vars
   $cert = getUserByUserId($_SESSION["userid"]);
   if (MAILFROM == '') {
      $from = $cert["email"];
   } else {
      $from = replace_vars(MAILFROM);
   }

   if (defined(REPLYTO) && REPLYTO != '') {
      $replyto = replace_vars(REPLYTO);
   } else {
      $replyto = '';
   }

   // load message and replace all standard variables
   $msg = replace_vars(read_standard_message($filename));

   // extract subject
   $subject = get_subject($msg);

   // remove first line from standard message (which is the subject)
   $m = explode("\n", $msg);
   unset($m[0]);
   $msg = implode("\n", $m);

   // to
   if (array_key_exists('current_email', $_SESSION)) {
      $to = $_SESSION['current_email'];
   } else {
      $to = '';
   }

   generateEvent('premailtemplate', array(
    'to'=>$to, 
    'subject'=>$subject, 
    'from'=>$from, 
    'replyto'=>$replyto, 
    'message'=>$msg));

   echo <<<EOF
<FORM action="$_SERVER[PHP_SELF]" method="POST">
<TABLE WIDTH="80">
<TR>
   <TD>To:</TD>
   <TD><INPUT TYPE="text" size="50" name="to" value="$to"></TD>
</TR>
<TR>
   <TD>Subject:</TD>
   <TD><INPUT TYPE="text" size="50" name="subject" value="$subject"></TD>
</TR>
<TR>
   <TD>From:</TD>
   <TD><INPUT TYPE="text" size="50" name="from" value="$from"></TD>
</TR>
<TR>
   <TD>Reply-To:</TD>
   <TD><INPUT TYPE="text" size="50" name="replyto" value="$replyto"></TD>
</TR>
</TABLE>
<TEXTAREA name="msg" cols="80" rows="30">$msg</TEXTAREA>
<P>
<input type="hidden" name="action" value="send">
<input type="reset"  value="Reset">
<input type="submit" value="Send">
EOF;
      if (defined('GPG_KEYID')) {
         echo '<input type="checkbox" name="sign" checked> Sign';
      }
      echo <<<EOF
</FORM>
EOF;
   generateEvent('postmailtemplate', array(
    'to'=>$to, 
    'subject'=>$subject, 
    'from'=>$from, 
    'replyto'=>$replyto, 
    'message'=>$msg));
   pageFooter();
} // prepare_message


function print_variables_info() {
    echo <<<EOF
<table cellpadding="2">
<tr>
    <td>@HOSTNAME@</td>
    <td>Will be replaced with the currently active hostname</td>
</tr>
<tr>
    <td>@INCIDENTID@</td>
    <td>Will be replaced with the current incident id</td>
</tr>
<tr>
    <td>@IPADDRESS@</td>
    <td>Will be replaced with the currently active IP address</td>
</tr>
<tr>
    <td>@LOGGING@</td>
    <td>Will be replaced with the available logging information</td>
</tr>
<tr>
    <td>@PREVIOUS@</td>
    <td>Will be replaced with previous incidents</td>
</tr>
<tr>
    <td nowrap>@SUBJECT@ .. @ENDSUBJECT@</td>
    <td>Delimits the subject line of the message</td>
</tr>
<tr>
   <td>@USEREMAIL@</td>
   <td>Will be replaced with the email address of the current user</td>
</tr>
<tr>
   <td>@USERINFO@</td>
   <td>Will be replaced with detailed information about the user, if that
   information is available.</td>
</tr>
<tr>
    <td>@USERNAME@</td>
    <td>Will be replaced with the name of the current user</td>
</tr>
<tr>
    <td>@XMLDATA@</td>
    <td>Will be replaced with the incident data in XML format</td>
</tr>
<tr>
    <td>@YOURFIRSTNAME@</td>
    <td>Will be replaced with the first name of the logged in incident
    handler</td>
</tr>
<tr>
    <td>@YOURNAME@</td>
    <td>Will be replaced with the full name of the logged in incident
    handler</td>
</tr>
</table>
EOF;
}

function replace_vars($msg) {
   $out = $msg;

   // IP address stuff.
   if (array_key_exists('active_ip', $_SESSION)) {
      $out = ereg_replace("@IPADDRESS@", $_SESSION["active_ip"], $out);
      $out = ereg_replace("@HOSTNAME@",
         @gethostbyaddr($_SESSION["active_ip"]), $out);
      // Fetch previous incidents associated with this IP address.
      $incidents = getIncidentsByIP($_SESSION['active_ip']);
      // Notice that this list always includes the current incident!
      if (count($incidents)>1) {
         $previous = '';
         foreach ($incidents as $incidentID=>$summary) {
            if ($incidentID != $_SESSION['incidentid']) {
               $previous .= "$summary\n";
            }
         }
         $previous = trim($previous);
      } else {
         $previous = '--';
      }
      $out = ereg_replace('@PREVIOUS@',$previous,$out);
   }
   
   if (array_key_exists('current_name', $_SESSION)) {
      $out = ereg_replace("@USERNAME@", $_SESSION["current_name"], $out);
   }
   
   if (array_key_exists('current_email', $_SESSION)) {
      $out = ereg_replace("@USEREMAIL@", $_SESSION["current_email"], $out);
   }
   
   if (array_key_exists('current_info', $_SESSION)) {
      $out = ereg_replace("@USERINFO@", $_SESSION["current_info"], $out);
   }
   
   $u = getUserByUserId($_SESSION["userid"]);
   $name = sprintf("%s %s", $u["firstname"], $u["lastname"]);
   $out = ereg_replace("@YOURNAME@", $name, $out);
   $out = ereg_replace("@YOURFIRSTNAME@", $u["firstname"], $out);
   
   // Incident stuff.
   if (array_key_exists('incidentid', $_SESSION)) {
      $out = ereg_replace("@INCIDENTID@",
         normalize_incidentid($_SESSION['incidentid']), $out);
     // Fetch basic incident data.
     $incident = getIncident(decode_incidentid($_SESSION['incidentid']));
     $logging = trim($incident['logging']);
     if ($logging=='') {
        $logging = '--';
     }
     $out = ereg_replace('@LOGGING@',$logging,$out);
   }

# @XMLDATA@


  return $out ;
} // replace_vars

?>
