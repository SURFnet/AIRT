<?php
/* vim: syntax=php shiftwidth=3 tabstop=3
 * AIRT: Application for Incident Response Teams
 * Copyright (C) 2006 Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * incident.plib - Incident management application logic
 *
 * $Id$
 */

require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/importqueue.plib';
require_once LIBDIR.'/history.plib';
require_once 'Mail/mimeDecode.php';

define('AIRT_MAIL_STATUS_UNREAD', 'unread');
define('AIRT_MAIL_STATUS_READ', 'read');
define('AIRT_MAIL_STATUS_ARCHIVED', 'archived');
define('AIRT_MAIL_STATUS_DELETED', 'deleted');

define('AIRT_MAIL_SORT_DATE_ASC', 1);
define('AIRT_MAIL_SORT_DATE_DESC', 2);

$AIRT_VALID_MAIL_SORT_KEYS = Array(
   AIRT_MAIL_SORT_DATE_ASC,
   AIRT_MAIL_SORT_DATE_DESC,
);

$AIRT_VALID_MAIL_STATUSES = Array(
   AIRT_MAIL_STATUS_UNREAD,
   AIRT_MAIL_STATUS_READ,
   AIRT_MAIL_STATUS_ARCHIVED,
   AIRT_MAIL_STATUS_DELETED,
);


/* corresponding database schema
 *
 *  create table mailbox (
 *      id    integer,      -- pull from generic_sequence
 *      messageid varchar,  -- Message-Id header
 *      sender    varchar,  -- From header (not envelope from)
 *      recipient varchar,  -- To header
 *      date      numeric,
 *      subject   varchar,  -- Subject header
 *      body      varchar,  -- Everything not header (no mime parsing yet)
 *      raw       varchar,  -- original message, as received
 *      status    varchar,
 *      primary key (id)
 *  );
 */

/**
 * Fetch a single message
 */
function fetchMailMessage($msgid, &$msg, &$error='') {
   if (!is_numeric($msgid)) {
      $error = _('Invalid parameter type in ').'mailbox.plib'.__LINE__;
      return false;
   }
   $msg = array();
   $error = '';
   $q = q('select id, messageid, sender, recipient, date, subject, body, '.
      'status, raw from mailbox where id=%msgid', array(
      '%msgid'=>$msgid));
   $res = db_query($q);
   if (($res = db_query($q)) === false) {
      $error = _('Database error in ').'mailbox.plib:'.__LINE__;
      return false;
   }
   if (($row = db_fetch_next($res)) === false) {
      $error = _('Unable to fetch results in ').'mailbox.plib:'.__LINE__;
      return false;
   }
   $msg = $row;
   
   return true;
}

/**
 * Fetch the contents of the mailbo
 *
 * @param &$mailbox associative array that will contain the mailbox
 * @param $status array containing a list of acceptable mail statuses. If
 * empty, all messages will be retrieved;
 * @param &$error error message, if any
 * @param $sortorder (optional): AIRT_MAIL_SORT_DATE_ASC to sort ascending or
 *        AIRT_MAIL_SORT_DATE_DESC to sort descendin
 * @return true on success, false on failure
 */
function fetchMailbox(&$mailbox, &$error, $status=array(), $sortorder=AIRT_MAIL_SORT_DATE_DESC) {

   $mailbox = array();
   $error = '';
   $q = q('select id, messageid, sender, recipient, date, subject, body, '.
      'status from mailbox ');

   if (!is_array($status)) {
       $error = _('Invalid parameter type for $status in mailbox.plib:').__LINE__;
       return false;
   }
   if (count($status) > 0) {
       $where = array();
       foreach ($status as $s) {
           $where[] = 'status = \''.db_escape_string($s).'\'';
       }
       $q .= 'where '.implode(' OR ', $where);
   }

   $order = array();
   if (($sortorder & AIRT_MAIL_SORT_DATE_ASC) == AIRT_MAIL_SORT_DATE_ASC) {
      $order[] = 'date ASC';
   }
   if (($sortorder & AIRT_MAIL_SORT_DATE_DESC) == AIRT_MAIL_SORT_DATE_DESC) {
      $order[] = 'date DESC';
   }
   $q .= 'order by '.implode(',', $order);

   $res = db_query($q);
   if ($res === false) {
      $error = _('Database error in ').'mailbox.plib:'.__LINE__;
      return false;
   }
   while (($row = db_fetch_next($res)) !== false) {
      $mailbox[$row['id']] = $row;
   }
   return true;
}

/** 
 * Truncate a string
 *
 * @in input string to truncate
 * @length length at which to truncate
 * @truncchar character(s) to truncate with (optional)
 * @return truncated string
 */
function truncString($in, $length, $truncchar='') {
   $out = $in;
   if (strlen($in) > $length) {
      $out = substr($out, 0, $length-strlen($truncchar)).$truncchar;
   }
   return $out;
}

/**
 * Update the status of a mail message
 *
 * @param $id ID of the message to update
 * @param $status new status (string)
 * @param $error contains a descriptive error message, if any
 *
 * @return true on success, false on failure
 */
function mailSetStatus($id, $status, &$error='') {
   global $AIRT_VALID_MAIL_STATUSES;

   if (!is_numeric($id)) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
	   return false;
	}
   if (!in_array($status, $AIRT_VALID_MAIL_STATUSES)) {
      $error = _('Invalid mail status in').' mailbox.plib:'.__LINE__;
      return false;
   }
	$q = q('update mailbox set status=\'%status\' where id=%id', array(
	   '%status'=>db_escape_string($status),
		'%id'=>$id
	));
	if (($res = db_query($q)) === false) {
	   $error = _('Unable to mark message as read in ').'mailbox.plib'.__LINE__;
		return false;
	}
	return true;
}

/**
 * Permanently delete a message from the queue
 *
 * @param $id ID of the message to be deleted
 * @param $error descriptive error message, if any
 *
 * @return true on success, false on failure
 */
function mailDelete($id, &$error) {
   if (!is_numeric($id)) {
	   $error = _('Invalid parameter type in ').'mailbox.plib:'.__LINE__;
	   return false;
	}
	$q = q('delete from mailbox where id=%id', array(
		'%id'=>$id
	));
	if (($res = db_query($q)) === false) {
	   $error = _('Unable to delete message in ').'mailbox.plib'.__LINE__;
		return false;
	}
	return true;
}

/**
 * Associate an email message with an incident
 *
 * @param incidentid 
 * @param messageid
 * @param error message, if any
 * 
 * @return true on success, false on failure
 */
function addEmailToIncident($incidentid, $messageid, &$error='') {
   if (!is_numeric($incidentid)) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
      return false;
   }
   if (!is_numeric($messageid)) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
      return false;
   }
   if (($incident = getIncident($incidentid)) == false) {
      $error = _('Invalid incident id in').' mailbox.plib:'.__LINE__;
      return false;
   }
   if (($message = fetchMailMessage($messageid, $msg, $error)) == false) {
      return false;
   }
   $q = q('INSERT INTO incident_mail 
      (id, messageid, incidentid)
      VALUES
      (nextval(\'generic_sequence\'), %msgid, %incidentid)', array(
      '%msgid'=>$messageid,
      '%incidentid'=>$incidentid)
   );
   if (($res = db_query($q)) === false) {
      $error = _('Database error:').db_errormessage().
         ' in mailbox.plib:'.__LINE__;
      return false;
   }
   addIncidentComment(array(
      'comment'=>t(_('Message subject %s linked to incident'), array(
         '%s'=>db_escape_string($msg['subject']),
      )),
      'incidentid'=>$incidentid
   ));
   return true;
}

/**
 * Remove the association between email message and an incident
 *
 * @param incidentid 
 * @param messageid
 * @param error message, if any
 * 
 * @return true on success, false on failure
 */
function removeEmailFromIncident($incidentid, $messageid, &$error='') {
   if (!is_numeric($incidentid)) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
      return false;
   }
   if (!is_numeric($messageid)) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
      return false;
   }
   if (($message = fetchMailMessage($messageid, $msg, $error)) == false) {
      return false;
   }
   $q = q('DELETE FROM incident_mail
      WHERE incidentid=%incidentid
      AND   messageid=%msgid', array(
      '%incidentid'=>$incidentid,
      '%msgid'=>$messageid)
   );
   if (($res = db_query($q)) === false) {
      $error = _('Database error:').db_errormessage().
         ' in mailbox.plib:'.__LINE__;
      return false;
   }

   addIncidentComment(array(
      'comment'=>t(_('Message subject %s removed from incident'), array(
         '%s'=>db_escape_string($msg['subject']),
      )),
      'incidentid'=>$incidentid
   ));
   return true;
}

/**
 * Fetch emails for incident
 *
 * @param incidentid 
 * @param error message, if any
 * @param messages Array to which the found message ids will be added.
 * 
 * @return true on success, false on failure
 */
function fetchEmailsForIncident($incidentid, &$messages, &$error='') {
   if (!is_numeric($incidentid)) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
      return false;
   }
   $q = q('SELECT messageid
      FROM  incident_mail
      WHERE incidentid=%incidentid', array(
      '%incidentid'=>$incidentid)
   );
   if (($res = db_query($q)) === false) {
      $error = _('Database error:').db_errormessage().
         ' in mailbox.plib:'.__LINE__;
      return false;
   }
   while (($row = db_fetch_next($res)) !== false) {
      $messages[] = $row['messageid'];
   }
   return true;
}

/**
 * Fetch incidents for email
 *
 * @param messageid 
 * @param error message, if any
 * @param messages Array to which the found incidents ids will be added.
 * 
 * @return true on success, false on failure
 */
function fetchIncidentsForEmail($messageid, &$messages, &$error='') {
   if (!is_numeric($messageid)) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
      return false;
   }
   $q = q('SELECT incidentid
      FROM  incident_mail
      WHERE messageid=%messageid
      ORDER BY incidentid', array(
      '%messageid'=>$messageid)
   );
   if (($res = db_query($q)) === false) {
      $error = _('Database error:').db_errormessage().
         ' in mailbox.plib:'.__LINE__;
      return false;
   }
   while (($row = db_fetch_next($res)) !== false) {
      $messages[] = $row['incidentid'];
   }
   return true;
}

/**
 * Fetch the archive age
 */
function fetchArchiveAge(&$age, &$error) {
   /* archive age in seconds */
   $res = db_query('select value from settings where key=\'archiveage\'');
   if ($res === false) {
      $error = db_errormessage().' in mailbox.plib:'.__LINE__;
      return false;
   }
   $row = db_fetch_next($res);
   $age = $row['value'];
   return true;
}

/**
 * Set the archive age
 */
function setArchiveAge(&$age, &$error) {
   if (!is_numeric($age)) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
      return false;
   }
   $res = db_query(
      q('update settings set value=%age where key=\'archiveage\'', array(
      '%age'=>db_masq_null($age))));
   if ($res === false) {
      $error = db_error_message().' in mailbox.plib:'.__LINE__;
      return false;
   }
   scheduleMailArchiveUpdate();
}

/**
 * Spawn off a process that will update the mailbox archives asynchronously.
 */
function scheduleMailArchiveUpdate() {
    $cmd = BINDIR.'/airt_schedule_mailbox_update';
    if (defined('VIRTUAL_HOST') && VIRTUAL_HOST != '') {
        $cmd .= ' --virtual-host='.escapeshellcmd(VIRTUAL_HOST);
    }
    // shell_exec($cmd .' > /dev/null &');
}

/**
 * Update the mail archive by archiving all messages that are older than the
 * cutoff date.
 * 
 * @param &$error Will contain an error message on failure
 * @return true on success, false on failure
 */
function updateMailArchive(&$error) {
   if (fetchArchiveAge($maxage, $error) === false) {
      return false;
   }
   $t= time() - $maxage;
   $res = db_query(q('update mailbox set status=%s '.
      ' where date < %d', array(
      '%s'=>db_masq_null(AIRT_MAIL_STATUS_ARCHIVED),
      '%d'=>$t)));
   if ($res === false) {
      $error = db_error_message().' in mailbox.plib:'.__LINE__;
      return false;
   }
   return true;
}

/*****************************************************************
 *
 * FRONTEND FUNCTIONS BELOW
 *
 *****************************************************************/

/**
 * Return a drop-down with possible actions.
 * @param $limit array with elements to display. Valid values are
 *    'filters', 'mailops', 'incidents'. Elements will be added in
 *    the order listed.
 */
function mailActionSelection($limit=array()) {
   $out = '';
	$out .= '<select name="do">'.LF;
	$out .= '<option value="0">'._('Do nothing').'</option>'.LF;
   if (sizeof($limit) == 0) {
      $limit = array('filters', 'mailops', 'new', 'src');
   }
   foreach ($limit as $l) {
      switch ($l) {
         case 'filters':
            $filters = importqueue_get_filters();
            sort($filters);
            $out .= '<option value="0">-- '._('Filter with').
                    ' --</option>'.LF;
            foreach ($filters as $key=>$filter) {
               $out .= '<option value="filter-'.htmlentities($filter).'">'.
                  '* '.htmlentities($filter).'</option>'.LF;
            }
            break;
         case 'mailops':
	         $out .= '<option value="delete">'._('Delete').'</option>'.LF;
            $out .= '<option value="view source">'.
               _('View source').'</option>'.LF;
	         $out .= '<option value="mark-read">'._('Mark read').
                    '</option>'.LF;
	         $out .= '<option value="mark-unread">'._('Mark unread').
                    '</option>'.LF;
            break;
         case 'new':
            $out .= '<option value="msg-new">'._('New incident').
                    '</option>'.LF;
            break;
         case 'src':
            $out .= '<option value="msg-src">'._('View message source').
                    '</option>'.LF;
      } // switch
   } // foreach
   $out .= '</select>'.LF;
	
	return $out;
}

/**
 * Print the contents of the entire mailbox on screen
 */
function listMailbox(&$error='') {
   $error = '';
   $mailbox = array();
   $status = array();
	
	$showArchived = fetchFrom('REQUEST', 'showArchived');
	defaultTo($showArchived, 'off');

	$showRead = fetchFrom('REQUEST', 'showRead');
	defaultTo($showRead, 'on');

	$showUnread = fetchFrom('REQUEST', 'showUnread');
	defaultTo($showUnread, 'on');

	$msgid = fetchFrom('REQUEST', 'msgid', '%d');
	defaultTo($msgid, 0);

    if ($showArchived == 'on') {
        $status[] = AIRT_MAIL_STATUS_ARCHIVED;
    }
    if ($showRead == 'on') {
        $status[] = AIRT_MAIL_STATUS_READ;
    }
    if ($showUnread == 'on') {
        $status[] = AIRT_MAIL_STATUS_UNREAD;
    }

   /* $maxage contains the max age set in the database in seconds */
   if (fetchArchiveAge($maxage, $error) === false) {
      return false;
   }
   /* $age contains the max age requested in the URL and is set in days */
   $age = (24*60*60) * fetchFrom('REQUEST', 'age', '%d');

   /* If $age is not specified in the URL, use the database */
   defaultTo($age, $maxage);
   
   /* in other words, the age in the URL is different from the time in the
    * database...
    */
   if ($maxage != $age) { 
       /* update the database */
      if (setArchiveAge($age, $error) === false) {
         return false;
      }
      airt_msg(_('Automatically archiving messages. This may take several minutes to complete.'));
   }
   if (fetchMailbox($mailbox, $error, $status) === false) {
      return false;
   }
   pageHeader('Inbox', array(
      'menu'=>'mail',
      'submenu'=>'mailbox'));
   // genereate javascript
   $script = '<script language="JavaScript">'.LF;
   $script .= 'function checkAll() {'.LF;
   $script .= '  var check = document.forms[2].elements[0].checked;'.LF;
   $count = 1;

   /* input form containing message archive and message filters */
   $f = t('<form method="GET" action="%url">'.LF, array(
      '%url'=>BASEURL.'/mailbox.php'));
   $f .= t( _('Archive messages older than %in days.<br/>').LF, array(
      '%in'=>'<input type="text" size="3" name="age" value="'.$age/(24*60*60).'">'));
   $f .= _('Show message that are: ');
   $f .= t('<input type="checkbox" name="showUnread" %checked>'. LF, array(
      '%checked' => ($showUnread == 'on') ? 'CHECKED' : ''));
   $f .= _('Unread');
   $f .= ' ';
   $f .= t('<input type="checkbox" name="showRead" %checked>'. LF, array(
      '%checked' => ($showRead == 'on') ? 'CHECKED' : ''));
   $f .= _('Read');
   $f .= ' ';
   $f .= t('<input type="checkbox" name="showArchived" %checked>'. LF, array(
      '%checked' => ($showArchived == 'on') ? 'CHECKED' : ''));
   $f .= _('Archived');
   $f .= ' ';
   $f .= '<input type="submit" value="'._('Show').'">'.LF;
   $f .= '</form>'.LF;

   if (sizeof($mailbox) == 0) {
      $out =  _('No incoming messages.');
   } else {
   $out = t('<form method="GET" action="%url">'.LF, array(
	   '%url'=>BASEURL.'/mailbox.php'));
   $out .= '<table class="mailbox">'.LF;
   $out .= '<tr>'.LF;
   $out .= '<th class="check"><input type="checkbox" name="check" '.
         'onChange="checkAll()"></th>'.LF;
   $out .= '<th class="sender">'._('Sender').'</th>'.LF;
   $out .= '<th class="subject">'._('Subject').'</th>'.LF;
   $out .= '<th class="date">'._('Date').'</th>'.LF;
   $out .= '<th class="status">'._('Status').'</th>'.LF;
   $out .= '</tr>'.LF;
   foreach ($mailbox as $msg) {
      if ($msg['status'] == AIRT_MAIL_STATUS_READ && $showRead == 'on' ||
          $msg['status'] == AIRT_MAIL_STATUS_UNREAD && $showUnread == 'on' ||
          $msg['status'] == AIRT_MAIL_STATUS_ARCHIVED && $showArchived == 'on') {
         $out .= t('<tr class="%status">'.LF, array(
            '%status' => htmlentities($msg['status'])
         ));
         $out .= '<td nowrap class="check">'.LF;
         $out .= '<input type="checkbox" name="mail['.$msg['id'].']">'.LF;
         $out .= '</td>'.LF;

         $script .= '  document.forms[2].elements['.$count++.'].checked = check;'.LF;
         $out .= '<td nowrap class="sender">';
         $out .= t('<a href="%url">%label</a>'.LF, array(
            '%label'=>htmlentities(truncString($msg['sender'], 35, '...')),
            '%url'=>BASEURL.'/mailbox.php?action=view&msgid='.
                urlencode($msg['id'])
         ));
         $out .= '</td>'.LF;
         $out .= '<td class="subject">';
         $out .= t('<a href="%url">%label</a>'.LF, array(
            '%label'=>htmlentities(truncString($msg['subject'], 50, '...')),
            '%url'=>BASEURL.'/mailbox.php?action=view&msgid='.
                urlencode($msg['id'])
         ));
         $out .= '</td>'.LF;
         $out .= '<td class="date">';
         $out .= t('<a href="%url">%label</a>'.LF, array(
            '%label'=>truncString(date('M d Y H:i', $msg['date']), 19, '...'),
            '%url'=>BASEURL.'/mailbox.php?action=view&msgid='.
                urlencode($msg['id'])
         ));
         $out .= '</td>'.LF;
         $out .= '<td class="status">';
         $out .= t('<a href="%url">%label</a>'.LF, array(
            '%label'=>htmlentities($msg['status']),
            '%url'=>BASEURL.'/mailbox.php?action=view&msgid='.
                urlencode($msg['id'])
         ));
         $out .= '</td>'.LF;
         $out .= '</tr>'.LF;
      } // if
   } //foreach
   $out .= '</table>'.LF;
	$out .= '<p/>'._('Perform the following action on marked messages: ').LF;
	$out .= '<input type="hidden" name="action" value="processQueue">'.LF;
	$out .= mailActionSelection(array('mailops', 'new'));
	$out .= '<input type="submit" value="'._('Go').'">'.LF;
   $out .= '</form>'.LF;
   } // if mailbox == 0

   $script .= '}'.LF;
   $script .= '</script>'.LF;

   print $script.$f.$out;
   pageFooter();
}


/**
 * View a message on screen
 *
 * @param $msgid messageID to view
 * @param &$error error message, if any
 * @return true on success, false on failure
 */
function viewMessage() {
   $error='';
   $id = fetchFrom('REQUEST', 'msgid', '%d');
   defaultTo($id, -1);
   if ($id == -1) {
      airt_msg(_('Invalid parameter type in ').'mailbox.plib:'.__LINE__);
      reload();
   }
   $msg = array();
   if (fetchMailMessage($id, $msg, $error) === false) {
      airt_msg(_('Invalid message id in ').'mailbox.plib:'.__LINE__);
      reload();
   }
	if (mailSetStatus($id, AIRT_MAIL_STATUS_READ, $error) === false) {
	   airt_msg(_('Unable to mark message as read.'));
   }
   $decode = new Mail_mimeDecode($msg['raw'], "\r\n");
   $struct = $decode->decode(array(
      'include_bodies'=>true,
      'decode_bodies'=>true));

   pageHeader(_('Mail from ').$msg['sender'], array(
      'menu'=>'mail',
      'submenu'=>'mailbox'));
   print '<div id="mbox">'.LF;
   print '<div id="mbox-container">'.LF;
   print t('<form action="%url" method="get">', array(
      '%url'=>BASEURL.'/mailbox.php'
   ));
	print t('<input type="hidden" name="mail[%msgid]" value="on">', array(
	   '%msgid'=>$id
	));
	print '<input type="hidden" name="action" value="processQueue">'.LF;
   print '<input type="submit" name="do-act" value="'._('Archive').'">'.LF;
   print '<input type="submit" name="do-act" value="'._('Delete').'">'.LF;
   // print '<input type="submit" name="do-act" value="'._('* Reply').'">'.LF;
   print '<input type="submit" name="do-act" value="'._('Mark unread').'">'.LF;
   print '<input type="submit" name="do-act" value="'._('New incident').'">'.LF;
   print _('More actions:').LF;
   print mailActionSelection(array('mailops')).LF;
   print '<input type="submit" value="'._('Go').'">'.LF;

   print '</form>'.LF;
   print '<div id="mbox-content">'.LF;
   print '<div class="mail">'.LF;
   print '<div class="mail-headers">'.LF;
   print '<table class="horizontal">'.LF;
   print '<tr class="mail-header">'.LF;
   print '<td class="mail-header-name">'._('Sender').'</td>'.LF;
   print '<td class="mail-header-content">'.
      htmlentities($msg['sender']).'</td>'.LF;
   print '</tr>'.LF;
   print '<tr class="mail-header">'.LF;
   print '<td class="mail-header-name">'._('Date').'</td>'.LF;
   print '<td class="mail-header-content">'.
      date('r', $msg['date']).'</td>'.LF;
   print '</tr>'.LF;
   print '<tr class="mail-header">'.LF;
   print '<td class="mail-header-name">'._('Message-ID').'</td>'.LF;
   print '<td class="mail-header-content">'.
      htmlentities($msg['messageid']).'</td>'.LF;
   print '</tr>'.LF;
   print '<tr class="mail-header">'.LF;
   print '<td class="mail-header-name">'._('Subject').'</td>'.LF;
   print '<td class="mail-header-content">'.
      htmlentities($msg['subject']).'</td>'.LF;
   print '</tr>'.LF;
   print '</table>'.LF;
   print '</div><!-- mail-headers -->'.LF;
   print '<div class="mail-body">'.LF;
   if (isset($struct->parts)) {
      $n=1;
      foreach ($struct->parts as $index=>$part) {
         switch ($part->disposition) {
            case '':
            case 'inline':
               print '<pre>'.nl2br(htmlentities(trim($part->body))).'</pre>';
               break;
            case 'attachment':
               print '<span class="attachment">'._('Attachment').' '.$n++.
                  ': '.LF;
               print t('<a href="%url">%filename</a> (%type)<p/>', array(
                  '%url'=>BASEURL.'/mailbox.php?action=attachment&msgid='.
                     $id.'&part='.$index,
                  '%filename'=>$part->d_parameters['filename'],
                  '%type'=>$part->headers['content-type']
               ));
               print '</span><br/>';
               break;
            default:
               print _('Unknown disposition:').$part->disposition;
         }
      }
   } else {
      print nl2br(htmlentities(trim($msg['body']))).LF;
   }
   print '</div><!-- mail-body -->'.LF;
   print '</div><!-- mail -->'.LF;
   print '</div><!-- mbox-content -->'.LF;
   print '</div><!-- mbox-container -->'.LF;

   print '<div id="mbox-sidebar">'.LF;
   print '<strong>'._('Operations').'</strong><br/><br/>'.LF;

   print '<div class="sidebar-element">'.LF;
   print '<div class="sidebar-content">'.LF;
   print t('<form action="%url" method="get">'.LF, array(
      '%url'=>BASEURL.'/search.php'));
   print _('Search IP:').'<br/>'.LF;
   print '<input type="hidden" name="qtype" value="host">'.LF;
   print '<input type="hidden" name="action" value="Search">'.LF;
   print '<input type="text" name="q" width="10">'.LF;
   print '<input type="submit" value="Search">'.LF;
   print '</form>'.LF;
   print '</div><!-- sidebar-content -->'.LF;
   print '</div><!-- sidebar-element -->'.LF;


   print '<div class="sidebar-element">'.LF;
   print '<div class="sidebar-content">'.LF;
   print t('<form action="%url" method="GET">'.LF, array(
      '%url'=>BASEURL.'/mailbox.php'));
   print '<input type="hidden" name="action" value="link">'.LF;
   print t('<input type="hidden" name="msgid" value="%id">'.LF, array(
      '%id'=>htmlentities($id)));
   print _('Link to incident:').'<br/>'.LF;
   print '<select name="incidentselection">'.LF;
   print '<option value="@">---'._('Use value below').'---</option>'.LF;
   foreach (getOpenincidents() as $incidentid=>$data) {
      print t('<option value="%id">%no</option>'.LF, array(
         '%id'=>$incidentid,
         '%no'=>normalize_incidentid($incidentid)));
   }
   print '</select><br/>'.LF;
   print _('or provide incident number:').'<br/>'.LF;
   print '<input type="text" name="incidenttext" size="10"><br/>'.LF;
   print '<input type="submit" value="'._('Go').'">'.LF;
   print '</form>'.LF;
   print '</div><!-- sidebar-content -->'.LF;
   print '</div><!-- sidebar-element -->'.LF;

   print '<div class="sidebar-element">'.LF;
   print '<div class="sidebar-content">'.LF;
   print _('Linked incidents:').'<br/>'.LF;
   $incidents = array();
   if (fetchIncidentsForEmail($id, $incidents, $error) === false) {
      airt_msg($error);
   } else {
      $count = 0;
      foreach ($incidents as $incident) {
         if ($count++ > 0) {
            print '<br/>';
         }
         print t('<a href="%u?action=unlink&msgid=%m&incidentid=%i">%t</a>'.LF,
            array(
            '%u'=>BASEURL.'/mailbox.php',
            '%m'=>$id,
            '%i'=>$incident,
            '%t'=>_('undo')
         ));
         $i = getIncident($incident);
         $t = normalize_incidentid($incident);
         if (getIncidentStatusLabelByID($i['status']) == 'closed') {
            $t = '('.$t.')';
         }
         print t(' <a href="%u?action=details&incidentid=%i">%t</a>'.LF,
            array(
            '%u'=>BASEURL.'/incident.php',
            '%i'=>$incident,
            '%t'=>$t,
         ));
      }
      if ($count == 0) {
         print '<em>'._('No links').'</em><br/>'.LF;
      }
   }
   print '</div><!-- sidebar-content -->'.LF;
   print '</div><!-- sidebar-element -->'.LF;

   print '</div><!-- mbox-sidebar -->'.LF;

   print '</div><!-- mbox -->'.LF;

   print '<div class="prevnext">'.LF;
   print t('<form action="%url" method="GET">'.LF, array(
      '%url'=>BASEURL.'/mailbox.php'));
   print t('<input type="hidden" name="msgid" value="%msgid">', array(
      '%msgid'=>$id));
   print '<input type="hidden" name="action" value="nav">'.LF;
   print '<input type="submit" name="direction" value="'._('Previous').'"/>'.LF;
   print '<input type="submit" name="direction" value="'._('Next').'"/>'.LF;
   print '<div class="sidebar-content">'.LF;
   print '</form>'.LF;
   print '</div><!-- prevnext -->';
   pageFooter();
} // viewMessage();


/**
 * View message source in a new window.
 * @param $error Errormessage, if any
 */
function viewSource($msgid='', &$error) {
   if (!is_numeric($msgid) || $msgid == -1) {
      $error = _('Invalid parameter type in').' mailbox.plib:'.__LINE__;
      return false;
   }
   if (fetchMailMessage($msgid, $msg, $error) === false) {
      return false;
   }
   print '<pre>'.LF;
   print htmlentities($msg['raw']);
   print '</pre>'.LF;
}


/**
 * Handle actions to be performed on selected messages in the overview screen
 */
function processQueue() {
   $mails = fetchFrom('REQUEST', 'mail');
	defaultTo($mails, array());

	if (!is_array($mails)) {
	   airt_msg(_('Invalid parameter type in ').'mailbox.plib:'.__LINE__);
	} else {
	   $do = fetchFrom('REQUEST', 'do');
	   defaultTo($do, '');
      if (empty($do)) {
         $do = fetchFrom('REQUEST', 'do-act');
         defaultTo($do, '');
      }
	   switch (strtolower($do)) {
         case 'mark-read':
	      case _('mark read'):
			   $count=0;
			   foreach ($mails as $id=>$value) {
				   if (strtolower($value) == 'on') {
					   if (mailSetStatus($id, AIRT_MAIL_STATUS_READ, $error) === false) {
						   airt_msg($error);
						} else {
						   $count++;
						}
					}
				}
				airt_msg(t(_('%n messages updated.'), array('%n'=>$count)));
            reload();
	   	   break;
   

         case 'mark-unread':
	      case _('mark unread'):
			   $count=0;
			   foreach ($mails as $id=>$value) {
				   if (strtolower($value) == 'on') {
					   if (mailSetStatus($id, AIRT_MAIL_STATUS_UNREAD, $error) === false) {
						   airt_msg($error);
						} else {
						   $count++;
						}
					}
				}
				airt_msg(t(_('%n messages updated.'), array('%n'=>$count)));
            reload();
	   	   break;

	      case _('archive'):
			   $count=0;
			   foreach ($mails as $id=>$value) {
				   if (strtolower($value) == 'on') {
					   if (mailSetStatus($id, AIRT_MAIL_STATUS_ARCHIVED, $error) === false) {
						   airt_msg($error);
						} else {
						   $count++;
						}
					}
				}
				airt_msg(t(_('%n messages updated.'), array('%n'=>$count)));
            reload();
	   	   break;

	   	case _('delete'):
			   $count=0;
			   foreach ($mails as $id=>$value) {
				   if (strtolower($value) == 'on') {
					   if (mailDelete($id, $error) === false) {
						   airt_msg($error);
						} else {
							$count++;
						}
					}
				}
				airt_msg(t(_('%n messaged deleted.'), array('%n'=>$count)));
            reload();
	   	   break;

         case _('view source'):
            foreach ($mails as $id=>$value) {
               if (strtolower($value) == 'on') {
                  if (viewSource($id, $error) === false) {
                     airt_msg($error);
                  }
               }
            }
            break;

         case _('new incident'):
         case 'msg-new':
            foreach ($mails as $id=>$value) {
               if (strtolower($value) == 'on') {
                  if (fetchMailMessage($id, $msg, $error) == false) {
                     airt_msg(_('Unable to fetch mail in').' mailbox.plib:'.
                        __LINE__);
                     continue;
                  }
                  $incidentid = createIncident(array(
                     'state'=>getIncidentStateDefault(),
                     'status'=>getIncidentStatusDefault(),
                     'type'=>getIncidentTypeDefault(),
                     'logging'=>$msg['body']
                  ));
                  if ($incidentid === false) {
                     airt_msg(_('Unable to create incident'));
                  } else {
                     if (addEmailToIncident($incidentid, $id, $error) ==
                        false) {
                        airt_msg($error);
                     } else {
                        airt_msg(t(_('Incident %n created.'),
                           array('%n'=>$incidentid)));
                     }
                  }
               }
            }
            reload();
            break;

	   	default:
	   	   airt_msg(_('Invalid parameter value in ').
				   'mailbox.plib:'.__LINE__);
            reload();
	   }
	}
}

/**
 * Handle attachment viewing
 */
function viewAttachment() {
   $msgid = fetchFrom('REQUEST', 'msgid', '%d');
   defaultTo($msgid, -1);
   if ($msgid == -1) {
      airt_msg(_('Invalid parameter type in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   $part = fetchFrom('REQUEST', 'part', '%d');
   defaultTo($part, -1);
   if ($part == -1) {
      airt_msg(_('Invalid parameter type in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   $msg = array();
   if (fetchMailMessage($msgid, $msg, $error) === false) {
      airt_msg(_('Invalid message id in'). 'mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   $decode = new Mail_mimeDecode($msg['raw'], "\r\n");
   $struct = $decode->decode(array(
      'include_bodies'=>true,
      'decode_bodies'=>true
   ));
   if (!isset($struct->parts)) {
      airt_msg(_('Message is not MIME in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   if (array_key_exists($part, $struct->parts)) {
      $p = $struct->parts[$part];
      if (!array_key_exists('content-transfer-encoding', $p->headers)) {
         airt_msg(_('Could not determine encoding in').
            ' mailbox.plib:'.__LINE__);
         reload();
         return;
      }
      Header('Content-Type: '.$p->headers['content-type']);
      if (isset($p->d_parameters) &&
          array_key_exists('filename', $p->d_parameters)) {
         Header('Content-disposition: attachment; '.
                'filename="'.$p->d_parameters['filename'].'"');
      }
      print $p->body;
   } else {
      airt_msg(_('Invalid MIME-part in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
}

function unlinkMessage() {
   $msgid = fetchFrom('REQUEST', 'msgid', '%d');
   defaultTo($msgid, -1);
   if ($msgid == -1) {
      airt_msg(_('Invalid parameter type in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   $incidentid = fetchFrom('REQUEST', 'incidentid', '%d');
   defaultTo($incidentid, -1);
   if ($incidentid == -1) {
      airt_msg(_('Invalid parameter type in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   if (removeEmailFromIncident($incidentid, $msgid, $error) == false) {
      airt_msg($error);
   }
   reload(BASEURL.'/mailbox.php?action=view&msgid='.$msgid);
   return;
}

function linkMessage() {
   $msgid = fetchFrom('REQUEST', 'msgid', '%d');
   defaultTo($msgid, -1);
   if ($msgid == -1) {
      airt_msg(_('Invalid parameter type in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   $incidentselection = fetchFrom('REQUEST', 'incidentselection', '%d');
   defaultTo($incidentselection, '@');
   if ($incidentselection == '@') {
      $incidenttext = fetchFrom('REQUEST', 'incidenttext', '%s');
      $incidentid = decode_incidentid($incidenttext);
   } else {
      $incidentid = decode_incidentid($incidentselection);
   }
   if (addEmailToIncident($incidentid, $msgid, $error) == false) {
      airt_msg($error);
   }
   reload(BASEURL.'/mailbox.php?action=view&msgid='.$msgid);
   return;
}

function navigate() {
   $msgid = fetchFrom('REQUEST', 'msgid', '%d');
   defaultTo($msgid, -1);
   if ($msgid == -1) {
      airt_msg(_('Invalid parameter type in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   $direction = fetchFrom('REQUEST', 'direction', '%s');
   if (empty($direction)) {
      airt_msg(_('Invalid parameter type in').' mailbox.plib:'.__LINE__);
      reload();
      return;
   }
   switch ($direction) {
      case 'Previous':
         $q = q('select max(id) as id from mailbox where id < %msgid', array(
            '%msgid'=>$msgid));
         if (($res = db_query($q)) == false) {
            airt_msg(_('Database error in ').' mailbox.plib:'.__LINE__);
            reload();
            return;
         }
         $row = db_fetch_next($res);
         if (empty($row['id'])) {
            airt_msg(_('Already on first message'));
            reload(BASEURL.'/mailbox.php?action=view&msgid='.$msgid);
            return;
         }
         reload(BASEURL.'/mailbox.php?action=view&msgid='.$row['id']);
         return;
         break;
      case 'Next':
         $q = q('select min(id) as id from mailbox where id > %msgid', array(
            '%msgid'=>$msgid));
         if (($res = db_query($q)) == false) {
            airt_msg(_('Database error in ').' mailbox.plib:'.__LINE__);
            reload();
            return;
         }
         $row = db_fetch_next($res);
         if (empty($row['id'])) {
            airt_msg(_('Already on last message'));
            reload(BASEURL.'/mailbox.php?action=view&msgid='.$msgid);
            return;
         }
         reload(BASEURL.'/mailbox.php?action=view&msgid='.$row['id']);
         return;
         break;
         break;
      default:
         airt_msg(_('Invalid parameter value in').' mailbox.plib:'.__LINE__);
         $newid=$msgid;
         reload();
         return;
   }
}

?>
