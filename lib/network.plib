<?php
/* vim:syntax=php shiftwidth=3 tabstop=3
 * $Id$ 

 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005   Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/**
 * Convert a netmask (255.255.0.0) to CIDR notation (16).
 * The leading slash in the CIDR notation will not be returned.
 * @param $mask The netmask that needs to be converted
 * @return a string containing the CIDR notation of the netmask
 */
function netmask2cidr($mask) {
   if ($mask == '0.0.0.0') {
      return 0;
   }
   $pos = strpos(decbin(ip2long($mask)), '0');
   if ($pos == false) {
      return 32;
   } else {
      return $pos;
   }
}

/**
 * Convert a cidr (16) into a netmask (255.255.0.0).
 * @param $cidr CIDR bits, without leading slash
 * @return a string containing the netmask notation
 */
function cidr2netmask($cidr) {
   $bin = decbin(pow(2,$cidr)-1);
   $n = 32 - strlen($bin);
   for ($i=0; $i < $n; $i++) {
      $bin .= '0';
   }
   return long2ip(bindec($bin));
}

/** 
 * helper function to sort networks by network address/netmask.
 * @param $a First network
 * @param $b Second network
 * @return 1 of $a is larger than $b, 0 if $a is equal to $b and -1 if $a is smaller than $b
 */
function airt_netsort($a, $b) {
   $ea = explode('.', $a['network']);
   $eb = explode('.', $b['network']);

   if ($ea[0] > $eb[0]) {
      return 1;
   } elseif ($ea[0] < $eb[0]) {
      return -1;
   } else {
       if ($ea[1] > $eb[1]) {
          return 1;
       } elseif ($ea[1] < $eb[1]) {
          return -1;
       } else {
          if ($ea[2] > $eb[2]) {
             return 1;
          } elseif ($ea[2] < $eb[2]) {
             return -1;
          } else {
             if ($ea[3] > $eb[3]) {
                return 1;
             } elseif ($ea[3] < $eb[3]) {
                return -1;
             } else {
                return 0;
             }
         }
      }
   }
}

/** 
 * Return a list of networks.
 * @return Returns an associative array of network information. They key of
 *    the array is the network ID. The value is an associative array with
 *    keys: 'id', 'network', 'netmask', 'label', 'constituency'. The value
 *    of the constituency is the numerical ID of the constituency.
 */
function getNetworks() {
   $res = db_query(
      'SELECT   id, network, netmask, label, constituency
       FROM     networks
       ORDER BY network,netmask')
   or die('Unable to connect to database.');

   $networks=array();
   while ($row = db_fetch_next($res)) {
      $networks[$row['id']]=array(
         'id'          => $row['id'],
         'network'     => $row['network'],
         'netmask'     => $row['netmask'],
         'label'       => $row['label'],
         'constituency'=> $row['constituency']
      );
   }
   return $networks;
}

/**
 * Check if a given network exists
 * @param network network address
 * @param netmask
 * @return true if the network exist, false if it does not
 */
function networkExists($network, $netmask) {
   foreach (getNetworks() as $net) {
      if ($net['network'] == $network && $net['netmask'] == $netmask) {
         return true;
      }
   }
   return false;
}

function addNetwork($data, &$error='') {
   if (!array_key_exists('network', $data)) {
      $error = _('Missing parameter in').' network.plib:'.__LINE__;
      return false;
   }
   $network = $data['network'];
   if (!array_key_exists('netmask', $data)) {
      $error = _('Missing parameter in').' network.plib:'.__LINE__;
      return false;
   }
   $netmask = $data['netmask'];
   $res = array();
   if (sscanf($netmask, "/%s", $res) == 1) {
      $netmask = cidr2netmask(substr($netmask, 1));
   }
   if (!array_key_exists('label', $data)) {
      $error = _('Missing parameter in').' network.plib:'.__LINE__;
      return false;
   }
   $label = $data['label'];
   if (!array_key_exists('constituency', $data)) {
      $error = _('Missing parameter in').' network.plib:'.__LINE__;
      return false;
   }
   $constituency = $data['constituency'];
   if (!is_numeric($constituency)) {
      $error = t(_('Invalid parameter type (%n) in'), array(
         '%n'=>$constituency)).' network.plib:'.__LINE__;
      return false;
   }
   
   $res = db_query(q('INSERT INTO networks
      (id, network, netmask, label, constituency)
      VALUES
     (nextval(\'networks_sequence\'), %network, %netmask, %label, %cons)',
      array("%network"=>db_masq_null($network),
         '%netmask'=>db_masq_null($netmask),
         '%label'=>db_masq_null($label),
         '%cons'=>$constituency)));
   if ($res === false) {
      $error = db_errormessage();
      return false;
   }
   return true;
}

/**
 * Update network details
 * @param $data associative array containing new data
 * @error $error error message, if any
 * @return true on success, false on failure
 */
function updateNetwork($data, &$error) {
   if (!array_key_exists('network', $data)) {
      $error = _('Missing parameter in').' network.plib:'.__LINE__;
      return false;
   }
   $network = $data['network'];
   if (!array_key_exists('netmask', $data)) {
      $error = _('Missing parameter in').' netmask.plib:'.__LINE__;
      return false;
   }
   $netmask = $data['netmask'];
   $res = array();
   if (sscanf($netmask, "/%s", $res) == 1) {
      $netmask = cidr2netmask(substr($netmask, 1));
   }
   if (!array_key_exists('label', $data)) {
      $error = _('Missing parameter in').' netmask.plib:'.__LINE__;
      return false;
   }
   $label = $data['label'];
   if (!array_key_exists('constituency', $data)) {
      $error = _('Missing parameter in').' netmask.plib:'.__LINE__;
      return false;
   }
   $constituency = $data['constituency'];
   if (!is_numeric($constituency)) {
      $error = _('Invalid parameter type in').' netmask.plib:'.__LINE__;
      return false;
   }
   if (array_key_exists('id', $data)) {
      $id = $data['id'];
   } else {
      // no id given, try finding it through netmask/network
      foreach (getNetworks() as $nid=>$netw) {
         if ($netw['netmask'] == $netmask && $netw['network'] == $network) {
            $id = $nid;
            break;
         }
      }
   }
   if (!isset($id)) {
      $error = _('Unable to determine id in').' netmask.plib:'.__LINE__;
      return false;
   }
   if (!is_numeric($id)) {
      $error = _('Invalid parameter type in').' netmask.plib:'.__LINE__;
      return false;
   }
   $res = db_query(q('
      UPDATE networks
      SET    network=%network,
             netmask=%netmask,
             label=%label,
             constituency=%cons
      WHERE id=%id', array(
         '%network'=>db_masq_null($network),
         '%netmask'=>db_masq_null($netmask),
         '%label'=>db_masq_null($label),
         '%cons'=>$constituency,
         '%id'=>$id)));
   if ($res === false) {
      $error = db_errormessage();
      return false;
   }
   return true;
}
?>
