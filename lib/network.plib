<?php
/* vim:syntax=php shiftwidth=3 tabstop=3

 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005   Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

require_once(LIBDIR.'/v6tools/autoload.php');

/**
 * Validation of IPv6 addres
 * @param $ip
 * @return returns true or false
 */
function validateIPV6($ip) {
  if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {
     return true;
  } else {
     return false;
  }
}

/**
 * Validation of IPv4 addres
 * @param $ip
 * @return returns true or false
 */
function validateIPV4($ip) {
  if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {
    return true;
  } else {
    return false;
  }
}

/**
 * Validation of IPv4 subnet mask
 * @param $ip
 * @return returns true or false
 */
function validateIPV4mask($ip) {
  return validateIPV4($ip);
}

/**
 * Validation of IPv6 CIDR
 * @param $ip
 * @return returns true or false
 */
function validateIPV6CIDR($cidr) {
  if (ctype_digit((string)$cidr) && 32 <= $cidr && $cdir <= 128) {
    return true;
  } else {
    return false;
  }
}

/**
 * Validation of IPv4 CIDR
 * @param $ip
 * @return returns true or false
 */
function validateIPV4CIDR($cidr) {
  if ((8 <= $cidr) && ($cdir <= 32)) {
    return true;
  } else {
    return false;
  }
}

/**
 * Expand of shorthand IPv6
 * @param $ipv6
 * @return returns true or false
 */
function expandIPV6($ipv6) {
  $addr = new v6tools\IPv6Address($ipv6);
  return $addr->expand();
}

/**
 * Pretty print an given network address and mask/cidr
 *
 * @param $ip IPv4 or IPv6 address
 * @param $ip netmask for v4 or cidr length for v6
 * @return String like "1.2.3.4/24" or "2001:610:a3::45/64"
 */
function prettyNetwork($ip, $mask){
  if(validateIPV6($ip)) {
    $addr = new v6tools\IPv6Address($ip);
    return $addr->compact() . '/' . $mask;
  }
  return $ip . '/' . netmask2cidr($mask);
}

/**
 * Check if ipv6 is in cidr
 * @param $ipv6
 * @param $cidr
 * @return returns true or false
 */
function checkinipv6subnet($ipv6,$cidr) {
  if(strpos($cidr,'.')) {
    return false;
  }
  $c = new v6tools\Subnet($cidr);
  return $c->isInSubnet($ipv6);
}

/**
 * Check if ipv4 is in cidr
 * @param $ipv4
 * @param $cidr
 * @return returns true or false
 */
function checkinipv4subnet($ipv4, $cidr)
{
  if(strpos($cidr, '/') === false) {
    throw new \InvalidArgumentException("Missing network cidr length: $cidr");
  }
  list ($subnet, $bits) = explode('/', $cidr);
  $ip = ip2long($ipv4);
  $subnet = ip2long($subnet);
  $mask = -1 << (32 - $bits);
  $subnet &= $mask; # nb: in case the supplied subnet wasn't correctly aligned
  return ($ip & $mask) == $subnet;
}

/**
 * Convert a netmask (255.255.0.0) to CIDR notation (16).
 * The leading slash in the CIDR notation will not be returned.
 * @param $mask The netmask that needs to be converted
 * @return a string containing the CIDR notation of the netmask
 */
function netmask2cidr($mask) {
  if ($mask == '0.0.0.0') {
     return 0;
  }
  $pos = strpos(decbin(ip2long($mask)), '0');
  if ($pos == false) {
     return 32;
  } else {
     return $pos;
  }
}

/**
 * Convert a cidr (16) into a netmask (255.255.0.0).
 * @param $cidr CIDR bits, without leading slash
 * @return a string containing the netmask notation
 */
function cidr2netmask($cidr) {
   $bin = decbin(pow(2,$cidr)-1);
   $n = 32 - strlen($bin);
   for ($i=0; $i < $n; $i++) {
      $bin .= '0';
   }
   return long2ip(bindec($bin));
}

/**
 * helper function to sort networks by network address/netmask.
 * @param $a First network
 * @param $b Second network
 * @return 1 of $a is larger than $b, 0 if $a is equal to $b and -1 if $a is smaller than $b
 */
function airt_netsort($a, $b) {
   $ea = explode('.', $a['network']);
   $eb = explode('.', $b['network']);

   if ($ea[0] > $eb[0]) {
      return 1;
   } elseif ($ea[0] < $eb[0]) {
      return -1;
   } else {
       if ($ea[1] > $eb[1]) {
          return 1;
       } elseif ($ea[1] < $eb[1]) {
          return -1;
       } else {
          if ($ea[2] > $eb[2]) {
             return 1;
          } elseif ($ea[2] < $eb[2]) {
             return -1;
          } else {
             if ($ea[3] > $eb[3]) {
                return 1;
             } elseif ($ea[3] < $eb[3]) {
                return -1;
             } else {
                return 0;
             }
         }
      }
   }
}

/**
 * Return a list of networks.
 * @param string $type 'v4' or 'v6' to return only this set.
 * @return Returns an associative array of network information. They key of
 *    the array is the network ID. The value is an associative array with
 *    keys: 'id', 'network', 'netmask', 'label', 'constituency'. The value
 *    of the constituency is the numerical ID of the constituency.
 */
function getNetworks($type = null) {
   $res = db_query(
      'SELECT   id, network, netmask, label, constituency, datasource
       FROM     networks
       ORDER BY network,netmask')
   or die('Unable to connect to database.');

   $networks=array();
   while ($row = db_fetch_next($res)) {
      if ( $type === null ||
           ( $type === 'v4' && validateIPV4($row['network']) ) ||
           ( $type === 'v6' && validateIPV6($row['network']) ) ) {
        $networks[$row['id']] = [
           'id'          => $row['id'],
           'network'     => $row['network'],
           'netmask'     => $row['netmask'],
           'label'       => $row['label'],
           'constituency'=> $row['constituency'],
           'datasource'  => $row['datasource'],
        ];
      }
   }
   return $networks;
}

/**
 * Check if a given network exists IPv4/IPv6 in database
 * @param network network address
 * @param netmask
 * @return true if the network exist, false if it does not
 */
function networkExists($network, $netmask) {
  foreach (getNetworks() as $net) {
    if ($net['network'] == $network && $net['netmask'] == $netmask) {
      return true;
    }
  }
  return false;
}

/**
 * Check if a given networkmask is valid constructed
 * @param mask
 * @return $mask if the network exist, null if it does not
 */
function airt_searchhelper($mask) {
  if(strpos($mask,'/')) {
    $array = list($ip,$cidr) = explode('/',$mask);
    if (validateIPV4CIDR($array[1]) && validateIPV4($array[0]) ) {
      return $mask;
    } elseif(validateIPV6CIDR($array[1]) && validateIPV6($array[0]) ) {
      return $mask;
    }
    return null;
  } elseif(validateIPV4($mask) || validateIPV6($mask)) {
    return $mask;
  } else {
    return null;
  }
}

/**
 * Add network details and IPV6 IPV4 moved validation to networks.php
 * @param $data associative array containing new data
 * @error $error error message, if any
 * @return true on success, false on failure
 */
function addNetwork($data, &$error='') {
  $network = $data['network'];
  $netmask = $data['netmask'];
  $label = $data['label'];
  $constituency = $data['constituency'];

  $res = db_query(q('INSERT INTO networks
      (id, network, netmask, label, constituency)
      VALUES
     (nextval(\'networks_sequence\'), %network, %netmask, %label, %cons)',
      array("%network"=>db_masq_null($network),
         '%netmask'=>db_masq_null($netmask),
         '%label'=>db_masq_null($label),
         '%cons'=>$constituency)));

   if ($res === false) {
      $error = db_errormessage();
      return false;
   }
   return true;
}

/**
 * Update network details IPV6 IPV4 moved validation to networks.ph
 * @param $data associative array containing new data
 * @error $error error message, if any
 * @return true on success, false on failure
 */
function updateNetwork($data, &$error) {
  $network = $data['network'];
  $netmask = $data['netmask'];
  $label = $data['label'];
  $constituency = $data['constituency'];
  if (array_key_exists('id', $data)) {
    $id = $data['id'];
   } else {
    // no id given, try finding it through netmask/network
    foreach (getNetworks() as $nid=>$netw) {
      if ($netw['netmask'] == $netmask && $netw['network'] == $network) {
        $id = $nid;
        break;
      }
    }
  }
  if (!isset($id)) {
    $error = _('Unable to determine id in').' netmask.plib:'.__LINE__;
    return false;
  }
  if (!is_numeric($id)) {
    $error = _('Invalid parameter type in').' netmask.plib:'.__LINE__;
    return false;
  }
  $res = db_query(q('
      UPDATE networks
      SET    network=%network,
             netmask=%netmask,
             label=%label,
             constituency=%cons
      WHERE id=%id', array(
         '%network'=>db_masq_null($network),
         '%netmask'=>db_masq_null($netmask),
         '%label'=>db_masq_null($label),
         '%cons'=>$constituency,
         '%id'=>$id)));
  if ($res === false) {
      $error = db_errormessage();
      return false;
  }
  return true;
}
