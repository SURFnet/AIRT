<?php
/* vim:syntax=php shiftwidth=3 tabstop=3
 * $Id$ 

 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004,2005   Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/**
 * Convert a netmask (255.255.0.0) to CIDR notation (16).
 * The leading slash in the CIDR notation will not be returned.
 * @param $mask The netmask that needs to be converted
 * @return a string containing the CIDR notation of the netmask
 */
function netmask2cidr($mask) {
   if ($mask == '0.0.0.0') {
      return 0;
   }
   $pos = strpos(decbin(ip2long($mask)), '0');
   if ($pos == false) {
      return 32;
   } else {
      return $pos;
   }
}

/**
 * Convert a cidr (16) into a netmask (255.255.0.0).
 * @param $cidr CIDR bits, without leading slash
 * @return a string containing the netmask notation
 */
function cidr2netmask($cidr) {
   $bin = decbin(pow(2,$cidr)-1);
   $n = 32 - strlen($bin);
   for ($i=0; $i < $n; $i++) {
      $bin .= '0';
   }
   return long2ip(bindec($bin));
}

/** 
 * helper function to sort networks by network address/netmask.
 * @param $a First network
 * @param $b Second network
 * @return 1 of $a is larger than $b, 0 if $a is equal to $b and -1 if $a is smaller than $b
 */
function airt_netsort($a, $b) {
   $ea = explode('.', $a['network']);
   $eb = explode('.', $b['network']);

   if ($ea[0] > $eb[0]) {
      return 1;
   } elseif ($ea[0] < $eb[0]) {
      return -1;
   } else {
       if ($ea[1] > $eb[1]) {
          return 1;
       } elseif ($ea[1] < $eb[1]) {
          return -1;
       } else {
          if ($ea[2] > $eb[2]) {
             return 1;
          } elseif ($ea[2] < $eb[2]) {
             return -1;
          } else {
             if ($ea[3] > $eb[3]) {
                return 1;
             } elseif ($ea[3] < $eb[3]) {
                return -1;
             } else {
                return 0;
             }
         }
      }
   }
}

?>
