<?php
/*
 * AIR: APPLICATION FOR INCIDENT RESPONSE
 * Copyright (C) 2004	Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * history.plib - History module for RT
 *
 * $Id$
 */
$public = 1;
require_once 'database.plib';
require_once 'air.plib';

function AIR_getNextHistoryId() 
{
    $conn = db_connect(DBNAME, DBUSER, DBPASSWD)
    or die("Unable to connect to database: ".db_errormessage());

    $res = db_query($conn, "SELECT nextval('history_seq') as next")
    or die("Unable to query database: ".db_errormessage());

    $row = db_fetch_next($res);
    $id = $row["next"];

    db_close($conn);
    return $id;
} // AIR_getNextHistoryId


function AIR_addHistory($history)
{
    $id = AIR_getNextHistoryId();
    $history->setId($id);

    $conn = db_connect(DBNAME, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = @db_query($conn, $history->getInsertString())
    or die("Unable to query database/1.".db_errorMessage());

    db_close($conn);
    return $id;
} // AIR_addHistory


class AIR_History
{
    var $id,
        $creator,
        $created,
        $incidentid,
        $type,
        $oldvalue,
        $newvalue;

    function setId($id)         { $this->id = $id; }
    function setCreator($id)    { $this->creator = $id; }
    function setCreated($str)   { $this->created = $str; }
    function setIncidentId($id) { $this->incidentid = $id; }
    function setType($str)      { $this->type = $str; }
    function setOldValue($str)  { $this->oldvalue = $str; }
    function setNewValue($str)  { $this->newvalue = $str; }

    function getId($id)         { return $this->id; }
    function getCreator($id)    { return $this->creator; }
    function getCreated($str)   { return $this->created; }
    function getIncidentId($id) { return $this->incidentid; }
    function getType($str)      { return $this->type; }
    function getOldValue($str)  { return $this->oldvalue; }
    function getNewValue($str)  { return $this->newvalue; }

    function getInsertString()
    {
        return sprintf("
            INSERT INTO history 
            (id, created, createdby, type, oldvalue, newvalue)
            VALUES
            (%s, %s, %s, %s, %s, %s)",
                $this->id,
                db_masq_null($this->created),
                $this->creator,
                db_masq_null($this->type),
                db_masq_null($this->oldvalue),
                db_masq_null($this->newvalue)
            );
    }
}
    
/* EOF */
?>
