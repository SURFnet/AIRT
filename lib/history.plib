<?php
/* vim: syntax=php shiftwidth=3 tabstop=3
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004  Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * history.plib - History module for AIRT
 *
 * $Id$
 */
require_once LIBDIR.'/database.plib';

/** Add a comment to an incident.
 * @param Array containing parameters
 * @m
 */
function addIncidentComment($params = array(), &$error='') {
   if (!is_array($params)) {
      die(_('API error in addIncidentComment'));
   }
   if (!array_key_exists('comment', $params)) {
      $error = _('Missing required parameter: comment in ').__LINE__;
      return false;
   }
   if (!array_key_exists('incidentid', $params)) {
      $params['incidentid'] = $_SESSION["incidentid"];
   }
   if (!array_key_exists('userid', $params)) {
      $params['userid'] = $_SESSION["userid"];
   }
   if (!is_numeric($params['incidentid'])) {
      $error = _('Invalid parameter type in ').__LINE__;
      return false;
   }
   if (!is_numeric($params['userid'])) {
      $error = _('Invalid parameter type in ').__LINE__;
      return false;
   }

   $res = db_query(sprintf("
      INSERT INTO incident_comments
      (id, incident, comment, added, addedby)
      VALUES
      (nextval('incident_comments_sequence'), %s, %s, CURRENT_TIMESTAMP, %s)",
         $params['incidentid'],
         db_masq_null($params['comment']),
         $params['userid']))
   or die(_("Unable to execute query."));
}

/* retrieve the history of an incidentid as an array of associative arrays.
 * Each entry in the main array contains a comment; each element in the
 * associative array contains the following keys: comment, added, login
 */
function getIncidentHistory($incidentid) {
   if (!is_numeric($incidentid)) {
      return '';
   }
   $res = db_query(sprintf("
      SELECT comment, extract(epoch from added) as added, login
      FROM   incident_comments i, users u
      WHERE  incident = %s
      AND    i.addedby = u.id
      ORDER BY added", $incidentid))
  or die (_("Unable to query database."));

   $output = array();
   while ($row = db_fetch_next($res)) {
      array_push($output, $row);
   }
   return $output;
}

/* return an HTML formatted history of an incident */
function formatIncidentHistory($incidentid="") {
   if ($incidentid=="") {
      $incidentid=$_SESSION["incidentid"];
   }
   if (!is_numeric($incidentid)) {
      return _('Invalid parameter type in ').__LINE__;
   }
   $history = getIncidentHistory($incidentid);
   $output = '';
   foreach ($history as $i=>$data) {
      $output .= '<div class="item">'.LF;
      $output .= t('<div class="date">On %d by %u</div>'.LF, array(
         '%d'=>Date("d-M-Y H:i:s", $data["added"]),
         '%u'=>htmlentities($data['login'])));
      $output .= htmlentities($data['comment']).LF;
      $output .= "</div>".LF;
  }

  return $output;
}

?>
