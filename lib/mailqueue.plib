<?php
/* vim: syntax=php shiftwidth=3 tabstop=3
 * AIRT: Application for Incident Response Teams
 * Copyright (C) 2006 Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * incident.plib - Incident management application logic
 *
 * $Id: incident.plib 1297 2008-10-19 02:17:38Z kees $
 */

require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/importqueue.plib';
define('AIRT_MAIL_UNREAD', 'unread');
define('AIRT_MAIL_READ', 'read');

/* corresponding database schema
 *
 *  create table mailbox (
 *      id    integer,      -- pull from generic_sequence
 *      messageid varchar,  -- Message-Id header
 *      sender    varchar,  -- From header (not envelope from)
 *      recipient varchar,  -- To header
 *      date      numeric,
 *      subject   varchar,  -- Subject header
 *      body      varchar,  -- Everything not header (no mime parsing yet)
 *      status    varchar,
 *      primary key (id)
 *  );
 */

/**
 * Fetch a single message
 */
function fetchMailMessage($msgid, &$msg, &$error='') {
   if (!is_numeric($msgid)) {
      $error = _('Invalid parameter type in ').'mailqueue.plib'.__LINE__;
      return false;
   }
   $msg = array();
   $error = '';
   $q = q('select id, messageid, sender, recipient, date, subject, body, '.
      'status from mailbox where id=%msgid', array(
      '%msgid'=>$msgid));
   $res = db_query($q);
   if ($res === false) {
      $error = _('Database error in ').'mailqueue.plib:'.__LINE__;
      return false;
   }
   if (($row = db_fetch_next($res)) === false) {
      $error = _('Unable to fetch results in ').'mailqueue.plib:'.__LINE__;
      return false;
   }
   $msg = $row;
   
   return true;
}

/**
 * Fetch the contents of the mailbox
 *
 * @param &$mailbox associative array that will contain the mailbox
 * @param &$error error message, if any
 * @return true on success, false on failure
 */
function fetchMailbox(&$mailbox, &$error) {
   $mailbox = array();
   $error = '';
   $q = q('select id, messageid, sender, recipient, date, subject, body, '.
      'status from mailbox order by date asc');
   $res = db_query($q);
   if ($res === false) {
      $error = _('Database error in ').'mailqueue.plib:'.__LINE__;
      return false;
   }
   while (($row = db_fetch_next($res)) !== false) {
      $mailbox[$row['id']] = $row;
   }
   return true;
}

/** 
 * Truncate a string
 *
 * @in input string to truncate
 * @length length at which to truncate
 * @truncchar character(s) to truncate with (optional)
 * @return truncated string
 */
function truncString($in, $length, $truncchar='') {
   $out = $in;
   if (strlen($in) > $length) {
      $out = substr($out, 0, $length-strlen($truncchar)).$truncchar;
   }
   return $out;
}

/**
 * Update the status of a mail message
 *
 * @param $id ID of the message to update
 * @param $status new status (string)
 * @param $error contains a descriptive error message, if any
 *
 * @return true on success, false on failure
 */
function mailSetStatus($id, $status, &$error='') {
   if (!is_numeric($id)) {
	   return false;
	}
	$q = q('update mailbox set status=\'%status\' where id=%id', array(
	   '%status'=>db_escape_string($status),
		'%id'=>$id
	));
	if (($res = db_query($q)) === false) {
	   $error = _('Unable to mark message as read in ').'mailqueue.plib'.__LINE__;
		return false;
	}
	return true;
}

/**
 * Permanently delete a message from the queue
 *
 * @param $id ID of the message to be deleted
 * @param $error descriptive error message, if any
 *
 * @return true on success, false on failure
 */
function mailDelete($id, &$error) {
   if (!is_numeric($id)) {
	   $error = _('Invalid parameter type in ').'mailqueue.plib:'.__LINE__;
	   return false;
	}
	$q = q('delete from mailbox where id=%id', array(
		'%id'=>$id
	));
	if (($res = db_query($q)) === false) {
	   $error = _('Unable to delete message in ').'mailqueue.plib'.__LINE__;
		return false;
	}
	return true;
}

function mailActionSelection() {
   $out = '';
	$out .= '<select name="do">'.LF;
	$out .= '<option value="0">'._('Do nothing').'</option>'.LF;
   $filters = importqueue_get_filters();
   sort($filters);
	$out .= '<option value="0">-- '._('Filter with').' --</option>'.LF;
   foreach ($filters as $key=>$filter) {
      $out .= '<option value="filter-'.htmlentities($filter).'">'.
		   htmlentities($filter).'</option>'.LF;
   }
	$out .= '<option value="0">-- '._('Other actions').' --</option>'.LF;
	$out .= '<option value="mark-read">'._('Mark read').'</option>'.LF;
	$out .= '<option value="mark-unread">'._('Mark unread').'</option>'.LF;
	$out .= '<option value="delete">'._('Delete').'</option>'.LF;
	$out .= '</select>'.LF;
	
	return $out;
}

/**
 * Print the contents of the entire mailbox on screen
 */
function listMailbox(&$error='') {
   $error = '';
   $mailbox = array();
	
	$status = fetchFrom('REQUEST', 'status');
	defaultTo($status, '');
	$filter = fetchFrom('REQUEST', 'filter');
	defaultTo($filter, 0);
	$msgid = fetchFrom('REQUEST', 'msgid', '%d');
	defaultTo($msgid, 0);

	if (!empty($status) && $msgid != 0) {
	   if (mailSetStatus($msgid, $status, $error) === false) {
		   airt_msg(_('Unable to update mail status in ').'mailqueue.plib'.__LINE__);
	   }
	}
	   
   if (fetchMailbox($mailbox, $error) === false) {
      return false;
   }
   pageHeader('Inbox');
	if (sizeof($mailbox) == 0) {
	   print _('No incoming messages.');
		pageFooter();
		return true; 
	}
   print t('<form method="GET" action="%url">'.LF, array(
	   '%url'=>BASEURL.'/mailqueue.php'));
   print '<table class="mailbox">'.LF;
   print '<tr>'.LF;
   print '<th class="check">&nbsp;</th>'.LF;
   print '<th class="sender">'._('Sender').'</th>'.LF;
   print '<th class="subject">'._('Subject').'</th>'.LF;
   print '<th class="date">'._('Date').'</th>'.LF;
   print '</tr>'.LF;
   foreach ($mailbox as $msg) {
      print t('<tr class="%status">'.LF, array(
		   '%status' => htmlentities($msg['status'])
		));
      print '<td nowrap class="check">'.LF;
      print '<input type="checkbox" name="mail['.$msg['id'].']">'.LF;
      print '</td>'.LF;
      print '<td nowrap class="sender">';
      print t('<a href="%url">%label</a>'.LF, array(
         '%label'=>htmlentities(truncString($msg['sender'], 35, '...')),
         '%url'=>BASEURL.'/mailqueue.php?action=view&msgid='.
             urlencode($msg['id'])
      ));
      print '</td>'.LF;
      print '<td class="subject">';
      print t('<a href="%url">%label</a>'.LF, array(
         '%label'=>htmlentities(truncString($msg['subject'], 50, '...')),
         '%url'=>BASEURL.'/mailqueue.php?action=view&msgid='.
             urlencode($msg['id'])
      ));
      print '</td>'.LF;
      print '<td class="date">';
      print t('<a href="%url">%label</a>'.LF, array(
         '%label'=>truncString(date('M d Y H:i', $msg['date']), 19, '...'),
         '%url'=>BASEURL.'/mailqueue.php?action=view&msgid='.
             urlencode($msg['id'])
      ));
      print '</td>'.LF;
      print '</tr>'.LF;
   }
   print '</table>'.LF;
	print '<p/>'._('Perform the following action on marked messages: ').LF;
	print '<input type="hidden" name="action" value="processQueue">'.LF;
	print mailActionSelection();
	print '<input type="submit" value="'._('Go').'">'.LF;
   print '</form>'.LF;
   pageFooter();
}


/**
 * View a message on screen
 *
 * @param $msgid messageID to view
 * @param &$error error message, if any
 * @return true on success, false on failure
 */
function viewMessage() {
   $error='';
   $id = fetchFrom('REQUEST', 'msgid', '%d');
   defaultTo($id, -1);
   if ($id == -1) {
      airt_msg(_('Invalid parameter type in ').'mailqueue.plib:'.__LINE__);
      reload();
   }
   $msg = array();
   if (fetchMailMessage($id, $msg, $error) === false) {
      airt_msg(_('Invalid message id in ').'mailqueue.plib:'.__LINE__);
      reload();
   }
	if (mailSetStatus($id, AIRT_MAIL_READ, $error) === false) {
	   airt_msg(_('Unable to mark message as read.'));
   }
   pageHeader(_('Mail from ').htmlentities($msg['sender']));
   print '<div class="mail">'.LF;
   print '<div class="mail-headers">'.LF;
   print '<table>'.LF;
   print '<tr class="mail-header">'.LF;
   print '<td class="mail-header-name">'._('Sender').'</td>'.LF;
   print '<td class="mail-header-content">'.
      htmlentities($msg['sender']).'</td>'.LF;
   print '</tr>'.LF;
   print '<tr class="mail-header">'.LF;
   print '<td class="mail-header-name">'._('Date').'</td>'.LF;
   print '<td class="mail-header-content">'.
      date('r', $msg['date']).'</td>'.LF;
   print '</tr>'.LF;
   print '<tr class="mail-header">'.LF;
   print '<td class="mail-header-name">'._('Message-ID').'</td>'.LF;
   print '<td class="mail-header-content">'.
      htmlentities($msg['messageid']).'</td>'.LF;
   print '</tr>'.LF;
   print '<tr class="mail-header">'.LF;
   print '<td class="mail-header-name">'._('Subject').'</td>'.LF;
   print '<td class="mail-header-content">'.
      htmlentities($msg['subject']).'</td>'.LF;
   print '</tr>'.LF;
   print '</table>'.LF;
   print '</div><!-- mail-headers -->'.LF;
   print '<div class="mail-body">'.LF;
   print nl2br(htmlentities(trim($msg['body']))).LF;
   print '</div><!-- mail-body -->'.LF;
   print '</div><!-- mail -->'.LF;
   
   print '<table>'.LF;
   print '<tr valign="top">'.LF;
   print '<td>'.LF;
   print t('<form action="%url" method="get">', array(
      '%url'=>BASEURL.'/mailqueue.php'
   ));
	print t('<input type="hidden" name="mail[%msgid]" value="on">', array(
	   '%msgid'=>$id
	));
   print '<table>'.LF;
   print '<tr>'.LF;
   print '<td>'._('Perform action').'</td>'.LF;
   print '<td>'.mailActionSelection().'</td>'.LF;
   print '</tr>'.LF;
   print '</table>'.LF;

   print '<input type="hidden" name="action" value="processQueue">'.LF;
   print '<input type="submit" value="'._('Inbox').'">'.LF;
   print '</form>'.LF;
   print '</td>'.LF;

   print '<td>'.LF;
   print t('<form action="%url" method="post">'.LF, array(
      '%url'=>BASEURL.'/mailqueue.php?action=incident'
   ));
   print '<input type="checkbox" name="use_sender">'.
      _('Use sender as contact').'<br/>'.LF;
   print '<input type="checkbox" name="use_date">'.
      _('Use date as incident date').'<br/>'.LF;
   print '<input type="checkbox" name="use_logging">'.
      _('Use body as logging').'<br/>'.LF;
   print '<input type="submit" value="'._('New incident').'">'.LF;
   print '</form>'.LF;
   print '</td>'.LF;
}

/**
 * Handle actions to be performed on selected messages in the overview screen
 */
function processQueue() {
   $mails = fetchFrom('REQUEST', 'mail');
	defaultTo($mails, array());
	if (!is_array($mails)) {
	   airt_msg(_('Invalid parameter type in ').'mailqueue.plib:'.__LINE__);
	} else {
	   $do = fetchFrom('REQUEST', 'do');
	   defaultTo($do, '');
	   switch ($do) {
	      case 'mark-read':
			   $count=0;
			   foreach ($mails as $id=>$value) {
				   if (strtolower($value) == 'on') {
					   if (mailSetStatus($id, AIRT_MAIL_READ, $error) === false) {
						   airt_msg($error);
						} else {
						   $count++;
						}
					}
				}
				airt_msg(t(_('%n messages updated.'), array('%n'=>$count)));
	   	   break;

	      case 'mark-unread':
			   $count=0;
			   foreach ($mails as $id=>$value) {
				   if (strtolower($value) == 'on') {
					   if (mailSetStatus($id, AIRT_MAIL_UNREAD, $error) === false) {
						   airt_msg($error);
						} else {
						   $count++;
						}
					}
				}
				airt_msg(t(_('%n messages updated.'), array('%n'=>$count)));
	   	   break;

	   	case 'delete':
			   $count=0;
			   foreach ($mails as $id=>$value) {
				   if (strtolower($value) == 'on') {
					   if (mailDelete($id, $error) === false) {
						   airt_msg($error);
						} else {
							$count++;
						}
					}
				}
				airt_msg(t(_('%n messaged deleted.'), array('%n'=>$count)));
	   	   break;

	   	default:
	   	   airt_msg(_('Invalid parameter value in ').
				   'mailqueue.plib:'.__LINE__);
	   }
	}
	reload();
}
?>
