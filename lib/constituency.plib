<?php
/* vim:syntax=php shiftwidth=3 tabstop=3
 * AIRT: Application for Incident Response Teams
 * Copyright (C) 2004  Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * constituency.plib - Constituency management application logic
 *
 * $Id$
 */
require_once LIBDIR.'/database.plib';

/** Return a list of constituencies.
 * @return an associative array containing constituency information. The
 *    key of the array is the constituency's ID. the value of the array is
 *    an associative array with keys 'label' and 'name'
 */
function getConstituencies() {
   $res = db_query(
      'SELECT   id, label, name
       FROM     constituencies
       ORDER BY label')
   or die(_('Unable to connect to database.'));

   $constituencies=array();
   while ($row = db_fetch_next($res)) {
      $constituencies[$row['id']]=array(
         'label' => $row['label'],
         'name'  => $row['name']
      );
  }
  return $constituencies;
}


/**
 * Check if a constituency with the given name or label exists
 *
 * @param $check
 * 
 */
function constituencyExists($check) {
   $check = strtolower($check);

   foreach (getConstituencies() as $id=>$value) {
      if (strtolower($value['label']) == $check ||
          strtolower($value['name']) == $check) {
         return true;
      }
   }

   return false;
}



/** GUI component that returns an HTML <SELECT> box containing constituencies.
 * @param $name Name of the <SELECT> element. Defaults to 'constituency'
 * @param $default Value of the default constituency.
 */
function getConstituencySelection($name="constituency", $default=-1) {
   $output = sprintf('<select name="%s">'.LF, htmlentities($name));
   $constituencies = getConstituencies();
   foreach ($constituencies as $id=>$data) {
      $output .= sprintf('<option value=%s %s>%s (%s)</option>'.LF,
         htmlentities($id),
         ($id == $default)?'SELECTED':'',
         htmlentities($data['label']),
         htmlentities($data['name']));
   }
   $output .= '</select>'.LF;
   return $output;
}

/** GUI Component that returns an HTML <SELECT> box of networks.
 * @param $name Name of the <SELECT> element
 * @param $default Default value
 */
function showNetworksSelection($name='network', $default=-1) {
   printf('<select name="%s">'.LF, htmlentities($name));
   $networks = getNetworks();
   foreach ($networks as $id => $data) {
      printf("<!-- %s, %s, %s, %s -->\n", $id, $data[0], $data[1], $data[2]);
      $network = $data['network'];
      $netmask = $data['netmask'];
      $label   = $data['label  '];

      printf('<option value=%s %s>%s/%s</option>'.LF,
         htmlentities($id),
         ($id == $default)?'SELECTED':'',
         htmlentities($network),
         htmlentities($netmask),
         htmlentities($label)
      );
   }
   printf('</select>'.LF);
}

/** Return an array of constituency contacts for a given constituency.
 * @param $constituencyid Numerical ID of the constituency
 * @returns an associative array with the key holding the user's numerical ID
 *    and the value being an associative array with keys: 'id', 'userid', 
 *    'lastname', 'firstname', 'email', 'phone', 'name'. The values of
 *    'name' and 'id' reflect the constituency.
 */
function getConstituencyContacts($constituencyid) {
   if (!is_numeric($constituencyid)) {
      return;
   }
   $res = db_query(
      "SELECT  c.id, u.id as userid, u.lastname, u.firstname, u.email, 
               u.phone, c.name
       FROM    constituencies c, constituency_contacts c2, users u
       WHERE   c2.constituency = c.id
       AND     c2.userid = u.id
       AND     c.id = $constituencyid
       ");
   if (!$res) {
      airt_error('DB_QUERY', 'constituency.plib:'.__LINE__);
      return;
   }
   if (db_num_rows($res) == 0) {
      return array();
   }
   $out = array();
   while ($row = db_fetch_next($res)) {
      $out[$row['userid']] = $row;
   }
   return $out;
} // getConstituencyContacts()


/** GUI Component that displays an overview of constituency contacts for
 * a given constituency.
 * @param $constituencyid Numerical ID of the constituency
 */
function showConstituencyContacts($constituencyid) {
   $contacts = getConstituencyContacts($constituencyid);
   if (sizeof($contacts) == 0) {
      print _('No contacts.');
   } else {
      $out = '<table cellpadding="3">'.LF;
      $out .= '<tr>'.LF;
      $out .= '   <td>'._('Name').'</td>'.LF;
      $out .= '   <td>'._('Email').'</td>'.LF;
      $out .= '   <td>'._('Phone').'</td>'.LF;
      $out .= '</tr>'.LF;
      $count=0;
      $_SESSION['current_email'] = '';
     foreach ($contacts as $id=>$data) {
         $out .= '<tr>'.LF;
         $out .= '  <td>'.$data['lastname'].', '.$data['firstname'].'</td>'.LF;
         $out .= '  <td><a href="mailto:'.$data['email'].'">'.$data['email'].'</a></td>'.LF;
         $out .= '  <td>'.$data['phone'].'</td>'.LF;
         $out .= '</tr>'.LF;

         $_SESSION['current_name'] = $data['firstname'] . ' ' . 
            $data['lastname'];
         if ($_SESSION['current_email'] == '') {
            $_SESSION['current_email'] = $data['email'];
         } else {
            $_SESSION['current_email'] .= ','.$data['email'];
         }
      }
      $out .= '</table>';
      print $out;
   }
}

/* Convert a networkID to a constituencyID. Returns FALSE when no match. */
function getConstituencyIDbyNetworkID($networkID) {
   if (!is_numeric($networkID)) {
      return false;
   }
   // Simple lookup function.
   $q = sprintf('SELECT constituency
                 FROM   networks
                 WHERE  id=%d',
                $networkID);
   $res = db_query($q);
   if ($res===FALSE) {
      return FALSE;
   } else {
      $row = db_fetch_next($res);
      $constituencyID = $row['constituency'];
      return $constituencyID;
   }
}// getConstituencyIDbyNetworkID

/**
 * Add a new constituency
 * @param $label Label of the constituency
 * @param $name  Name of the constituency
 * @param $error error message, if any
 * @return true on success, false on failure
 */
function addConstituency($label, $name, &$error) {
   $res = db_query(sprintf("
      INSERT INTO constituencies
      (id, label, name)
      VALUES
      (nextval('constituencies_sequence'), %s, %s)",
      db_masq_null($label),
      db_masq_null($description)));
   if ($res === null) {
      $error = db_errormessage();
      return false;
   }
   return true;
}

/**
 * Update a constituency
 * @param $id ID of the constituency
 * @param $label Label of the constituency
 * @param $name  Name of the constituency
 * @param $error error message, if any
 * @return true on success, false on failure
 */
function updateConstituency($id, $label, $name, &$error) {
   if (!is_numeric($id)) {
      $error = _('Invalid parameter type $id in').' constituency.plib:'.
         __LINE__;
      return false;
   }
   $res = db_query(sprintf("
      UPDATE constituencies
      SET  label=%s,
           name=%s
      WHERE id=%d",
      db_masq_null($label),
      db_masq_null($name),
      $id));
   if ($res === false) {
      $error = db_errormessage();
      return false;
   }
   return true;
}
?>
