<?php
/*
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004	Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * constituency.plib - Constituency application logic
 *
 * $Id$
 */
require_once 'airt.plib';
require_once 'database.plib';

/* Get an array describing all consituencies. The function will array 
 * containing one array for each consituency. Each constiuency array
 * has the following fields:
 * - $id
 * - $name
 * - $contact_email
 * - $contact_name
 * - $contact_phone
 */
function AIR_getConstituencies()
{
    $conn = db_connect(DBNAME, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn, "
        SELECT   * 
        FROM     constituencies 
        ORDER BY name")
    or die("Unable to query database.");

    $output = array(db_num_rows($res));
    $count = 0;
    while ($row = db_fetch_next($res))
        $output[$count++] = $row;
    db_close($conn);

    return $output;
} // AIR_getConstituencies


/* Retrieve a constituency 
 * Returns a consituency object. If the consituency does not exist, the
 * returned object will have an id of -1
 */
function AIR_getConstituencyById($id)
{
    if ($id == "")
    {
        $output = new AIR_Constituency();
        $output->setId(-1);
        return $output;
    }
    $conn = db_connect(DBNAME, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT *
         FROM   constituencies
         WHERE  id=$id")
    or die("Unable to query database.");

    $output = new AIR_Constituency();

    if (db_num_rows($res) > 0)
    {
        $row = db_fetch_next($res);
        $output->setName($row["name"]);
        $output->setDescription($row["description"]);
        $output->setContactEmail($row["contact_email"]);
        $output->setContactName($row["contact_name"]);
        $output->setContactPhone($row["contact_phone"]);
        $output->setId($row["id"]);
        $output->setCreated($row["created"]);
        $output->setCreatedBy($row["createdby"]);
    } 
    else
    {
        $output->setId(-1);
    }

    db_free_result($res);
    db_close($conn);

    return $output;
} // AIR_getConstituencyById


function AIR_getConstituencyByName($str)
{
    $conn = db_connect(DBNAME, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn,
        "SELECT *
         FROM   constituencies
         WHERE  name='$str'")
    or die("Unable to query database.");

    $output = new AIR_Constituency();

    if (db_num_rows($res) > 0)
    {
        $row = db_fetch_next($res);
        $output->setName($row["name"]);
        $output->setDescription($row["description"]);
        $output->setContactEmail($row["contact_email"]);
        $output->setContactName($row["contact_name"]);
        $output->setContactPhone($row["contact_phone"]);
        $output->setId($row["id"]);
        $output->setCreated($row["created"]);
        $output->setCreatedBy($row["createdby"]);
    } 
    else
    {
        $output->setId(-1);
    }

    db_close($conn);
    return $output;
} // AIR_getConstituencyByName


/* Update a constituency
 */
function AIR_updateConstituency($constituency)
{
    $conn = db_connect(DBNAME, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn, $constituency->getUpdateString())
    or die("Unable to query database.");

    db_close($conn);
} // AIR_updateConstituency


/* Insert a constituency 
 */
function AIR_addConstituency($constituency)
{
    $conn = db_connect(DBNAME, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn, $constituency->getInsertString())
    or die("Unable to query database.");

    db_close($conn);
} // AIR_addConstituency


class AIR_Constituency
{
    var $id,
        $name,
        $description,
        $contact_email,
        $contact_name,
        $contact_phone,
        $created,
        $createdby;

    function setId($id)            { $this->id = $id; }
    function setName($str)         { $this->name = $str; }
    function setDescription($str)  { $this->description = $str; }
    function setContactEmail($str) { $this->contact_email = $str; }
    function setContactPhone($str) { $this->contact_phone = $str; }
    function setContactName($str)  { $this->contact_name = $str; }
    function setCreated($str)      { $this->created = $str; }
    function setCreatedBy($id)     { $this->createdby = $id; }

    function getId()           { return $this->id; }
    function getName()         { return $this->name; }
    function getDescription()  { return $this->description; }
    function getContactEmail() { return $this->contact_email; }
    function getContactName()  { return $this->contact_name; }
    function getContactPhone() { return $this->contact_phone; }
    function getCreated()      { return $this->created; }
    function getCreatedBy()    { return $this->createdby; }

    function getInsertString() 
    {
        return sprintf("
            INSERT INTO constituencies
            (id, name, description, contact_email, contact_name,
             contact_phone, created, createdby)
            VALUES
            (nextval('constituencies_seq') , %s, %s, %s, %s, 
             %s, %s, %s)",
            db_masq_null($this->name),
            db_masq_null($this->description),
            db_masq_null($this->contact_email),
            db_masq_null($this->contact_name),
            db_masq_null($this->contact_phone),
            db_masq_null($this->created),
            $this->createdby);
    } // getInsertString()

    function getUpdateString()
    {
        return sprintf("
             UPDATE constituencies
                SET    name = %s,
                       description = %s,
                       contact_email = %s,
                       contact_name  = %s,
                       contact_phone = %s
                WHERE  id = %s",
            db_masq_null($this->name),
            db_masq_null($this->description),
            db_masq_null($this->contact_email),
            db_masq_null($this->contact_name),
            db_masq_null($this->contact_phone),
            $this->id);
    } // getUpdateString()


} // Constituency
