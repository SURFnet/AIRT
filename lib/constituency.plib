<?php
/* vim:syntax=php shiftwidth=3 tabstop=3
 * AIRT: Application for Incident Response Teams
 * Copyright (C) 2004  Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * constituency.plib - Constituency management application logic
 *
 * $Id$
 */
require_once LIBDIR.'/database.plib';
require_once LIBDIR.'/network.plib';

/** Return a list of constituencies.
 * @return an associative array containing constituency information. The
 *    key of the array is the constituency's ID. the value of the array is
 *    an associative array with keys 'label', 'name' and 'notes'
 */
function getConstituencies() {
   $res = db_query(
      'SELECT   id, label, name, notes
       FROM     constituencies
       ORDER BY label')
   or die(_('Unable to connect to database.'));

   $constituencies=array();
   while ($row = db_fetch_next($res)) {
      $constituencies[$row['id']]=array(
         'label' => $row['label'],
         'name'  => $row['name'],
         'notes' => $row['notes']
      );
  }
  return $constituencies;
}


/**
 * Check if a constituency with the given name or label exists
 *
 * @param $check
 * 
 */
function constituencyExists($check) {
   $check = strtolower($check);

   foreach (getConstituencies() as $id=>$value) {
      if (strtolower($value['label']) == $check ||
          strtolower($value['name']) == $check) {
         return true;
      }
   }

   return false;
}



/** GUI component that returns an HTML <SELECT> box containing constituencies.
 * @param $name Name of the <SELECT> element. Defaults to 'constituency'
 * @param $default Value of the default constituency.
 */
function getConstituencySelection($name="constituency", $default=-1) {
   $output = sprintf('<select name="%s">'.LF, htmlentities($name));
   $constituencies = getConstituencies();
   foreach ($constituencies as $id=>$data) {
      $output .= sprintf('<option value=%s %s>%s (%s)</option>'.LF,
         htmlentities($id),
         ($id == $default)?'SELECTED':'',
         htmlentities($data['label']),
         htmlentities($data['name']));
   }
   $output .= '</select>'.LF;
   return $output;
}

/** GUI Component that returns an HTML <SELECT> box of networks.
 * @param $name Name of the <SELECT> element
 * @param $default Default value
 */
function showNetworksSelection($name='network', $default=-1) {
   printf('<select name="%s">'.LF, htmlentities($name));
   $networks = getNetworks();
   foreach ($networks as $id => $data) {
      printf("<!-- %s, %s, %s, %s -->\n", $id, $data[0], $data[1], $data[2]);
      $network = $data['network'];
      $netmask = $data['netmask'];
      $label   = $data['label  '];

      printf('<option value=%s %s>%s/%s</option>'.LF,
         htmlentities($id),
         ($id == $default)?'SELECTED':'',
         htmlentities($network),
         htmlentities($netmask),
         htmlentities($label)
      );
   }
   printf('</select>'.LF);
}

/** Return an array of constituency contacts for a given constituency.
 * @param $constituencyid Numerical ID of the constituency
 * @returns an associative array with the key holding the user's numerical ID
 *    and the value being an associative array with keys: 'id', 'userid', 
 *    'lastname', 'firstname', 'email', 'phone', 'name'. The values of
 *    'name' and 'id' reflect the constituency.
 */
function getConstituencyContacts($constituencyid) {
   if (!is_numeric($constituencyid)) {
      return;
   }
   $res = db_query(
      "SELECT  c.id, u.id as userid, u.lastname, u.firstname, u.email, 
               u.phone, c.name
       FROM    constituencies c, constituency_contacts c2, users u
       WHERE   c2.constituency = c.id
       AND     c2.userid = u.id
       AND     c.id = $constituencyid
       ");
   if (!$res) {
      airt_error('DB_QUERY', 'constituency.plib:'.__LINE__);
      return;
   }
   if (db_num_rows($res) == 0) {
      return array();
   }
   $out = array();
   while ($row = db_fetch_next($res)) {
      $out[$row['userid']] = $row;
   }
   return $out;
} // getConstituencyContacts()

/**
 * Add a constituency contact
 */
function addConstituencyContact($constituencyid, $data, &$error='') {
   if (!is_numeric($constituencyid)) {
       $error = _('Invalid parameter type in').' constituency.plib:'.__LINE__;
       return false;
   }
   if (!is_array($data)) {
       $error = _('Invalid parameter type in').' constituency.plib:'.__LINE__;
       return false;
   }
   foreach ($data as $key=>$value) {
      switch ($key) {
         case 'email':
            if (($u = getUserbyEmail(strtolower($value))) === false) {
               $error = _('No such email address in').' constituency.plib:'.
                  __LINE__;
               return false;
            }
            $userid = $u['id'];
            break;
         case 'userid':
            if (is_numeric($value)) {
                $userid = $value;
            } else {
               $error = _('Invalid parameter type in').
                  ' constituency.plib:'.__LINE__;
               return false;
            }
      }
   }
   $query = q("insert into constituency_contacts
      (id, constituency, userid)
      values
      (nextval('constituency_contacts_sequence'), %c, %u)", array(
          '%c'=>$constituencyid,
          '%u'=>$userid));
   if (($res = db_query($query)) === false) {
       $error = db_error_message();
       return false;
   }
   return true;
}

/**
 * Remove a constituency contact
 */
function removeConstituencyContact($constituencyid, $userid, $error='') {
   if (!is_numeric($constituencyid)) {
       $error = _('Invalid parameter type in').' constituency.plib:'.__LINE__;
       return false;
   }
   if (!is_numeric($userid)) {
       $error = _('Invalid parameter type in').' constituency.plib:'.__LINE__;
       return false;
   }
   $query = q("delete from constituency_contacts
      where constituency=%c
      and   userid=%u", array(
          '%c'=>$constituencyid,
          '%u'=>$userid));
   if (($res = db_query($query)) === false) {
       $error = db_error_message();
       return false;
   }
   return true;
}

/** GUI Component that displays an overview of constituency contacts for
 * a given constituency.
 * @param $constituencyid Numerical ID of the constituency
 */
function showConstituencyContacts($constituencyid) {
   $contacts = getConstituencyContacts($constituencyid);
   if (sizeof($contacts) == 0) {
      print _('No contacts.');
   } else {
      $out = '<table class="horizontal">'.LF;
      $out .= '<tr>'.LF;
      $out .= '   <td>'._('Name').'</td>'.LF;
      $out .= '   <td>'._('Email').'</td>'.LF;
      $out .= '   <td>'._('Phone').'</td>'.LF;
      $out .= '</tr>'.LF;
      $count=0;
      $_SESSION['current_email'] = '';
     foreach ($contacts as $id=>$data) {
         $out .= '<tr>'.LF;
         $out .= '  <td>'.$data['lastname'].', '.$data['firstname'].'</td>'.LF;
         $out .= '  <td><a href="mailto:'.$data['email'].'">'.$data['email'].'</a></td>'.LF;
         $out .= '  <td>'.$data['phone'].'</td>'.LF;
         $out .= '</tr>'.LF;

         $_SESSION['current_name'] = $data['firstname'] . ' ' . 
            $data['lastname'];
         if ($_SESSION['current_email'] == '') {
            $_SESSION['current_email'] = $data['email'];
         } else {
            $_SESSION['current_email'] .= ','.$data['email'];
         }
      }
      $out .= '</table>';
      print $out;
   }
}

/* Convert a networkID to a constituencyID. Returns FALSE when no match. */
function getConstituencyIDbyNetworkID($networkID) {
   if (!is_numeric($networkID)) {
      return false;
   }
   // Simple lookup function.
   $q = sprintf('SELECT constituency
                 FROM   networks
                 WHERE  id=%d',
                $networkID);
   $res = db_query($q);
   if ($res===FALSE) {
      return FALSE;
   } else {
      $row = db_fetch_next($res);
      $constituencyID = $row['constituency'];
      return $constituencyID;
   }
}// getConstituencyIDbyNetworkID

/**
 * Add a new constituency
 * @param $label Label of the constituency
 * @param $name  Name of the constituency
 * @param $error error message, if any
 * @return true on success, false on failure
 */
function addConstituency($label, $name, &$error) {
   if (($res = db_query("select nextval('constituencies_sequence')")) === false) {
       $error = db_error_message();
       return false;
   }
   if (($row = db_fetch_next($res)) === false) {
       $error = db_error_message();
       return false;
   } else {
       $newid = $row['nextval'];
   }
   $res = db_query(sprintf("
      INSERT INTO constituencies
      (id, label, name)
      VALUES
      (%d, %s, %s)",
      $newid,
      db_masq_null($label),
      db_masq_null($name)));
   if ($res === null) {
      $error = db_errormessage();
      return false;
   }
   return $newid;
}

/**
 * Update a constituency
 * @param $id ID of the constituency
 * @param $label Label of the constituency
 * @param $name  Name of the constituency
 * @param $error error message, if any
 * @return true on success, false on failure
 */
function updateConstituency($id, $label, $name, $notes, &$error) {
   if (!is_numeric($id)) {
      $error = _('Invalid parameter type $id in').' constituency.plib:'.
         __LINE__;
      return false;
   }
   $res = db_query(sprintf("
      UPDATE constituencies
      SET  label=%s,
           name=%s,
           notes=%s
      WHERE id=%d",
      db_masq_null($label),
      db_masq_null($name),
      db_masq_null($notes),
      $id));
   if ($res === false) {
      $error = db_errormessage();
      return false;
   }
   return true;
}

/**
 * Associate a user with a constituency 
 * @param $userid User's id
 * @param $constituencyid Constituency's id
 * @param $error Error message, if any
 * @return true if successful, false if unsuccessful
 */
function assignUser($userid, $constituencyid, &$error) {
   if (!is_numeric($userid)) {
      $error = _('Invalid parameter type').' in constituency.plib:'.__LINE__;
      return false;
   }
   if (!is_numeric($constituencyid)) {
      $error = _('Invalid parameter type').' in constituency.plib:'.__LINE__;
      return false;
   }
   $u = getUserByUserID($userid);
   if ($u == false) {
      $error = _('Invalid user id').' in constituency.plib:'.__LINE__;
      return false;
   }
   if (!array_key_exists($constituencyid, getConstituencies())) {
      $error = _('Invalid constituency id').' in constituency.plib:'.__LINE__;
      return false;
   }
   if (isConstituencyContact($userid, $constituencyid, $error) === null) {
      return false;
   }

   $q = q('insert into constituency_contacts (id, constituency, userid) '.
      'values (nextval(\'constituency_contacts_sequence\'), %con, %uid)',
      array('%con'=>$constituencyid, '%uid'=>$userid));
   if (($res = db_query($q)) === false) {
      $error = db_errormessage();
      return false;
   }
   return true;
}

/**
 * @return true if $userid is a contact for $constituencyid,
 *    false if s/he is not, null in case of an error
 */
function isConstituencyContact($userid, $constituencyid, &$error='') {
   if (!is_numeric($userid)) {
      $error = _('Invalid parameter type').' in constituency.plib:'.__LINE__;
      return null;
   }
   if (!is_numeric($constituencyid)) {
      $error = _('Invalid parameter type').' in constituency.plib:'.__LINE__;
      return null;
   }
   $u = getUserByUserID($userid);
   if ($u == false) {
      $error = _('Invalid user').' in constituency.plib:'.__LINE__;
      return null;
   }
   if (!array_key_exists($constituencyid, getConstituencies())) {
      $error = _('Invalid constituency').' in constituency.plib:'.__LINE__;
      return null;
   }
   $q = q('select id from constituency_contacts where userid=%userid and '.
      'constituency = %con', array(
      '%userid'=>$userid,
      '%con'=>$constituencyid,
   ));
   if (($res = db_query($q)) === false) {
      $error = db_errormessage();
      return null;
   }
   if (db_num_rows($res) > 0) {
      return true;
   }
   return false;
}

function constituencyDetails() {
    $cid = fetchFrom('REQUEST', 'cons', '%d');
    if (empty($cid)) {
        airt_msg(_('Missing parameter value in ').'constituency.plib:'.__LINE__);
        reload(BASEURL.'/constituencies.php');
        return;
    }
    $clist = getConstituencies();
    if (!array_key_exists($cid, $clist)) {
        airt_msg(_('Unknown constituency in ').'constituency.plib:'.__LINE__);
        reload(BASEURL.'/constituencies.php');
        return;
    }
    pageHeader(_('Constituency ').htmlentities($clist[$cid]['name']), array(
       'menu'=>'constituencies',
       'submenu'=>'constituencies'));
    print '<div class="right">'.LF;
    print t('<a class="button" href="%u/constituencies.php?action=Delete&consid=%i">%l</a>', array(
       '%u'=>BASEURL,
       '%i'=>$cid,
       '%l'=>_('Delete constituency')));
    print '</div>'.LF;

    print '<div id="constituency-details" style="clear:both;">'.LF;

    print '<div class="column">'.LF;

    print t('<form action="%u/constituencies.php" method="POST">'.LF, array(
       '%u'=>BASEURL));
    print '<input type="hidden" name="action" value="update"/>'.LF;
    print t('<input type="hidden" name="consid" value="%c"/>'.LF, array(
       '%c'=>$cid));
    print '<div class="block">'.LF;
    print '<h3>'._('Basic constituency details').'</h3>'.LF;
    print '<table>'.LF;
    print '<tr>'.LF;
    print '<td>'._('Name').'</td>'.LF;
    print '<td>'.LF;
    print t('<input type="text" size="30" name="label" value="%v"/>'.LF, array(
       '%v'=>$clist[$cid]['label']));
    print '</td>'.LF;
    print '</tr>'.LF;
    print '<tr>'.LF;
    print '<td>'._('Description').'</td>'.LF;
    print '<td>'.LF;
    print t('<input type="text" size="30" name="description" value="%v"/>'.LF, array(
       '%v'=>$clist[$cid]['name']));
    print '</td>'.LF;
    print '</tr>'.LF;
    print '</table>'.LF;
    print '<p/>'.LF;
    print '<input type="submit" value="'._('Update').'"/>'.LF;
    print '</div><!-- block -->'.LF;

    print '<div class="block">'.LF;
    print '<h3>'._('Constituency notes').'</h3>'.LF;
    print t('<textarea rows="5" cols="50" name="notes">%v</textarea>'.LF, array(
       '%v'=>$clist[$cid]['notes']));
    print '<p/>'.LF;
    print '<input type="submit" value="'._('Update').'"/>'.LF;
    print '</div><!-- block -->'.LF;

    print '</form>'.LF;
    print '</div><!-- column -->'.LF;

    print '<div class="column">'.LF;

    print '<div class="block">'.LF;
    print '<h3>'._('Network').'</h3>'.LF;
    print '<table>'.LF;
    print '<tr>'.LF;
    print '<th>'._('Netblock').'</th>'.LF;
    print '<th>'._('Label').'</th>'.LF;
    print '</tr>'.LF;
    $nlist = getNetworks();
    foreach ($nlist as $net) {
        if ($net['constituency'] != $cid) {
            continue;
        }
        print '<tr>'.LF;
        print t('<td>%net/%cidr</td>'.LF, array(
           '%net'=>$net['network'],
           '%cidr'=>netmask2cidr($net['netmask'])));
        print t('<td>%label</td>'.LF, array(
           '%label'=>$net['label']));
        print t('<td><a href="%u/networks.php?action=edit&id=%id">%l</a>'.LF,
           array('%u'=>BASEURL,
           '%id'=>$net['id'],
           '%l'=>_('edit')));
        /*
        print t('<a href="%u/networks.php?action=unlink&consid=%I&netwid=%id">%l</a>'.LF,
           array('%u'=>BASEURL,
           '%I'=>$consid,
           '%id'=>$net['id'],
           '%l'=>_('remove')));
        */
        print '</td>'.LF;
        print '</tr>'.LF;
    }
    print '</table>'.LF;

    print '</div><!-- block -->'.LF;

    print '<div class="block">'.LF;
    print '<h3>'._('Constituency contacts').'</h3>'.LF;
    print '<table>'.LF;
    print '<tr>'.LF;
    print t('<th>%1, %2, %3</th>', array(
       '%1'=>_('Name'),
       '%2'=>_('E-mail'),
       '%3'=>_('Telephone')));
    print '<th/>'.LF;
    print '</tr>'.LF;
    foreach (getConstituencyContacts($cid) as $id=>$data) {
        print '<tr>'.LF;
        print '<td>'.LF;
        print implode(' ', array($data['firstname'], $data['lastname'])).'<br/>'.LF;
        print t('E: <a href="%u/users.php?action=edit&id=%i">%e</a>', array(
           '%u'=>BASEURL,
           '%i'=>$data['userid'],
           '%e'=>htmlentities($data['email'])));
        if (!empty($data['phone'])) {
            print '<br/>';
            print t('T: %t', array('%t'=>htmlentities($data['phone'])));
        }
        print '</td>'.LF;
        print '<td>'.LF;
        print t('<a href="%u/constituencies.php?action=rmcontact&cid=%cid&uid=%uid">%l</a>', array(
           '%u'=>BASEURL,
           '%uid'=>$data['userid'],
           '%cid'=>$cid,
           '%l'=>_('delete')));
        print '</td>'.LF;
        print '</tr>'.LF;
    }
    print '</table>'.LF;
    
    print '<p/>';
    print _('Contacts are identified by email address. '.
       'To add constituency contacts, please enter one address per line.');

    print t('<form action="%u/constituencies.php" method="post">'.LF, array(
       '%u'=>BASEURL));
    print t('<input type="hidden" name="action" value="addcontact"/>'.LF, array(
      '%c'=>$cid));
    print t('<input type="hidden" name="constituency" value="%c"/>'.LF, array(
      '%c'=>$cid));
    print '<table>'.LF;
    print '<tr>'.LF;
    print '<td>'.LF;
    print t('<textarea name="contacts"></textarea>'.LF);
    print '</td>'.LF;
    print '<td>'.LF;
    print t('<input type="submit" value="%v"/>', array(
       '%v'=>_('Add')));
    print '</td>'.LF;
    print '</tr>'.LF;
    print '</table>'.LF;
    print '</form>'.LF;

    print '</div><!-- block -->'.LF;

    print '</div><!-- column -->'.LF;

    print '</div><!-- #constituency-details -->'.LF;

    pageFooter();
}

function removeConstituencyContactFrontend() {
    $cid = fetchFrom('REQUEST', 'cid', '%d');
    if (empty($cid)) {
        airt_msg(_('Missing parameter value in ').'constituency.plib:'.__LINE__);
        reload(BASEURL.'/constituencies.php');
        return;
    }
    $uid = fetchFrom('REQUEST', 'uid', '%d');
    if (empty($uid)) {
        airt_msg(_('Missing parameter value in ').'constituency.plib:'.__LINE__);
        reload(BASEURL.'/constituencies.php?action=edit&cons='.$cid);
        return;
    }
	 $error = '';
    if (removeConstituencyContact($cid, $uid, $error) === false) {
        airt_msg($error);
        reload(BASEURL.'/constituencies.php?action=edit&cons='.$cid);
        return;
    }
    airt_msg(_('Constituency contact removed.'));
    reload(BASEURL.'/constituencies.php?action=edit&cons='.$cid);
}

function addConstituencyContactFrontend() {
    $cid = fetchFrom('REQUEST', 'constituency', '%d');
    if (empty($cid)) {
        airt_msg(_('Missing parameter value in ').'constituency.plib:'.__LINE__);
        reload(BASEURL.'/constituencies.php');
        return;
    }
    $contacts = strip_tags(trim(fetchFrom('REQUEST', 'contacts')));
    if (empty($contacts)) {
        $contacts = array();
    } else {
        $contacts = split("\r\n", $contacts);
    }
    array_walk($contacts, strip_tags);

    $c = getConstituencyContacts($cid);
    // add contacts that do not yet exist
    foreach ($contacts as $contact) {
        $contact = strtolower(trim($contact));
        if (empty($contact)) {
            continue;
        }
        if (($u = getUserByEmail($contact)) == false) {
            addUser(array('email'=>$contact));
            airt_msg(t(_('Added user %u.'), array(
               '%u'=>htmlentities($contact))));
            $u = getUserByEmail($contact);
        } 
        if (!array_key_exists($u['id'], $c)) {
           if (addConstituencyContact($cid, 
              array('userid'=>$u['id']), $error) === false) {
                airt_msg($error);
                reload();
                exit();
            } else {
               airt_msg(t(_('Added user %u to constituency.'), array(
                  '%u'=>htmlentities($contact))));
            }
        }
        unset($c[$u['id']]);
    }
    airt_msg(_('Constituency contact added.'));
    reload(BASEURL.'/constituencies.php?action=edit&cons='.$cid);
}
?>
