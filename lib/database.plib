<?php
/* vim: syntax=php
 * $Id$ 

 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004	Kees Leune <kees@uvt.nl>

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/* Basic check for availability of PostgreSQL PHP module. PHP tends to die
 * without even a log entry if --without-pgsql has been used while building
 * the PHP module, and we issue PostgreSQL calls with '@' prefixes to catch
 * the errors.
 */
if (!function_exists('pg_query')) {
  // Panic. There is no graceful way out.
  echo _('PHP seems not to have been compiled with PostgreSQL support.');
  exit;
}

/* connect to the database on page load and remain connected.
 */
global $db;
$db = db_connect(DBDB, DBUSER, DBPASSWD);

/* return the latest error message */
function db_errormessage() {
    return pg_errormessage();
} // db_error


/* connect to the database server using the given database name, user name
 * and password, and return a connection resource.
 */
function db_connect($database, $username, $password) {
    $connectstring = sprintf("dbname=%s user=%s password=%s",
        $database, $username, $password);
    $conn = @pg_pconnect($connectstring, PGSQL_CONNECT_FORCE_NEW);

    return $conn;
} // db_connect


/* Execute $query on the database. Use default connection if none
 * is provided in $conn.
 */
function db_query($query, $conn=NULL) {
  global $db;

  if ($conn == NULL) {
    $conn = $db;
  }
  $res = @pg_query($conn, $query);
  if (defined('DEBUG') && DEBUG && $res===FALSE) {
    // PostgreSQL error in debug mode; get verbose.
    printf("<hr><b><font color=\"red\">PostgreSQL problem</font></b><br>\n".
           "<PRE>QUERY: %s\n".
           "%s</PRE><hr>\n",
           $query,
           db_errormessage());
  }

  return $res;
} // pg_query


/* Fetch the next result from a query output, using a result resource 
 * obtained by db_query
 */
function db_fetch_next($res) {
    return pg_fetch_assoc($res);
} // pg_fetch_next


/* Close specified database connection, or default when none
 * is provided
 */
function db_close($conn=NULL) {
  global $db;

  if ($conn == NULL) {
    $conn = $db;
  }
  return pg_close($conn);
}

/* Count the number of rows in the result set. */
function db_num_rows($res) {
    return pg_num_rows($res);
}


function db_free_result($res) {
    return pg_free_result($res);
}

/* Return $str surrounded by singles quotes, or the string NULL if $str is an
 * empty string ''. Takes care of quote escapes in case the string contains
 * some. Not in every application is it a good idea to use NULL instead of
 * the empty string '', beware.
 */
function db_masq_null($str) {
   $str = db_escape_string($str);
   return ($str == "" ? "NULL": "'$str'");
}

/* Postgres-specific wrapper to escape a string for insertion into a text
 * field.
 */
function db_escape_string($string) {
  return pg_escape_string($string);
}

?>
