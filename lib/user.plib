<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
require_once LIBDIR."/database.plib";

/* define AIRT capabilities and their corresponding database strings */
define('AIRT_USER_CAPABILITY_IODEF', 'iodef');
define('AIRT_USER_CAPABILITY_LOGIN', 'login');

/* associative array containing default user capabilities. */
$airt_user_capabilities = array(
   AIRT_USER_CAPABILITY_IODEF => 0,
   AIRT_USER_CAPABILITY_LOGIN  => 0
);

function _getUser($criteria, $value) {
   $res = db_query(sprintf("
      SELECT id, lastname, firstname, email, phone, userid, login, language,
         x509name
      FROM   users
      WHERE  %s=%s", $criteria, $value))
   or die(_('Unable to query database'));

   if (db_num_rows($res) == 0) {
      return false;
   }

   $out = array();
   while ($row = db_fetch_next($res)) {
      array_push($out, $row);
   }

   return $out;
}

function getUserByUserID($userid) {
   $temp = _getUser("id", $userid);
   return $temp[0];
}

function getUserByLogin($login) {
   $temp = _getUser("login", db_masq_null($login));
   return $temp[0];
}

function getUserByOrganizationalID($id) {
   $temp = _getUser("userid", db_masq_null($id));
   return $temp[0];
}

function getUserByEmail($email) {
   $temp = _getUser("email", db_masq_null($email));
   return $temp[0];
}

/* Get a user's capabilities.
 * $userid  userid to retrieve
 * &$capabilities associative array of capabilities
 * $error   error (if any)
 *
 * returns true on success, false on failure
 */
function getUserCapabilities($userid, &$capabilities=array(), &$error='') {
   global $airt_user_capabilities;
   if (!is_numeric($userid)) {
      $error = _('Invalid parameter type in user.plib:').__LINE__;
      return false;
   }
   foreach ($airt_user_capabilities as $key=>$value) {
      $capabilities[$key] = $value;
   }
   $res = db_query(q("select captype, capvalue from user_capabilities where
   userid=%userid", array('%userid'=>$userid)));
   if (!$res) {
      $error = _('Unable to query database in user.plib:').__LINE__;
      return false;
   }
   while ($row = db_fetch_next($res)) {
      $capabilities[$row['captype']] = $row['capvalue'];
   }
   return true;
}

/* Add a user to the database. Returns true on success or false on failure.
 *
 * status = error message, if any. 
 */
function addUser($user, &$status='') {
   if (array_key_exists('lastname', $user)) {
      $lastname=$user['lastname'];
   } else {
      $lastname = '';
   }
   if (array_key_exists('firstname', $user)) {
      $firstname=$user['firstname'];
   } else {
      $firstname = '';
   }
   if (array_key_exists('email', $user)) {
      $email=strtolower($user['email']);
   } else {
      $email = '';
   }
   if (array_key_exists('phone', $user)) {
      $phone=$user['phone'];
   } else {
      $phone = '';
   }
   if (array_key_exists('login', $user)) {
      $login=$user['login'];
   } else {
      $login = '';
   }
   if (array_key_exists('x509name', $user)) {
      $x509name=$user['x509name'];
   } else {
      $x509name = '';
   }
   if (array_key_exists('userid', $user)) {
      $userid=$user['userid'];
   } else {
      $userid = '';
   }
   if (array_key_exists('language', $user)) {
      $language=$user['language'];
   } else {
      $language = '';
   }
   if (array_key_exists('password', $user)) {
      $password=$user['password'];
   } else {
      $password = '';
   }

   $tmp = getUserByEmail($email);
   if (sizeof($tmp) > 0) {
       $status = t(_('Email address %e already in use.'), array(
          '%e'=>$email));
       return false;
   }
   if (!empty($login)) {
       $tmp = getUserByLogin($login);
       if (sizeof($tmp) > 0) {
           $status = t(_('Login %l already in use by email address %e.'), array(
              '%e'=>$tmp['email'],
              '%l'=>$login));
           return false;
       }
   }

   if (sizeof($tmp) > 0) {
       $status = t(_('Email address %e already in use.'), array(
          '%e'=>$email));
       return false;
   }

   $query = sprintf("
      INSERT INTO users
      (id, lastname, firstname, email, phone, login, userid, language,
      password, x509name)
      VALUES
      (nextval('users_sequence'), %s, %s, %s, %s, %s, %s, %s, %s, %s)",
      db_masq_null($lastname),
      db_masq_null($firstname),
      db_masq_null($email),
      db_masq_null($phone),
      db_masq_null($login),
      db_masq_null($userid),
      db_masq_null($language),
      db_masq_null(sha1($password)),
      db_masq_null($x509name)
   );
   $res = @db_query($query);
   if ($res === false) {
       $status = db_error_message();
   } 
   return $res;
}

// setUserCapabilities($userid, $capabilities, $error);
/* Set the user's capabilities.
 *
 * $userid = userid to set capabilities for
 * $capabilties = associative array containing capabilities and value
 * $error = descriptive error message, if any
 *
 * returns true on success, false on failure
 */
function setUserCapabilities($userid, $capabilities, &$error='') {
   if (!is_numeric($userid)) {
      $error = _('Invalid parameter type in user.plib:').__LINE__;
      return false;
   }
   $res = db_query(q('select distinct captype from user_capabilities where
   userid=%userid', array('%userid'=>$userid)));
   if (!$res) {
      $error = _('Database error in user.plib:').__LINE__;
      return false;
   }
   $caps=array();
   while ($row = db_fetch_next($res)) {
      $caps[] = $row['captype'];
   }
   $inserts = array();
   $updates = array();
   foreach ($capabilities as $key=>$value) {
      if (array_search($key, $caps) !== false) {
         $updates[] = q('update user_capabilities set captype=\'%key\',
         capvalue=%value where userid=%userid and captype=\'%key\'', array(
            '%key'=>db_escape_string($key),
            '%value'=>$value,
            '%userid'=>$userid));
      } else {
         $inserts[] = q('insert into user_capabilities (id, userid, captype,
         capvalue) values (nextval(\'generic_sequence\'), %userid,
         \'%captype\', %capvalue)', array(
            '%userid'=>$userid,
            '%captype'=>db_escape_string($key),
            '%capvalue'=>$value));
      }
   }
   $query = "begin transaction;";
   if (sizeof($updates) > 0) {
      $query .= implode(';', $updates).';';
   }
   if (sizeof($inserts) > 0) {
      $query .= implode(';', $inserts).';';
   }
   $query .= "commit;";

   $res = db_query($query);
   if (!$res) {
      $error = _('Database error in user.plib:').__LINE__;
      return false;
   }
   return true;
}

/* EOF */
?>
