<?php
/* vim: syntax=php shiftwidth=3 tabstop=3
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004	Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * constituencies.php -- manage constituency data
 * 
 * $Id$
 */
require_once LIBDIR."/database.plib";
require_once LIBDIR."/user.plib";

/** Authenticate a user by username and password.
 * @param $username Username provided by authentication frontend
 * @param $password Password provided by authentication frontend
 * @return Returns the user's userid (numerical), or -1 for failure.
 */
function airt_authenticate($username, $password) {
   $query = sprintf("
      SELECT id as userid
      FROM   users
      WHERE  login = '%s'
      AND    password = '%s'",
         db_escape_string($username),
         sha1($password)
   );

   $res = db_query($query) or die(_('Unable to query database.'));

   if (db_num_rows($res) > 0) {
      $row = db_fetch_next($res);
      $userid = $row['userid'];
      db_free_result($res);

      return $userid;
    } else {
      db_free_result($res);
      return -1;
    }
} // airt_authenticate


/** Set up the session for the newly authenticated user. Do not call this
 * function if credentials have not been properly validated!
 * @param @userid Userid (numerical) of the session's owner.
 */
function airt_initsession($userid='') {
   if (!is_numeric($userid)) {
      exit;
   }
   if ($userid == '') {
      die(_('Invalid login!'));
   }
	$user = getUserByUserID($userid);
	if (!$user) {
      die(_('Incorrect login!'));
   }

	generateEvent("goodlogin", array(
		'login' => $user['login'],
		'remoteip' => $_SERVER['REMOTE_ADDR']
	));

	// session_start();
	foreach (array('username', 'userid', 'ip', 'last', 'lastdb', 'hostnamelast') as $key => $value) {
		session_register($value);
  }

	$_SESSION['username'] = $user['login'];
	$_SESSION['userid']   = $user['id'];
	$_SESSION['ip']       = $_SERVER['REMOTE_ADDR'];
	$_SESSION['last']     = time();
   $_SESSION['language'] = $user['language'];

  #select vars for welcome message
  $query  = "SELECT to_char(last,'YYYY-MM-DD HH24:MI') as last, hostnamelast FROM users WHERE id='$_SESSION[userid]'";
  $res    = db_query($query) or die(_('Unable to query database.'));

   while($row = db_fetch_next($res)) {
    $_SESSION['lastdb']       = $row['last'];
    $_SESSION['hostnamelast'] = $row['hostnamelast'];
   }
   db_free_result($res);

   // update db for future welcome message
   $query  = "UPDATE users
           SET last = CURRENT_TIMESTAMP,
           hostnamelast = '$_SERVER[REMOTE_ADDR]'
           WHERE id = '$_SESSION[userid]'";
   $res    = db_query($query)
   or die(_('Unable to query database.'));
   db_free_result($res);
   $ref = fetchFrom('REQUEST', 'ref');
   if (!empty($ref)) {
      Header("Location: $ref");
   } else {
      Header("Location: $_SESSION[BASEURL]/index.php");
   }
}

/** Generate an event when a user offers invalid credentials.
 * @param $login login provided by the user
 */
function airt_invalidCredentials($login = '') {
	generateEvent('invalidlogin', array(
				'login' => $login,
				'remoteip' => $_SERVER['REMOTE_ADDR']
			));
}
?>
