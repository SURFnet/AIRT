<?php
/* $Id$ 
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2004	Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
require_once '/etc/airt/airt.cfg';
require_once LIBDIR."/airt.plib";
require_once LIBDIR."/database.plib";

define("AIRTURL", "http://infolab.uvt.nl/airt");
define("AIRTPREFIX","airt");

/* Export the incident id's listed in the array $ids in XML format.
 */
function exportIncident($ids) {

    $expr = "(";
    foreach ($ids as $incident)
	    $expr .= "$incident,";
    $expr = rtrim($expr, ",").")";
    
    $conn = db_connect(DBDB, DBUSER, DBPASSWD)
    or die("Unable to connect to database.");

    $res = db_query($conn, "
	    SELECT    incidents.id,
		      extract (epoch from incidents.created) as created,
		      extract (epoch from incidents.updated) as updated,
		      incident_states.label as state,
		      incident_status.label as status,
		      incident_types.label  as type,
		      incident_addresses.ip as ip
	    FROM      incidents
	    LEFT JOIN incident_addresses ON (incidents.id = incident_addresses.incident)
	    LEFT JOIN incident_states ON (incidents.state = incident_states.id)
	    LEFT JOIN incident_status ON (incidents.status = incident_status.id)
	    LEFT JOIN incident_types ON (incidents.type = incident_types.id)
	    WHERE     incidents.id IN $expr
	    AND       incidents.id = incident_addresses.incident
	    ORDER BY  incidents.id")
    or die("Unable to query database.");

    $doc = domxml_new_doc("1.0");
    $root = $doc->create_element_ns(AIRTURL, "airt", AIRTPREFIX);
    $doc->append_child($root);

    while ($row = db_fetch_next($res)) addIncidentToTree($doc, $row);

    db_close($conn);
    return $doc->dump_mem(true, "UTF-8");
}

/* $doc contains a DOM tree to which the data in $row will be added. $row is
 * an associative array containing the output of the query which is executed
 * in exportIncident(). 
 * 
 * This function will determine if $row is a new incident, which is not yet
 * part of the DOM tree output. If it is, only the IP address of the incident
 * gets added to it. Determining if an incident is identical is solely done
 * based on the <identification> element of the <incident>.
 *
 * The XML structure is documented in airt.xsd, which can be found in the
 * source/doc directory.
 */
function addIncidentToTree(&$doc, $row) {

    $tles = $doc->child_nodes();
    $root = $tles[0];
    $added = false;

    $context = $doc->xpath_new_context();
    $context->xpath_register_ns("airt", "http://infolab.uvt.nl/airt");
    $res = $context->xpath_eval("//airt:airt/airt:incident");

    /* $res->nodeset now contains all incident elements */
    foreach ($res->nodeset as $node) {

		/* iterate over all identification tags to find an identification
		 * we recognize. TODO: How would one do this using xpath too ? 
		 */
		foreach ($node->get_elements_by_tagname("identification") as $n) {
			$prefix = $n->get_elements_by_tagname("prefix");
			$ref    = $n->get_elements_by_tagname("reference");
			if (!$prefix || !$ref) continue;

			/* if the incident already exists, add the IP address to it,
			 * rather than creating a new incident
			 */
			if ($prefix[0]->get_content() == INCIDENTID_PREFIX &&
				$ref[0]->get_content() == $row["id"]) {

			$new_element = $doc->create_element_ns(AIRTURL, "address");
			$new_element->set_content($row["ip"]);
			$node->append_child($new_element);
			$added = true;
			break;
			}
		}
    }

    if (!$added) {
		$ISO8601_filter = "Y-m-d\\TH:i:sO";
		$incident_element = $doc->create_element_ns(AIRTURL, "incident");

		$id_element = $doc->create_element_ns(AIRTURL, "identification");

		$prefix_element = $doc->create_element_ns(AIRTURL, "prefix");
		$prefix_element->set_content(INCIDENTID_PREFIX);

		$ref_element = $doc->create_element_ns(AIRTURL, "reference");
		$ref_element->set_content($row["id"]);
			
		$state_element = $doc->create_element_ns(AIRTURL, "state");
		$state_element->set_content($row["state"]);

		$status_element = $doc->create_element_ns(AIRTURL, "status");
		$status_element->set_content($row["status"]);

		$type_element = $doc->create_element_ns(AIRTURL, "type");
		$type_element->set_content($row["type"]);

		$_element = $doc->create_element_ns(AIRTURL, "created");
		$_element->set_content(Date($ISO8601_filter,$row["created"]));

		$updated_element = $doc->create_element_ns(AIRTURL, "updated");
		$updated_element->set_content(Date($ISO8601_filter,$row["updated"]));

		// build the tree
		$incident_element -> append_child($id_element);
		$id_element -> append_child($prefix_element);
		$id_element -> append_child($ref_element);

		$incident_element -> append_child($state_element);
		$incident_element -> append_child($status_element);
		$incident_element -> append_child($type_element);
		$incident_element -> append_child($_element);
		$incident_element -> append_child($updated_element);

		if (array_key_exists("ip", $row)) {
			$ip_element = $doc->create_element_ns(AIRTURL, "address");
			$ip_element->set_content($row["ip"]);
			$incident_element -> append_child($ip_element);
		}

		$root->append_child($incident_element);
    }
}
