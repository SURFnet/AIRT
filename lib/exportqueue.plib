<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * exportqueue.plib -- main library for the export queue
 * ("airt_export" command).
 * 
 * $Id$
 */

require_once LIBDIR.'/airt.plib';

/* Produce info on stdout (when user asked for --help). */
function printUsage() {
   global $WRAPPERS;

   echo t('Task export program, part of the AIRT suite.')."\n";
   echo t('Copyright (C) 2005   Tilburg University, The Netherlands.')."\n";
   echo t('Usage: airt_export [--help] [--noqueue] [--verbose]')."\n";
   echo   '         '.t('[--result-id=ID] [--result-code=CODE]')."\n";
   echo   '         '.t('[--result-msg="message here"]')."\n";

   // Enumerate all registered wrappers.
   if (count($WRAPPERS)>0) {
      echo t('Available wrappers:');
      foreach ($WRAPPERS as $wrapper=>$execpath) {
         echo ' '.$wrapper;
      }
      echo "\n";
   }

}// printUsage


/* Task spawner, the Unix way. Does the traditional fork() and exec() trick,
 * and leaves the spawned task running as a child of the parent of
 * airt_export, not as a child of airt_export itself.
 * Input:  task = The fully qualified path name of the task to start.
 *         params = Array with all CLI parameters to be provided to the task.
 *                  See doc of pcntl_exec for exact specifications.
 * Output: "" when task was spawned successfully, error string on failure.
 *         It seems unnecessary to return the child PID, as we do not
 *         foresee a "kill background task" option any time soon. If we need
 *         one, start using pass-by-reference parameters.
 */ 
function spawnTask($task,$params=array()) {
   // Check whether we have any chance of successfully executing the task.
   if (!is_executable($task)) {
      // Nope.
      return t('%task is not executable.',
               array('%task'=>$task));
   }

   // Divide & conquer.
   $child = pcntl_fork();
   if ($child==-1) {
     // Could not fork!?
     return t('Could not fork.');
   } else if ($child>0) {
     // Forked successfully and we are the parent.
     return '';
   }

   // We are the child. Hello, world!
   // Detach from the controlling terminal, we run as a daemon.
   if (!posix_setsid()) {
     fwrite(STDERR, "ERROR: Could not detach from terminal.\n");
     exit(1);
   }

   // Replace ourselves with the target task. Notice that we cannot signal
   // any problem back to the parent here.
   pcntl_exec($task,$params);
   // and we'll never ever should get here.
   fwrite(STDERR, "ERROR: Entered the twilight zone!?");
   exit(1);

}// spawnTask


/* Message to user, is silent when no --verbose switch was given.
 * Input: message = The string to display when --verbose, without line feed.
 * Output: void.
 */
function msg($message) {
   global $OPTIONS;
   if (!$OPTIONS['--verbose']) {
      return;
   } else {
      echo "$message\n";
   }
}

?>
