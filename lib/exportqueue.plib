<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * exportqueue.plib -- main library for the export queue
 * ("airt_export" command).
 * 
 * $Id$
 */

// This is the common library for all export queue functions, both for CLI
// and for HTML use.

require_once LIBDIR.'/airt.plib';

define('LF',"\n");   // See whether this is handy. If so, make app wide.

///// CLI functions ///////////////////////////////////////////////////////////

/* Produce info on stdout (when user asked for --help). */
function printUsage() {
   global $WRAPPERS;

   echo t('Task export program, part of the AIRT suite.').LF;
   echo t('Copyright (C) 2005   Tilburg University, The Netherlands.').LF;
   echo t('Usage: airt_export [--help] [--noqueue] [--verbose]').LF;
   echo   '         '.t('[--result-id=ID] [--result-code=CODE]').LF;
   echo   '         '.t('[--result-msg="message here"]').LF;

   // Enumerate all registered wrappers.
   if (count($WRAPPERS)>0) {
      echo t('Available wrappers:');
      foreach ($WRAPPERS as $wrapper=>$execpath) {
         echo ' '.$wrapper;
      }
      echo LF;
   }

}// printUsage


/* Task spawner, the Unix way. Does the traditional fork() and exec() trick,
 * and leaves the spawned task running as a child of the parent of
 * airt_export, not as a child of airt_export itself.
 * Input:  task = The fully qualified path name of the task to start.
 *         params = Array with all CLI parameters to be provided to the task.
 *                  See doc of pcntl_exec for exact specifications.
 * Output: "" when task was spawned successfully, error string on failure.
 *         It seems unnecessary to return the child PID, as we do not
 *         foresee a "kill background task" option any time soon. If we need
 *         one, start using pass-by-reference parameters.
 */ 
function spawnTask($task,$params=array()) {
   // Check whether we have any chance of successfully executing the task.
   if (!is_executable($task)) {
      // Nope.
      return t('%task is not executable.',
               array('%task'=>$task));
   }

   // Divide & conquer.
   $child = pcntl_fork();
   if ($child==-1) {
     // Could not fork!?
     return t('Could not fork.');
   } else if ($child>0) {
     // Forked successfully and we are the parent.
     return '';
   }

   // We are the child. Hello, world!
   // Detach from the controlling terminal, we run as a daemon.
   if (!posix_setsid()) {
     fwrite(STDERR, "ERROR: Could not detach from terminal.\n");
     exit(1);
   }

   // Replace ourselves with the target task. Notice that we cannot signal
   // any problem back to the parent here.
   pcntl_exec($task,$params);
   // and we'll never ever should get here.
   fwrite(STDERR, "ERROR: Entered the twilight zone!?");
   exit(1);

}// spawnTask


/* Message to user on stdout, is silent when no --verbose switch was given.
 * Input: message = The string to display when --verbose, without line feed.
 * Output: void.
 */
function msg($message) {
   global $OPTIONS;
   if (!$OPTIONS['--verbose']) {
      return;
   } else {
      echo "$message\n";
   }
}


///// HTML functions //////////////////////////////////////////////////////////

/* Table representation of queueList().
 * Input: nothing.
 * Output: HTML string, ready for output.
 */
function formatQueueList() {
   $out = '';

   // Fetch the items in the export queue.
   if (getQueueList($itemArray,$error)) {
      $out = '<p>'.t('ERROR:').' '.$error.'</p>'.LF;
      return $out;
   }

   if (count($itemArray)==0) {
      $out = '<p><em>'.t('No items in export queue.').'</em></p>'.LF;
      return $out;
   }

   $out = '<table border=1>'.LF;
   $out .= '<tr>'.LF;
   $out .= '  <th>'.t('ID').'</th>'.LF;
   $out .= '  <th>'.t('Task').'</th>'.LF;
   $out .= '  <th>'.t('Params').'</th>'.LF;
   $out .= '  <th>'.t('Created').'</th>'.LF;
   $out .= '  <th>'.t('Scheduled').'</th>'.LF;
   $out .= '  <th>'.t('Started').'</th>'.LF;
   $out .= '  <th>'.t('Ended').'</th>'.LF;
   $out .= '  <th>'.t('Result').'</th>'.LF;
   $out .= '</tr>'.LF;
   foreach ($itemArray as $id=>$details) {
      $out .= '<tr>'.LF;
      $out .= '  <td>'.$details['id'].'</td>'.LF;
      $out .= '  <td>'.$details['task'].'</td>'.LF;
      $out .= '  <td>'.$details['params'].'</td>'.LF;
      $out .= '  <td>'.$details['created'].'</td>'.LF;
      $out .= '  <td>'.$details['scheduled'].'</td>'.LF;
      $out .= '  <td>'.$details['started'].'</td>'.LF;
      $out .= '  <td>'.$details['ended'].'</td>'.LF;
      $out .= '  <td>'.$details['result'].'</td>'.LF;
      $out .= '</tr>'.LF;
   }
   $out .= '</table>'.LF;

   return $out;

}// formatQueueList


/* HTML to add an item to the queue. Demo only, so not much choice. */
function formatQueueItemInsert() {
   $out = '<p><strong>'.t('Add a new task to the queue').'</strong></p>'.LF;
   $out .= '<form method="POST" action="exportqueue.php">'.LF;
   $out .= '<input type="hidden" name="action" value="add">'.LF;

   $out .= '<select name="task">'.LF;
   $out .= '  <option value="none">Demo Task'.LF;
   $out .= '</select>'.LF;

   $out .= '<select name="scheduled">'.LF;
   $out .= '  <option value=0>Now'.LF;
   $out .= '  <option value=1>In one hour'.LF;
   $out .= '  <option value=2>In two hours'.LF;
   $out .= '  <option value=3>In three hours'.LF;
   $out .= '</select>'.LF;

   $out .= '<input type="SUBMIT" value="'.t('Add Task').'">'.LF;
   $out .= '</form>'.LF;

   return $out;
}// formatQueueItemInsert


///// Common (SQL) functions //////////////////////////////////////////////////

/* Returns all items in the queue with their details, ordered by task ID.
 * Input: itemArray = Variable to put the queue items into.
 *            array[taskid]=array(id,task,params,created,scheduled,started,
 *                                ended,result).
 *        error = Variable to write the error message to.
 * Output: 0 on success, 1 on failure, with $error containing a message.
 */
function getQueueList(&$itemArray, &$error) {
   $itemArray = array();
   $error = '';

   $q = q('SELECT id,task,params,created,scheduled,started,ended,result
           FROM export_queue
           ORDER BY id');
   $res = db_query($q);
   if ($res===FALSE) {
      $error = t('Could not query database for all tasks.');
      return 1;
   }

   while ($row = db_fetch_next($res)) {
      $id = $row['id'];
      $itemArray[$id] = $row;
   }
   return 0;
   
}// getQueueList


/* Returns all items in the queue that are ready to run.
 * Input: itemArray = Variable to put the queue items into.
 *           $itemArray[taskid]=array(id,task,params).
 *        error = Variable to write the error message to.
 * Output: 0 on success, 1 on failure, with $error containing a message.
 */
function getQueueRunnable(&$itemArray, &$error) {
   $itemArray = array();
   $error = '';

   $q = q('SELECT id,task,params
           FROM export_queue
           WHERE (scheduled<CURRENT_TIMESTAMP OR scheduled IS NULL)
             AND started IS NULL
           ORDER BY id');
   $res = db_query($q);
   if ($res===FALSE) {
      $error = t('Could not query database for tasks to run.');
      return 1;
   }

   while ($row = db_fetch_next($res)) {
      $id = $row['id'];
      $itemArray[$id] = $row;
   }
   return 0;

}// getQueueRunnable


/* Inserts a new task into the queue.
 * Input: task = The task name to run, e.g. 'none'. Leave out 'wrapper_'.
 *        params = The parameter string. Replace spaces
 *           by '!' like for Nagios: '-f!foo!-b!bar'. May be ''.
 *        scheduled = A time string in ISO8601 format when the
 *           task must be started. When '', task will run ASAP.
 *        output = Variable to write the new task ID or the error msg to.
 * Output: 0 on success, $output contains new task ID, or 1 on failure,
 *    $output contains error msg.
 */
function queueItemInsert($task, $params, $scheduled, &$output) {
   # NOTE TODO PANIC ALERT
   # THIS CODE IS FOR DEMONSTRATION PURPOSES ONLY and needs to be fully
   # checked and sanitized before we dare to actually use it for production.
   # For example, we need to query the sequence before the insert to get the
   # ID for return value. Again, the current code must be SCRAPPED.

   $q = q("INSERT INTO export_queue
              (id,task,created,scheduled)
           VALUES
              (nextval('exportqueue_sequence'),
               '%task',
               CURRENT_TIMESTAMP,
               CURRENT_TIMESTAMP + interval '%scheduled hour')",
          array('%task'=>$task,
                '%scheduled'=>$scheduled));
   if (db_query($q)) {
      $output = 'Could not insert queue item.';
      return 1;
   } else {
      $output = 'THIS IS NOT IMPLEMENTED';
      return 0;
   }

}// queueItemInsert


/* Returns the details of a given item. Does not touch the queue at all.
 * Input: taskID = The task ID as returned by queueList() or queueInsertItem().
 *        output = array[key]=value, with key in (id,task,params,created,
 *           scheduled,started,ended,result); or the error message.
 * Output: 0 on success, $output contains task details, or 1 on failure,
 *    $output contains error msg.
 */
function queueItemPeek($taskID, &$output) {
   $output = 'Not yet implemented.';
   return 1;
}// queueItemPeek


/* Marks an existing queue item as started.
 * Input: taskID = The ID as returned by queueList() or queueInsertItem().
 *        started = The ISO8601 time string when the item got
 *           started. When '', current system time will be used.
 *        error = Variable to write the error message to.
 * Output: 0 on success, 1 on failure, with $error containing the message.
 */
function queueItemSetStarted($taskID, $started, &$error) {
   $error = '';

   if (!is_numeric($taskID)) {
      $error = t('taskID must be a number.');
      return 1;
   }

   // Here comes the paranoid segment.
   $q = q('SELECT started,ended
           FROM export_queue
           WHERE id=%id',
           array('%id'=>$taskID));
   $res = db_query($q);
   if ($res==FALSE) {
      $error = t('Could not query database.');
      return 1;
   }

   if (db_num_rows($res)==0) {
      $error = t('Task %id unknown in export queue.',
                  array('%id'=>$taskID));
      return 1;
   }

   $row = db_fetch_next($res);
   if ($row['started']!='') {
      $error = t('Task %id already started.',
                  array('%id'=>$taskID));
      return 1;
   }
   if ($row['ended']!='') {
      $error = t('Task %id has already completed.',
                  array('%id'=>$taskID)).LF;
      return 1;
   }

   // Hmmm, everything seems OK.
   if ($started=='') {
      // Default to current time in ISO8601 format.
      $started = date('Y-m-d\TH:i:sO');
   }

   $q = q("UPDATE export_queue
           SET    started='%started'
           WHERE  id=%id",
           array('%id'=>$taskID,
                 '%started'=>$started));
   $res = db_query($q);
   if ($res===FALSE) {
      $error = t('Could not update database.');
      return 1;
   }

   return 0;
}// queueItemSetStarted


/* Marks an existing queue item as ended. Checks a lot of things.
 * Input: taskID = The ID as returned by queueList() or queueInsertItem().
 *        ended = The ISO8601 time string when the item completed.
 *           When '', current system time will be used.
 *        result = The standard result code plus a possible message,
 *           together as one string.
 *        noqueue = Boolean, TRUE if no database update should take place.
 *        error = Variable to write the error message to.
 * Output: 0 on success, 1 on failure, with $error containing the message.
 */
function queueItemSetEnded($taskID, $ended, $result, $noqueue, &$error) {
   $error = '';

   if (!is_numeric($taskID)) {
      $error = t('taskID must be a number.');
      return 1;
   }

   // See whether the identified task is still open. Be paranoid.
   $q = q('SELECT started,ended
           FROM export_queue
           WHERE id=%id',
           array('%id'=>$taskID));
   $res = db_query($q);
   if ($res==FALSE) {
      $error = t('Could not query database.');
      return 1;
   }

   if (db_num_rows($res)==0) {
      $error = t('Task %id unknown in export queue.',
                  array('%id'=>$taskID));
      return 1;
   }

   $row = db_fetch_next($res);
   if ($row['started']=='') {
      $error = t('Task %id not started yet.',
                  array('%id'=>$taskID));
      return 1;
   }
   if ($row['ended']!='') {
      $error = t('Task %id has already completed.',
                  array('%id'=>$taskID));
      return 1;
   }

   // Hmm, so far, so good.
   if ($ended=='') {
      // Default to current time in ISO8601 format.
      $ended = date('Y-m-d\TH:i:sO');
   }

   if (!$noqueue) {
      $q = q("UPDATE export_queue
              SET ended='%ended',
                  result='%result'
              WHERE id=%id",
              array('%result'=>$result,
                    '%ended'=>$ended,
                    '%id'=>$taskID));
      if (db_query($q)===FALSE) {
         $error = t('Could not update database.');
         return 1;
      }
   }

   return 0;

}// queueItemSetEnded


/* Purges all items that have expired from the queue. Does not make a
 * difference between items on the basis of status; only looks at the
 * creation time. Do not set the expiration period too short or you may
 * cause problems with long-running tasks.
 * Input: maxAge = Number of seconds that an item may stay in the queue.
 *        error = Variable to write the error message to.
 * Output: 0 on success, 1 on failure, with $error containing the message.
 */
function queuePurge($maxAge, &$error) {
   if (!is_numeric($maxAge)) {
      $error = t('maxAge must be a number.');
      return 1;
   }
   $q = q('DELETE FROM export_queue
           WHERE EXTRACT(EPOCH FROM CURRENT_TIMESTAMP-created) > %ttl',
          array('%ttl'=>$maxAge));
   if (db_query($q)==FALSE) {
      $error = t('Could not purge export queue.');
      return 1;
   } else {
      $error = '';
      return 0;
   }
}

?>
