$Id$
In CVS at $Source$

Overview
--------

Site customization
------------------

No two incident response teams are the same. AIRT offers a number of local
site customization hooks which can be used to taylor its behaviour for local
circumstances. The hooks that are presently provided are

* site specific ip address classification

  Depending on the setup of a site, simple classification of an IP address
  into a network might not be enough. AIRT offers customization by defining
  a function 

  function custom_categorize($ip, $networkid) {
        return $networkid;
  } 

  The function takes as input the IP address that needs to be categorized
  and the network id in which it is placed by AIRT's built-in categorization
  system. Return the network id in which you want the ip to be categorized.

* site specific ip address details

  After an IP address has been categorized into a network, additional
  detail can be provided by defining this function. Note that it is possible
  to see session variables in this function. A list of settable session
  variables can be found in the documentation tree.

  function search_info($ip, $networkid) {
      return;
  } // search_info

* hooks for "events"

  Use the customfunctions.plib list to add custom event handlers. Event
  handlers take the format

  addEventHandler($eventType, $handlerFunction)

  E.g. to add a local event handler for the creation of a new incident, add
  a line

  addEventHander("newincident", "local_NewIncident");

  Every time a new incident is created, the function local_NewIncident will
  be called, which may take one argument. The argument will contain a
  event-specific string.


Installation manual for packages
--------------------------------

1. Configuring AIRT after installation

    After installing AIRT, a few actions need to be taken.

    Step 1. Create the database referred to in the configuration file. This
    would typically be achieved by changing to the postgres user and giving
    the following commands

        postgres:~% createdb airt
        CREATE DATABASE

    Step 2. Create the database user that is referred to in the configuration
    file. For example,

        postgres:~% createuser airt --no-createdb --no-adduser -P
        CREATE USER

  You will be prompted for a password for the AIRT user. Keep this password
  somewhere handy, as you will need it again.

    Step 3. Edit /usr/local/etc/airt/airt.cfg and set the 
    variables apropriately. Note that the configuration file is a
    regular PHP program, and any PHP construct can be used in it. For example,
    it is possible to move the database password out of the main configuration
    file and move it to its own file by using PHP's require_once operator.

    Step 4. Make sure the airt user has access to the database. Edit
    pg_hba.conf. On most systems, that file can be found in /etc/postgresql,
    but your milage may vary.

    Keep in mind that the order of access control rules in pg_hba.conf is
    important. Add the following line after the line which grants the postgres
    user access to all databases:

        local   airt        airt       password


    Step 5. As root, signal postgres to reload the configuration. On most
    installations, this may be achieved by a command similar to 
    /etc/init.d/postgresql restart, however you may have chosen a different
    setup. 

    Debian administrators may use the command:

        root:~# invoke-rc.d postgresql reload

    Step 6. Initialise the database.

    Dont worry if the script outputs ERRORs in the the beginning; this is due
    to the fact that it tries to drop sequences and tables that may not exist
    yet.

    Having psql and gunzip in your PATH, do:

    postgres:~% gunzip -c /usr/local/share/doc/airt/airtschema.sql.gz \
            |psql airt airt


    Step 7. Bootstrap the database.

    postgres:~% psql airt airt < \
        /usr/local/share/doc/airt/airtbootstrap.sql 

    Step 8. Configure your web server. If you are using Apache, the easiest
    way to do this is to add a symbolic link in your configuration directory
    and include that file.

    Debian administrators can achieve the same by adding a symbolic link
    in /etc/apache/conf.d (or /etc/apache2/conf.d) which leads to
    /usr/local/etc/airt/airt-apache.conf

    Step 9. Confirm that the configuration file is correct. Apache
    administrators do

        root:~# apachectl configtest

    (or apache2ctl, or apache-sslctl, etc)

    Step 10. If everything checks out, reload the apache configuration and you
    should be done. If apache is already running, do

        root:~# /etc/init.d/apache reload

    else do

        root:~# /etc/init.d/apache start

    Step 11. Change the admin password. Point your browser at the machine that
    hosts the application and log in with user admin, password admin. On the
    main menu, click Edit settings > Edit users. Then, on the line with the
    admin user, click edit and set a (different) password.

    NOTE: For the time being, passwords are stored in PLAIN TEXT in the
    database. Make sure you keep that in mind when you choose a password, and
    also inform your users about this fact.

AIRT deinstallation manual for packages
---------------------------------------

Uninstalling AIRT consists of the following steps:

    Step 1: Remove PHP files; generally this may be achieved by 

        root:~# rm -rf /usr/share/airt

    Depending on your packacing policy, this may differ. Debian administrators
    do

        root:~# apt-get remove --purge airt

    Step 2: Remove data files. Generally this may be achieved by

        root:~# rm -rf /var/lib/airt

    Debian administrators can skip this step, as it is taken care of by the
    --purge option to apt-get remove.

    Step 3: Remove the database. This may be achieved by

        postgres:~% psql template1
        Welcome to psql 7.4.6, the PostgreSQL interactive terminal.
        ...

        template1=# drop database airt;
        DROP database

    Step 4: Remove the database user. This may be achieved by

        template1=# drop user airt;
        DROP USER

    Step 5: Update pg_hba.conf. Remove the line which grants access to the
    airt database from pg_hba.conf and signal Postgresql to reload its
    configuration files.

# EOF
