#!/usr/bin/php
<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * airt_export -- spawn off external tasks from the AIRT Export Queue.
 */

define('AIRT_VERSION','@VERSION@');

// Including the standard config and library files is postponed until after
// the parameter parsing, to allow for a virtual host override.

// Set up all default command line options.
// Options are either Boolean (--option) or scalar (--option=value).
$OPTIONS = array();
$OPTIONS['--help']         = false;
$OPTIONS['--maxhours']     = EXPORT_QUEUE_MAX_HOURS;
$OPTIONS['--noqueue']      = false;
$OPTIONS['--purge']        = false;
$OPTIONS['--result-code']  = 'UNKNOWN';
$OPTIONS['--result-id']    = '';
$OPTIONS['--result-msg']   = '';
$OPTIONS['--verbose']      = false;
$OPTIONS['--virtual-host'] = '';

// Run over command line arguments.
array_shift($argv);               // get rid of argument 0, the command itself.
foreach ($argv as $param) {
   if (substr($param,0,2)=='--') {
      // Option parameter.
      @list($option,$value) = explode('=',$param);
      if (isset($OPTIONS[$option])) {
         // Known option, get new value of the correct type. Don't touch
         // default in case scalar and no value is given.
         if (is_bool($OPTIONS[$option])) {
            $OPTIONS[$option] = true;
         } else {
            if ($value!='') {
               $OPTIONS[$option] = $value;
            }
         }
      } else {
         // Unknown option, quit.
         fwrite(STDERR, t('ERROR: Unknown option "%s".',
                          array('%s'=>$option)).
                        "\n");
         exit(1);
      }
   }
   // File parameters are not used, at least not yet. See importqueue for a
   // good example on how to handle them.
}// foreach parameter

// If virtual host override, set it.
if ($OPTIONS['--virtual-host']!='') {
   define('VIRTUAL_HOST',$OPTIONS['--virtual-host']);
}

// Pick up standard AIRT config and required library (which pulls in the
// other required libraries).
require_once '@ETCDIR@/airt.cfg';
require_once ETCDIR.'/exportqueue.cfg';
require_once LIBDIR.'/exportqueue.plib';

// Retrieve all wrappers installed in LIBDIR. We need this list for --help,
// so we build it even when no actual task calling might take place.
$WRAPPERS = getWrapperList();

// Help requested?
if ($OPTIONS['--help']) {
   printUsage();
   exit(0);
}

if ($OPTIONS['--verbose']) {
   if (VIRTUAL_HOST!='') {
      echo t('Virtual host is %s',
              array('%s'=>VIRTUAL_HOST))."\n";
   }
}

// Check whether the queue is being purged.
if ($OPTIONS['--purge']) {
   // Purge request. Get maximum hours expiration (has good default).
   $maxhours = $OPTIONS['--maxhours'];
   if ($OPTIONS['--noqueue']) {
      msg(t('Purge of export queue (max. TTL %hours hours) skipped.',
            array('%hours'=>$maxhours)));
   } else {      
      // Purge all tasks that have a "created" time stamp which is too old.
      msg(t('Purging all export queue tasks older than %hours hours.',
            array('%hours'=>$OPTIONS['--maxhours'])));
      if (queuePurge($maxhours, $error)) {
         fwrite(STDERR,t('ERROR:').' '.$error."\n");
         exit(1);
      }
   }

   exit(0);
}// if called to purge the export queue.


// Check whether a running task is being completed.
if ($OPTIONS['--result-id']!='') {
   // A finished task wants to post its result back. Sanitise taskid, the
   // others are plain strings that will not be parsed.
   $taskid = sprintf('%d',$OPTIONS['--result-id']);

   // Output some diagnostics.
   msg(t("Task %id finished with result code %code:\n%msg\n",
          array('%id'=>$taskid,
                '%code'=>$OPTIONS['--result-code'],
                '%msg'=>$OPTIONS['--result-msg'])));

   if ($OPTIONS['--noqueue']) {
      msg(t('Task completion not actually being registered.'));
   } else {
      // Put the received return code and message in the queue and flag the
      // 'ended' time. This formally ends the task. The result string is made
      // by concatenating the result code and the message.
      $result = db_escape_string(trim(
         $OPTIONS['--result-code'].' '.$OPTIONS['--result-msg']));
      if (queueItemSetEnded($taskid, '',
                            $result,
                            $OPTIONS['--noqueue'],
                            $error)) {
         fwrite(STDERR,t('ERROR:').' '.$error."\n");
         exit(1);
      }
      msg(t('Task completion has been registered.'));
   }

   exit(0);
}; // If called to signal the end of a running external task.


///// The remainder of the script is the regular queue dispatcher. /////

// Find out all tasks to spawn, i.e., tasks with a 'scheduled' time that has
// passed while they have no 'started' time yet.
msg(t('Reading export queue...'));
if (getQueueRunnable($runnable, $error)) {
   fwrite(STDERR,t('ERROR:').' '.$error."\n");
   exit(1);
}
if (db_num_rows($res)==0) {
   msg(t('No tasks to spawn at this moment.'));
}

// Run over all tasks that are ready to be spawned.
foreach ($runnable as $id=>$details) {
   $task   = $details['task'];
   $params = $details['params'];
   msg(t('Want to start "%task".',
         array('%task'=>$task)));
   // Known wrapper?
   if (!array_key_exists($task,$WRAPPERS)) {
      // Non-critical error, continue, as we are in a loop.
      fwrite(STDERR,t('ERROR: unknown task wrapper "%wrapper".',
                      array('%wrapper'=>$task))."\n");
      continue;
   }

   if (!$OPTIONS['--noqueue']) {
      // We fill in "started" time stamp before we call "spawnTask()", since a
      // failed start won't be reattempted.
      if (queueItemSetStarted($id,'',$error)) {
         // This is pretty critical, so quit, even while we are in a loop.
         fwrite(STDERR,t('ERROR:').' '.$error."\n");
         exit(1);
      }
   }

   // Compile the parameter array. The parameter string does not contain
   // spaces as argument separator, but bang '!' signs, just as Nagios.
   // The first parameter is always added and is always the task ID, which
   // is needed for the exit status return.
   $params = "$id!$params";
   $paramArray = explode('!',$params);

   // Compile the exact file path to spawn.
   $execPath = $WRAPPERS[$task];

   if ($OPTIONS['--noqueue']) {
      // No actual spawning of the task.
      msg(t('Not actually spawning %exec.',
            array('%exec'=>$execPath)));
   } else {
      // Execute the wrapper asynchronously.
      msg(t('Spawning background task %exec...',
            array('%exec'=>$execPath)));
      $error = spawnTask($execPath,$paramArray);
      if ($error!='') {
         // Oops. Signal the problem, but continue processing, as we are in a
         // loop.
         fwrite(STDERR, t('ERROR: ').$error."\n");
      }
   }

}// for each task to spawn

// Successful completion.
msg('airt_export done.');
return 0;
