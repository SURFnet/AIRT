#!/usr/bin/php
<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * airt_export -- spawn off external tasks from the AIRT Export Queue.
 * 
 * $Id$
 */

define('AIRT_VERSION','@VERSION@');

// Pick up standard AIRT config and required library (which pulls in the
// other required libraries).
require_once '@ETCDIR@/airt/airt.cfg';
require_once ETCDIR.'/exportqueue.cfg';
require_once LIBDIR.'/exportqueue.plib';

// Set up all default command line options.
// Options are either Boolean (--option) or scalar (--option=value).
$OPTIONS = array();
$OPTIONS['--help']        = false;
$OPTIONS['--noqueue']     = false;
$OPTIONS['--result-id']   = '';
$OPTIONS['--result-code'] = 'UNKNOWN';
$OPTIONS['--result-msg']  = '';
$OPTIONS['--verbose']     = false;

// Run over command line arguments.
array_shift($argv);               // get rid of argument 0, the command itself.
foreach ($argv as $param) {
   if (substr($param,0,2)=='--') {
      // Option parameter.
      @list($option,$value) = split('=',$param);
      if (isset($OPTIONS[$option])) {
         // Known option, get new value of the correct type.
         if (is_bool($OPTIONS[$option])) {
            $OPTIONS[$option] = true;
         } else {
            $OPTIONS[$option] = $value;
         }
      } else {
         // Unknown option, quit.
         fwrite(STDERR, t('ERROR: Unknown option "%s".',
                          array('%s'=>$option)).
                        "\n");
         exit(1);
      }
   }
   // File parameters are not used, at least not yet. See importqueue for a
   // good example on how to handle them.
}// foreach parameter

// Retrieve all wrappers installed in LIBDIR. We need this list for --help,
// so we build it even when no actual task calling might take place.
// Due to the possibility of double inclusion of the same directory, we
// suppress second or third occurrences of the same wrapper.
$WRAPPERS = array();
foreach ($AIRT_EXPORTWRAPPER_DIRS as $dir) {
   $libdir = opendir($dir);
   while ($file = readdir($libdir)) {
      $wrapper_name = basename($file);
      if (substr($wrapper_name,0,8)=='wrapper_') {
         // Found a wrapper file. Check whether it is executable.
         if (!is_executable($dir.'/'.$wrapper_name)) {
            // Bad wrapper, complain but do not quit.
            fwrite(STDERR, t('WARNING: wrapper "%s" not executable.',
                             array('%s'=>$wrapper_name)).
                           "\n");
         } else {
            // Ok, register the wrapper if we don't have it yet.
            if (array_search(substr($wrapper_name,8),$WRAPPERS)===FALSE) {
              $WRAPPERS[substr($wrapper_name,8)] = $dir.'/'.$file;
            }
         }
      }
   }// for each file name
   closedir($libdir);
}


// Help requested?
if ($OPTIONS['--help']) {
   printUsage();
   exit(0);
}


// Purge all tasks that have an "ended" time stamp 24+ hours ago (setting).
// This action is always silently taken, unless --help is requested.
$q = q('DELETE FROM export_queue
        WHERE EXTRACT(EPOCH FROM CURRENT_TIMESTAMP-ended) > 24*60*60');
if (db_query($q)==FALSE) {
   fwrite(STDERR,t('ERROR: Could not purge export queue.')."\n");
   exit(1);
}


// Check whether a running task is being completed.
if ($OPTIONS['--result-id']!='') {
   // A finished task wants to post its result back. Sanitise taskid, the
   // others are plain strings that will not be parsed.
   $taskid = sprintf('%d',$OPTIONS['--result-id']);

   if ($OPTIONS['--verbose']) {
      // Output some diagnostics.
      echo t("Task %id finished with result code %code:\n%msg\n",
             array('%id'=>$taskid,
                   '%code'=>$OPTIONS['--result-code'],
                   '%msg'=>$OPTIONS['--result-msg']));
   }

   // See whether the identified task is still open. Be paranoid.
   $q = q('SELECT started,ended
           FROM export_queue
           WHERE id=%id',
           array('%id'=>$taskid));
   $res = db_query($q);
   if ($res==FALSE) {
      fwrite(STDERR,t('ERROR: Could not query database.')."\n");
      exit(1);
   }
   if (db_num_rows($res)==0) {
      fwrite(STDERR,t('ERROR: Task %id unknown in export queue.',
                      array('%id'=>$taskid))."\n");
      exit(1);
   }
   $row = db_fetch_next($res);
   if ($row['started']=='') {
      fwrite(STDERR,t('ERROR: Task %id not started yet.',
                      array('%id'=>$taskid))."\n");
      exit(1);
   }
   if ($row['ended']!='') {
      fwrite(STDERR,t('ERROR: Task %id has already completed.',
                      array('%id'=>$taskid))."\n");
      exit(1);
   }

   if ($OPTIONS['--noqueue']) {
      msg(t('Task completion not actually being registered.'));
   } else {
      // Put the received return code and message in the queue and flag the
      // 'ended' time. This formally ends the task. The result string is made
      // by concatenating the result code and the message.
      $result = db_escape_string(trim(
         $OPTIONS['--result-code'].' '.$OPTIONS['--result-msg']));
      $q = q("UPDATE export_queue
              SET ended=CURRENT_TIMESTAMP,
                  result='%result'
              WHERE id=%id",
              array('%result'=>$result,
                    '%id'=>$taskid));
      if (db_query($q)===FALSE) {
         fwrite(STDERR,t('ERROR: Could not update database.')."\n");
         exit(1);       
      }
      msg(t('Task completion has been registered.'));
   }

   exit(0);
}; // If called to signal the end of a running external task.


///// The remainder of the script is the regular queue dispatcher. /////

// Find out all tasks to spawn, i.e., tasks with a 'scheduled' time that has
// passed while they have no 'started' time yet.
msg(t('Reading export queue...'));
$q = q('select id,task,params
        from export_queue
        where scheduled<CURRENT_TIMESTAMP
          and started IS NULL');
$res = db_query($q);
if ($res===FALSE) {
   fwrite(STDERR,t('ERROR: Could not query database for tasks to run.')."\n");
   exit(1);
}
if (db_num_rows($res)==0) {
   msg(t('No tasks to spawn at this moment.'));
}

// Run over all tasks that are ready to be spawned.
while ($row = db_fetch_next($res)) {
   $id     = $row['id'];
   $task   = $row['task'];
   $params = $row['params'];
   msg(t('Want to start "%task".',
         array('%task'=>$task)));
   // Known wrapper?
   if (!array_key_exists($task,$WRAPPERS)) {
      // Non-critical error, continue, as we are in a loop.
      fwrite(STDERR,t('ERROR: unknown task wrapper "%wrapper".',
                      array('%wrapper'=>$task))."\n");
      continue;
   }

   if (!$OPTIONS['--noqueue']) {
      // We fill in "started" time stamp before we call "spawnTask()", since a
      // failed start won't be reattempted.
      $q = q("UPDATE export_queue
              SET    started=CURRENT_TIMESTAMP
              WHERE  id=%id",
              array('%id'=>$id));
      $res = db_query($q);
      if ($res===FALSE) {
         // This is pretty critical, so quit, even while we are in a loop.
         fwrite(STDERR,t('ERROR: Could not update database.')."\n");
         exit(1);
      }
   }

   // Compile the parameter array. The parameter string does not contain
   // spaces as argument separator, but bang '!' signs, just as Nagios.
   // The first parameter is always added and is always the task ID, which
   // is needed for the exit status return.
   $params = "$id!$params";
   $paramArray = explode('!',$params);

   // Compile the exact file path to spawn.
   $execPath = $WRAPPERS[$task];

   if ($OPTIONS['--noqueue']) {
      // No actual spawning of the task.
      msg(t('Not actually spawning %exec.',
            array('%exec'=>$execPath)));
   } else {
      // Execute the wrapper asynchronously.
      msg(t('Spawning background task %exec...',
            array('%exec'=>$execPath)));
      $error = spawnTask($execPath,$paramArray);
      if ($error!='') {
         // Oops. Signal the problem, but continue processing, as we are in a
         // loop.
         fwrite(STDERR, t('ERROR: ').$error."\n");
      }
   }

}// for each task to spawn

// Successful completion.
msg('airt_export done.');
return 0;

?>
