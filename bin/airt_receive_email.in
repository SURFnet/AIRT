#!/usr/bin/php
<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * AIRT: APPLICATION FOR INCIDENT RESPONSE TEAMS
 * Copyright (C) 2005   Tilburg University, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

define('AIRT_VERSION','@VERSION@');

$OPTIONS=array();
$OPTIONS['--virtual-host']='';
array_shift($argv);               // get rid of argument 0, the command itself.
foreach ($argv as $param) {
   if (substr($param,0,2)=='--') {
      // Option parameter.
      @list($option,$value) = split('=',$param);
      if (isset($OPTIONS[$option])) {
         // Known option, get new value of the correct type.
         if (is_bool($OPTIONS[$option])) {
            $OPTIONS[$option] = true;
         } else {
            $OPTIONS[$option] = $value;
         }
      } else {
         // Unknown option, quit.
         fwrite(STDERR, t('ERROR: Unknown option "%s".',
                          array('%s'=>$option)).
                        "\n");
         exit(1);
      }
   } 
}// foreach parameter

if ($OPTIONS['--virtual-host']!='') {
   define('VIRTUAL_HOST',$OPTIONS['--virtual-host']);
}
require_once '@ETCDIR@/airt.cfg';
require_once LIBDIR.'/airt.plib';
require_once LIBDIR.'/mailbox.plib';
require_once LIBDIR.'/incident.plib';

/* corresponding database schema
 *
 *  create table mailbox (
 *      id    integer,      -- pull from generic_sequence
 *      messageid varchar,  -- Message-Id header
 *      sender    varchar,  -- From header (not envelope from)
 *      recipient varchar,  -- To header
 *      date      numeric,  
 *      subject   varchar,  -- Subject header
 *      body      varchar,  -- Everything not header (no mime parsing yet)
 *      primary key (id)
 *  );
 */

/** 
 * parse an array as if it were email headers
 * 
 * @param $input array containing headers
 * @param $output array with attribute/value pairs
 */
function parse_email_headers($input, &$output) {
   $value = '';
   $key = '';
   foreach ($input as $line) {
      if (preg_match('/^From (.*)/', $line, $match) > 0) {
         $output['envelope-from'] = $match[1];
      }
      if (preg_match('/^([^:]+): (.*)/', $line, $match) > 0) {
         /* start of new key/value pair. Add the current on to the output
          * array and re-initialise
          */
         if ($key != '') {
            $output[$key] = $value;
         }
         $key = $match[1];
         $value = trim($match[2]);
      } else {
         $value .= ' '.trim($line);
      }
   }
   $output[$key] = $value;
   return true;
}


/**
 * parse the message retrieved from $stream
 *
 * @param $stream stream to retrieve the message from
 * @param $output an associative array containing two sub-arrays (headers and
 * body)
 * @param $error an optional error string
 *
 * @return true on success, false on failure
 */
function receive_email($stream, &$output, &$error='') {
   /* read the entire stream into main memory and split it up using
    * newline as a terminator 
    */
   $input = stream_get_contents(STDIN);
   if (empty($input)) {
      $error= _('No data found');
      return false;
   }
   $data = explode("\n", $input);
  
   /* find the first blank line in the message; it separates headers
    * from the body
    */
   $n=0;
   while ($n < sizeof($data)) {
      if ($data[$n] != '') {
         $n++;
      } else {
         break;
      }
   }
   
   $headers = array_slice($data, 0, $n);
   $body = array_slice($data, $n+1);
  
   parse_email_headers($headers, $output['headers']);
   $output['body'] = implode("\n", $body);
   $output['raw'] = $input;

   return true;
}


/**
 * Move the message to the email queue.
 * 
 * @return true on success, false on failure
 */
function toMailQueue($data, &$error='') {
   if (!is_array($data)) {
      $error = _('Invalid parameter type.'). ' airt_receive_email.in:'.__LINE__;
      return false;
   }
   if (!array_key_exists('body', $data)) {
      $error = _('Missing body in email.'). ' airt_receive_email.in:'.__LINE__;
      return false;
   }
   if (!array_key_exists('headers', $data)) {
      $error = _('Missing headers in email.'). ' airt_receive_email.in:'.__LINE__;
      return false;
   }
   $sender = $recipient = $subject = $messageid = $date = '';
   foreach ($data['headers'] as $key=>$value) {
      switch (strtolower($key)) {
         case 'from':
            $sender = $value;
            break;
         case 'to':
            $recipient = $value;
            break;
         case 'subject':
            $subject = iconv_mime_decode(trim($value),2,"UTF-8");
            break;
         case 'message-id':
            $messageid = $value;
            break;
         case 'date':
            if (($date = strtotime($value)) === false) {
                $date = strtotime("now");
            }
            break;
      }
   }

   /* fetch next available message id from our generic sequence*/
   $q = q('select nextval(\'generic_sequence\')');
   if (($res = db_query($q)) === false) {
      $error = db_errormessage()._(' in ').'airt_receive_email.in:'.
         __LINE__;
      return false;
   }

   /* this should never happen, but it doesn't hurt to check */
   if (db_num_rows($res) == 0) {
       $error = _('Unable to retrieve next sequence number.').
       _(' in ').'airt_receive_email.in:'.__LINE__;
       return false;
   }

   /* fetch the resulting tuple */
   if (($row = db_fetch_next($res)) === false) {
      $error = db_errormessage()._(' in ').'airt_receive_email.in:'.
         __LINE___;
      return false;
   }

   /* and extract the value */
   $id = $row['nextval'];

   db_free_result($res);
   $q = q('insert into mailbox (id, messageid, sender, recipient, date, '.
      'subject, body, raw, status) values (%dbid,
      %msgid, %sender, %recipient, %date, %subject, %body, %raw, %status)', 
      array(
         '%dbid' => db_masq_null($id),
         '%msgid' => db_masq_null($messageid),
         '%sender' => db_masq_null($sender),
         '%recipient' => db_masq_null($recipient),
         '%date' => $date,
         '%subject' => db_masq_null($subject),
         '%body' => db_masq_null($data['body']),
         '%raw' => db_masq_null($data['raw']),
		 '%status' => db_masq_null(AIRT_MAIL_STATUS_UNREAD),
      )
   );
   if (($res = db_query($q)) === false) {
      $error = db_errormessage()._(' in ').'airt_receive_email.in:'.
         __LINE__;
      return false;
   }
   db_free_result($res);
 
   /* if we find out incidentid in the subject, link it to the message
    * just imported. Don't throw error messages when the message does
    * not exist, or when the link fails.
    */
   if (preg_match_all('/'.INCIDENTID_PREFIX.'([0-9]+)/i', $subject, $match) > 0) {
        foreach ($match[1] as $subjId) {
            addEmailToIncident($subjId, $id, $error);
        }
   }
   return true;
}

$output = array();
$error ='';
if (receive_email(STDIN, $output, $error) == false) {
   error_log("airt_receive_email: receive error: $error\n");
} else {
   if (toMailQueue($output, $error) == false) {
       error_log("airt_receive_email: mailq error: $error\n");
   }
}
