Design of the AIRT Export Queue
===============================================================================
$Id$

The AIRT Export Queue is a mechanism to asynchronously call external
programs from within the AIRT interface. Async calls are interesting when
the external program takes longer than a few seconds to execute, and thus a
synchronous call would be impractical. Typical external async calls are for
a nmap/Nessus run, which could take hours to complete. An additional feature
is that the export queue can run external programs as a different user than
the web server user (typically "www-data").


AIRT User Interface
-------------------
External programs can be called up in the AIRT interface from two places:
outside an incident (side menu or main menu) and inside an incident
(incident details page). The difference is that the former never has any
context, while the latter can provide some context data from the incident
record and a limited option to feed the results of the external program back
to the incident record.

Since the operational usage of the export queue still needs to be piloted,
we do not provide extensive user interfaces yet. A basic queue manager and
detailed technical documentation are available. In the future, after
operational experience has been gained, we can add a task manager, which
defines the available tasks and their parameters in a less technical way.


AIRT System Interface
---------------------
The Export Queue is a mechanism which provides a single, clean access point
to external programs from within AIRT, together with a basic option for data
passthrough which might be of interest to the external program.

AIRT uses as much of the operating system as possible to implement the
external program queue. The AIRT part is limited to a bit of administration
of queued, running, and completed jobs, plus a narrow interface to and from
the free-running external programs. A fundamental design issue was to fully
separate the external program code and environment from the AIRT system.
Especially for programs such as nmap which tend to require to be run as
root, such a paranoid approach really is required.

The narrow channel between AIRT and the external program allows for a simple
one-line parameter string that is passed to the program. With the external
program forked off asynchronously, the options it has to send the result
back to AIRT are limited. As part of the parameter string, it receives a
task ID that functions as the handle to return the results. The returned
results are limited to one single one-line string, which should start with
OK, WARNING or ERROR, followed by a maximum of 80 characters in flat ASCII.
For AIRT, the reception of this file marks the end of the exported task. It
only serves as a commented flag. AIRT does not process the results in any
way, it just stores them in the export queue to flag the completion of the
task.

If the external program has more than just a one-liner to report back to
AIRT, it must do so via the import mechanism, creating a new incident or
adding to an existing one. AIRT does not provide extra help except for what
the import mechanism already offers.


Operating System Interface
--------------------------
Several important issues need to be adressed by the OS interface, notably
the fully asynchronous execution of a non-AIRT program, the switching to
another user (not the web server ("www-data") user), and the handling of
standard system housekeeping tasks such as security and resource management.
AIRT explicitly does not try to shield itself from the external programs.
This separation is fully in the hands of the OS, and therefore in the hands
of the OS administrator, who does not need to trust any AIRT code.

AIRT uses the system batch job facility, known as cron. An AIRT-provided PHP
script in CLI mode is run every n minutes via a standard entry in
/etc/cron.d/airt . The system administrator determines how often (typically
once per minute) and as which user (typically "airtexport") this script is
run.

The cron script accesses the AIRT core database and picks up exported tasks
that are ready to be run. These tasks must be available as an executable in
a predefined directory, usually /usr/local/share/airt/lib/export_wrappers,
as they are site-specific. If the correct executable can be found, it is
forked off with the parameter string from the database, and the cron script
logs this event back to the AIRT core database. The cron script then
terminates and will run again when cron fires.

The site-specific executables in /usr/local/share/airt/lib/export_wrappers
are usually wrappers around standard programs such as nmap. The wrapper sets
up a working environment for the actual work horse, including a sudo
statement if required. If output of the work horse needs to be retained for
reporting, it should be sent to files, but the wrapper script is responsible
for all housekeeping. If extensive results are to be sent to AIRT, the
wrapper needs to call the airt_import program with the proper filter.  After
everything is said and done, the wrapper is expected to call airt_export
again with the --result-id parameter and its task ID.  --result-code is by
convention also required (but technically not), and --result-msg is a good
idea. These data are sent back to the AIRT export queue, and flag the formal
end of the task.

If an external program crashes and is not able to send the exit status back
to the export queue, the job will remain flagged as "started at ..." until
the export queue is purged. AIRT is robust against this, but does not take
actions to determine why the process crashed.


AIRT DATABASE SCHEMA EXTENSION

The export queue has a few database structures to manage and administer the
starting and stopping/cleaning up of background tasks. Purpose of the table
is to hold tasks to be started, tasks that have been started and are
supposedly running now, tasks that have completed and returned results, and
tasks that might have died without returning a result.

CREATE TABLE export_queue (
  id        integer;
  task      varchar(32)   not null,
  params    varchar(256),
  created   timestamp     not null,
  scheduled timestamp,
  started   timestamp,
  ended     timestamp,
  result    varchar(256),
  primary key (id)
)

The airt_export program queries the table and selects tasks with both a
"scheduled" time that has passed and no "started" time. These are started by
forking off the "task" wrapper script with the "ID" parameter and the
"params" string broken up in pieces. Start time is also recorded. When a
task ends, ended time is recorded and the return string is stored in the
table. Queue entries are only removed by an explicit purge action
(typically from cron).


EXPORT QUEUE PURGING

No automatic purging of the queue is done. A database purge must be
initiated by running the 'airt_export --purge' command, typically from cron
and a few times per day. The default maximum time to live in hours is
defined in etc/exportqueue.cfg, but may be overridden on the command line:
'airt_export --purge --maxhours=100' would purge jobs created more than 100
hours ago. It is up to the installation admin to decide how often the queue
is purged and how long jobs may stay in there for reference.

[EOF]
