Work plan for the AIRT Spring Code Cleaning
===========================================

Main targets:

1. Full multilingual preparation for GNU gettext, including all required
   documentation for all relevant people.

2. Where relevant, add Doxygen documentation to functions, and document 
   the full procedure to generate external API documentation from these.

3. Scrutinise the universal use of string escapes for SQL generation.

4. Introduce the universal use of the getparam() or fetchFrom() functions to
   safely retrieve external parameters (GET, POST, COOKIE...).

5. Have a general look at everything that might need cleaning.


GNU gettext support for AIRT
----------------------------

There are four things for gettext that need attention, of which only one
needs work in the AIRT code base.

1. Write code so that all English strings that can reach the user interface
   are passed through the _() function. Take care that these strings must
   be reasonably coherent so that a translator can process them out of
   context. Also take care that you do not want direct variable expansion in
   these strings, always use the printf() variant and where necessary
   provide numbered arguments so they can be swapped and repeated ($).
   Note: it does not suffice that you have one _() function which gets
   passed parameters; it needs literal strings, due to step 2.

2. Run the xgettext(1) program over your sources (from a Makefile). This
   will extract all literal strings that are within _() function calls.
   Obviously, for this to work, you need to do step 1. properly and test it.

3. The result is a .po file, which is flat ASCII and can be translated.
   There are nice tools available for this, such as poedit(1) (auch f√ºr
   Fenster).

4. The translated .po file comes back, is compiled via msgfmt(1) into a .mo
   file, and gets installed in a very specific place on the system. Live
   calls to the _() function now may use their parameter as a lookup index
   into the .mo file and return the translated string instead of the
   original string.

Actual details will be provided as the spring code cleanup progresses. There
is documentation available in php-gettext.txt as well, which will eventually
get adapted to the AIRT situation.


Doxygen support for AIRT
------------------------

Doxygen (http://www.stack.nl/~dimitri/doxygen/) allows for quick and handy
low-level (API) documentation generation straight from the sources. It does
not replace any other form of documentation, but may help developers in both
finding relevant APIs quicker and writing better API documentation.

We use the JavaDoc style, '/**', to introduce Doxygen doc blocks. The first
sentence (until and including the dot) is always treated as a brief
description (JAVADOC_AUTOBRIEF=YES), so please write this accordingly. We do
not go over the top in using Doxygen features, we only do mandatory brief
descriptions, optionally detailed descriptions, and a small selection of the
Doxygen special commands: @file, @param[in|out], @return, @todo.

In order to generate the documentation, you need the 'doxygen' package:
  # apt-get install doxygen
and to run it, you cd to the source directory and type:
  $ doxygen airt.doxy
You can now find the generated documentation in source/doc/api/html.
Typically you want to view index.html with a good, CSS-aware browser.

Doxygen documentation generation needs to be reviewed better as all the
files get cleaned, as currently there is a lot of cruft being generated.
JH, 2006-05-10.


String escapes for SQL generation
---------------------------------
To avoid SQL injection due to sloppy variable expansion, we use a rule that
all user-provided strings fed to an SQL parser have to be escaped, no matter
what their expected content is. Whereas number escapes can and should be
reliably done via the sprintf() function, string escapes are database-
specific. Therefore the database library (database.plib) contains the
correct escape function, always called db_escape_string().

Under no circumstances should SQL queries be assembled using plain PHP
variable expansion (SELECT field FROM table WHERE id=$id).
Because this is so important, we have extended the lowest level database
call db_query() with the sprintf() equivalences. Typical use is:
  db_query("INSERT INTO table
              (field1, field2)
              VALUES (%d,'%s')",
            $someInteger,
            $someString);
The first parameter is a syntactically correct SQL statement with or without
replacement (%) strings. The subsequent parameters are the expressions that
will replace the % strings, just as with sprintf(). There is one slight, but
important difference between db_query() and sprintf(): all substitution 
parameters, regardless of actual type, will be db_escape_string()-ed before
insertion into the query string. This in practice only affects expressions
with quotes, i.e., strings. But it makes it impossible to forget to do
replacements as long as the programmer uses % syntax and substitution
parameters instead of one pre-crafted SQL string. Which still is an option
for very special cases.

TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO 

We actually need two variants of db_query(). One, the most common one, uses
the default global $db for the database connection. The second one is called
db_query_conn() and needs an extra parameter (first parameter) which is an
explicit database connection. So:

  db_query('SQL',$expr,$expr,$expr...);
  db_query_conn($db,'SQL',$expr,$expr,$expr...);

The current code uses the second option only in php/roles.php en
php/roleassignments.php; these two files need to be adapted when the new
db_query() syntax is introduced.

TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO 


Use fetchFrom() function to get at external parameters
------------------------------------------------------
Since PHP 4.1.0, use of the register_globals=on parameter has been
discouraged. But using the available $_{POST|GET|COOKIE} superglobal arrays
is impractical as they are not protected against empty values and a miss
will generate a PHP warning. So we introduce a fetchFrom() function which
reliably and safely fetches the required parameter from the superglobal
arrays, or creates an empty variable if the parameter is absent. As a bonus,
the fetchFrom() function can force a sprintf() mask over the retrieved
parameter, and it can cope with Sybase Magic Quotes interference (which we
want OFF or at least not included; we do our escapes just before we create
SQL, not when we pick up variables).

In some situations, for example when we want to explicitly check whether a
cookie is already set, direct access to the $_COOKIE superglobal array might
be required, but this does not in any way invalidate the fetchFrom()
function. fetchFrom() is just a convenient shortcut that also improves code
readability a lot.


General cleanup
---------------
Especially look closely at our coding style guidelines and enforce them
where appropriate.


[EOF]
